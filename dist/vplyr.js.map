{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/config.js","src/js/index.js","src/js/player/controls.js","src/js/player/index.js","src/js/player/player.js","src/js/player/storage.js","src/js/utils/dom.js","src/js/utils/events.js","src/js/utils/logger.js","src/js/utils/util.js","src/js/vPlayer.js"],"names":[],"mappings":"AAAA;;;;;;;;;QC6FgB,mB,GAAA,mB;;;;AA7FT,IAAM,wCAAgB;AACzB,aAAS,IADgB;AAEzB,WAAO,IAFkB;AAGzB,cAAU,KAHe;AAIzB,UAAM,KAJmB;AAKzB,cAAU,EALe;AAMzB,YAAQ,EANiB;AAOzB,eAAW,CAPc;AAQzB,eAAW,EARc;AASzB,gBAAY,CATa;AAUzB,cAAU,IAVe;AAWzB,qBAAiB,IAXQ;AAYzB,gBAAY,IAZa;AAazB,kBAAc,IAbW;AAczB,cAAU,qCAde;AAezB,cAAU,CAAC,YAAD,EAAe,MAAf,EAAuB,UAAvB,EAAmC,MAAnC,EAA2C,MAA3C,EAAmD,QAAnD,EAA6D,UAA7D,EAAyE,YAAzE,CAfe;AAgBzB;AACI,eAAO,cADX;AAEI,kBAAU,4CAFd;AAGI,mBAAW,QAHf;AAII,kBAAU;AACN,uBAAW,IADL;AAEN,qBAAS;AAFH,SAJd;AAQI,iBAAS;AACL,kBAAM,qBADD;AAEL,kBAAM,qBAFD;AAGL,mBAAO,sBAHF;AAIL,kBAAM,qBAJD;AAKL,wBAAY;AALP,SARb;AAeI,gBAAQ;AACJ,mBAAO,uBADH;AAEJ,qBAAS;AAFL,SAfZ;AAmBI,kBAAU;AACN,uBAAW,+BADL;AAEN,oBAAQ,wBAFF;AAGN,oBAAQ;AAHF;AAnBd,6CAwBY;AACJ,eAAO,uBADH;AAEJ,iBAAS;AAFL,KAxBZ,8CA4BiB,sBA5BjB,2CA6Bc,mBA7Bd,cAhByB;;AAgDzB;AACA,eAAW;AACP,cAAM,IADC;AAEP,cAAM,IAFC;AAGP,eAAO,IAHA;AAIP,iBAAS,IAJF;AAKP,gBAAQ,IALD;AAMP,iBAAS,IANF;AAOP,cAAM,IAPC;AAQP,gBAAQ,IARD;AASP,kBAAU,IATH;AAUP,oBAAY;AAVL,KAjDc;AA6DzB,aAAS;AACL,iBAAS,IADJ;AAEL,aAAK;AAFA,KA7DgB;AAiEzB,WAAO;AACH,eAAO,CAAC,OAAD;AADJ,KAjEkB;AAoEzB,aAAS;AACL,eAAO,aADF;AAEL,eAAO,aAFF;AAGL,eAAO,aAHF;AAIL,cAAM,WAJD;AAKL,sBAAc,uBALT;AAML,iBAAS,cANJ;AAOL,iBAAS,eAPJ;AAQL,eAAO,aARF;AASL,iBAAS,eATJ;AAUL,eAAO,eAVF;AAWL,iBAAS,iBAXJ;AAYL,kBAAU,kBAZL;AAaL,kBAAU,kBAbL;AAcL,kBAAU,WAdL;AAeL,sBAAc,qBAfT;AAgBL,oBAAY;AACR,qBAAS,0BADD;AAER,oBAAQ;AAFA;AAhBP,KApEgB;AAyFzB,YAAQ,CAAC,OAAD,EAAU,OAAV,EAAmB,UAAnB,EAA+B,SAA/B,EAA0C,SAA1C,EAAqD,SAArD,EAAgE,SAAhE,EAA2E,gBAA3E,EAA6F,WAA7F,EAA0G,YAA1G,EAAwH,gBAAxH,EAA0I,YAA1I,EAAwJ,cAAxJ,EAAwK,MAAxK,EAAgL,OAAhL,EAAyL,OAAzL,EAAkM,SAAlM,EAA6M,QAA7M,EAAuN,SAAvN,CAzFiB;AA0FzB;AACA,eAAW;AA3Fc,CAAtB;AA6FA,SAAS,mBAAT,GAA+B;AAClC,WAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,aAAlB,CAAP;AACH;;;;;AC/FD,OAAO,OAAP,GAAiB,QAAQ,cAAR,EAAwB,OAAzC;;;;;;;;;;ACAA;;;;;;AAEO,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,MAAD,EAAU;AAAA,MAC7B,QAD6B,GAChB,MADgB,CAC7B,QAD6B;;AAEnC,MAAM,OAAO,CAAC,4CAAD,EACX,kCADW,EAEX,sCAFW,EAGX,sCAHW,EAIX,wCAJW,EAKX,QALW,EAMX,iDANW,CAAb;AAOA,OAAK,IAAL,CAAU,sCAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,UAAxB,CAAJ,EAAyC;AACvC,SAAK,IAAL,CACE,4CADF,EAEE,yHAFF,EAGE,mFAHF,EAIE,gEAJF,EAKE,+BALF,EAME,aANF,EAOE,QAPF;AASD;AACD,OAAK,IAAL,CAAU,8BAAV;AACA,OAAK,IAAL,CAAU,6BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,4BADF,EAEE,wBAFF,EAGE,4CAHF,EAIE,8CAJF,EAKE,QALF,EAME,QANF;AAQD;AACD,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,iCADF,EAEE,8CAFF,EAGE,wCAHF,EAIE,2CAJF,EAKE,QALF;AAOD;AACD,OAAK,IAAL,CAAU,QAAV,EA1CmC,CA0ChB;AACnB,OAAK,IAAL,CAAU,8BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,YAAxB,CAAJ,EAA2C;AACzC,SAAK,IAAL,CACE,2DADF,EAEE,oCAFF,EAGE,iDAHF,EAIE,QAJF,EAKE,qCALF,EAME,mDANF,EAOE,QAPF,EAQE,QARF;AAUD;AACD,OAAK,IAAL,CAAU,+BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,8CADF,EAEE,0BAFF,EAGE,uCAHF,EAIE,QAJF,EAKE,2BALF,EAME,wCANF,EAOE,QAPF,EAQE,QARF;AAUD;AACD,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,QAAxB,CAAJ,EAAuC;AACrC,SAAK,IAAL,CACE,qCADF,EAEE,mHAFF,EAGE,iFAHF,EAIE,QAJF;AAMD;AACD,OAAK,IAAL,CAAU,QAAV,EA7EmC,CA6EhB;;AAEnB,OAAK,IAAL,CAAU,QAAV,EA/EmC,CA+EhB;;AAEnB,OAAK,IAAL,CAAU,QAAV,EAjFmC,CAiFhB;AACnB,OAAK,IAAL,CAAU,QAAV,EAlFmC,CAkFhB;AACnB,SAAO,KAAK,IAAL,CAAU,EAAV,CAAP;AACH,CApFM;;;;;;;;;;;ACFP;;;;AACA;;;;AACA;;;;;;IAEM,O;AACJ,mBAAY,MAAZ,EAAoB,OAApB,EAA6B;AAAA;;AAC3B,SAAK,GAAL,GAAW,aAAX;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,KAAL,GAAa,MAAb;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;;;4BACO;AACN,UAAM,UAAU,KAAK,KAArB;AACA,UAAM,UAAU,KAAK,OAArB;AACA,UAAI,OAAO,EAAX;;AAEA,UAAI;AAAE,eAAO,KAAK,KAAL,CAAW,QAAQ,YAAR,CAAqB,YAArB,CAAX,CAAP;AAAwD,OAA9D,CACA,OAAO,CAAP,EAAU,CAAG;AACb,UAAM,SAAS,eAAM,MAAN,CAAa,EAAb,yBAA2B,OAA3B,EAAoC,IAApC,CAAf;AACA,UAAI,CAAC,OAAO,OAAZ,EAAqB;AACnB,eAAO,IAAP;AACD;AACD,UAAM,SAAS,qBAAW,OAAX,EAAoB,MAApB,CAAf;AACA,UAAM,WAAU,OAAO,KAAP,EAAhB;AACA,aAAO,YAAP,GAAsB,QAAtB;AACA,cAAQ,GAAR,CAAY,QAAZ;AACD;;;;;;kBAEY,O;;;;;;;;;;;AC5Bf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAHkC;;IAK5B,M;AACJ,kBAAY,KAAZ,EAAmB,MAAnB,EAA2B;AAAA;;AACzB,YAAQ,GAAR,CAAY,qBAAY,EAAxB;;AAEA,QAAM,UAAU,eAAM,WAAN,EAAhB;AACA,SAAK,GAAL,GAAW,QAAX;AACA,SAAK,OAAL,GAAe;AACb,kBADa,EACN;AADM,KAAf;AAGA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,WAAL,GAAmB,cAAE,UAAF,EAAnB;AACA,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,UAAL,GAAkB,MAAM,SAAN,CAAgB,IAAhB,CAAlB;AACD;;;;4BACO;AAAA;;AACN,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHM,UAKE,KALF,GAKY,MALZ,CAKE,KALF;;AAMN,UAAI,MAAM,EAAV;AACA,UAAI,KAAK,QAAT,EAAmB;AACjB,eAAO,IAAP;AACD;AACD,UAAI,CAAC,SAAG,WAAH,CAAe,KAAf,CAAL,EAA4B;AAC1B,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,uBAAhB;AACA;AACD;AACD,iCAAa,MAAb,EAAqB,OAArB;AACA,UAAM,UAAU,MAAM,OAAN,CAAc,WAAd,EAAhB;AACA,aAAO,IAAP,GAAc,OAAd;AACA,aAAO,WAAP,GAAsB,MAAM,YAAN,CAAmB,aAAnB,MAAsC,IAA5D;AACA,aAAO,QAAP,GAAmB,OAAO,QAAP,IAAoB,MAAM,YAAN,CAAmB,UAAnB,MAAmC,IAA1E;AACA,aAAO,IAAP,GAAe,OAAO,IAAP,IAAgB,MAAM,YAAN,CAAmB,MAAnB,MAA+B,IAA9D;AACA,aAAO,SAAP,GAAmB,eAAM,SAAN,CAAgB,OAAO,IAAvB,CAAnB;AACA,UAAI,CAAC,OAAO,SAAP,CAAiB,KAAtB,EAA6B;AAC3B;AACD;AACD,aAAO,SAAP,GAAmB,cAAE,IAAF,CAAO,KAAP,EAAc,SAAS,aAAT,CAAuB,KAAvB,CAAd,CAAnB;AACA,aAAO,SAAP,CAAiB,YAAjB,CAA8B,UAA9B,EAA0C,CAA1C;AACA,WAAK,gBAAL;;AAEA,uBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,KAAK,OAAO,OAAP,CAAe,IAApB,GAA2B,GAA3B,GAAiC,OAAO,OAAP,CAAe,OAAhE;AACA,WAAK,WAAL;AACA,UAAI,eAAM,OAAN,CAAc,OAAO,KAAP,CAAa,KAA3B,EAAkC,OAAO,IAAzC,CAAJ,EAAoD;AAClD;AACA,aAAK,eAAL;;AAEA,aAAK,MAAL;AACD;AACD,WAAK,QAAL,GAAgB,IAAhB;AACA,YAAM;AACJ,iBAAS,OAAO,IADZ;AAEJ,qBAAa,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAFT;AAGJ,cAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAHF;AAIJ,eAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAJH;AAKJ,cAAM,gBAAM;AAAE,gBAAK,MAAL,GAAc,IAAd,QAA0B,MAAK,KAAL,GAAa,IAAb;AAA0B,SAL9D;AAMJ,cAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CANF;AAOJ,mBAAW,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAPP;AAQJ,oBAAY,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CARR;AASJ,oBAAY,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CATR;AAUJ,0BAAkB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAVd;AAWJ,wBAAgB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAXZ;AAYJ,sBAAc,wBAAY;AAAE,iBAAO,OAAO,YAAP,IAAuB,KAA9B;AAAsC,SAZ9D;AAaJ,sBAAc,wBAAY;AAAE,iBAAO,OAAO,SAAd;AAAyB,SAbjD;AAcJ,kBAAU,oBAAY;AAAE,iBAAO,OAAO,KAAd;AAAsB,SAd1C;AAeJ,wBAAgB,0BAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,WAApB;AAAkC,SAf5D;AAgBJ,mBAAW,qBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,MAApB;AAA6B,SAhBlD;AAiBJ,iBAAS,mBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,KAApB;AAA4B,SAjB/C;AAkBJ,iBAAS,mBAAY;AAAE,iBAAO,cAAE,QAAF,CAAW,OAAO,SAAlB,EAA6B,OAAO,OAAP,CAAe,KAA5C,CAAP;AAA4D,SAlB/E;AAmBJ,mBAAW,qBAAY;AAAE,iBAAO,cAAE,QAAF,CAAW,OAAO,SAAlB,EAA6B,OAAO,OAAP,CAAe,OAA5C,CAAP;AAA8D,SAnBnF;AAoBJ,kBAAU,oBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,MAApB;AAA6B,SApBjD;AAqBJ,YAAI,YAAU,KAAV,EAAiB,QAAjB,EAA2B;AAAE,2BAAM,OAAN,CAAc,OAAO,SAArB,EAAgC,KAAhC,EAAuC,QAAvC,EAAkD,OAAO,IAAP;AAAc;AArB7F,OAAN;AAuBA,aAAO,GAAP;AACD;;;6BACQ;AAAA;;AACP,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFO,UAGC,KAHD,GAGsB,MAHtB,CAGC,KAHD;AAAA,UAGQ,SAHR,GAGsB,MAHtB,CAGQ,SAHR;;AAKP;;AACA,aAAO,UAAP,CAAkB,YAAM;AACtB,eAAK,aAAL,CAAmB,KAAnB,EAA0B,OAA1B;AACD,OAFD,EAEG,CAFH;;AAIA;AACA,oBAAE,WAAF,CAAc,KAAd,EAAqB,sBAAS,OAAT,CAAiB,KAAtC,EAA6C,IAA7C;;AAEA;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,OAAO,OAAP,CAAe,KAAxC,EAA+C,IAA/C;;AAEA;AACA,UAAI,OAAO,QAAX,EAAqB;AACnB,aAAK,KAAL;AACD;AACF;;;kCACa;AACZ,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,WAAW,KAAK,SAAtB;AAHY,UAIJ,KAJI,GAIM,MAJN,CAIJ,KAJI;;;AAMZ,UAAI,CAAC,KAAL,EAAY;AACV,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,yBAAhB;AACA;AACD;AATW,UAUJ,QAVI,GAUkB,MAVlB,CAUJ,QAVI;AAAA,UAUM,OAVN,GAUkB,MAVlB,CAUM,OAVN;AAAA,UAWJ,SAXI,GAWoC,MAXpC,CAWJ,SAXI;AAAA,UAWO,IAXP,GAWoC,MAXpC,CAWO,IAXP;AAAA,UAWa,OAXb,GAWoC,MAXpC,CAWa,OAXb;AAAA,UAWsB,SAXtB,GAWoC,MAXpC,CAWsB,SAXtB;AAAA,UAYJ,OAZI,GAY0D,OAZ1D,CAYJ,OAZI;AAAA,UAYK,KAZL,GAY0D,OAZ1D,CAYK,KAZL;AAAA,UAYY,QAZZ,GAY0D,OAZ1D,CAYY,QAZZ;AAAA,UAYsB,OAZtB,GAY0D,OAZ1D,CAYsB,OAZtB;AAAA,UAY+B,QAZ/B,GAY0D,OAZ1D,CAY+B,QAZ/B;AAAA,UAYyC,YAZzC,GAY0D,OAZ1D,CAYyC,YAZzC;AAAA,UAaJ,KAbI,GAamC,OAbnC,CAaJ,KAbI;AAAA,UAaG,QAbH,GAamC,OAbnC,CAaG,QAbH;AAAA,UAaa,OAbb,GAamC,OAbnC,CAaa,OAbb;AAAA,UAasB,QAbtB,GAamC,OAbnC,CAasB,QAbtB;;AAcZ,UAAI,UAAU,IAAd,EAAoB;AAClB,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,IAAR,CAAa,OAAb,CAAqB,KAArB,EAA4B,IAA5B,CAAzB,EAA4D,IAA5D;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,OAAzB,EAAkC,QAAlC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,KAAzB,EAAgC,KAAhC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAzB,EAAmC,QAAnC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,OAAzB,EAAkC,OAAlC;;AAEA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAzB,EAAmC,QAAnC;AACA,YAAI,OAAO,IAAP,KAAgB,OAApB,EAA6B;AAC3B,cAAM,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAhB;AACA,kBAAQ,YAAR,CAAqB,OAArB,EAA8B,YAA9B;AACA,wBAAE,IAAF,CAAO,OAAO,KAAd,EAAqB,OAArB;AACA;AACA,iBAAO,cAAP,GAAwB,OAAxB;AACD;AACF;AACF;;;sCACiB;AAChB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;AAHgB,UAIR,KAJQ,GAIE,MAJF,CAIR,KAJQ;;AAKhB,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,OAAO,SAAP,CAAiB,gBAAjB,CAAkC,QAAlC,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA,UAAI,CAAC,OAAO,SAAP,CAAiB,IAAtB,EAA4B;AAC1B,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,oBAAhB,EAAsC,OAAO,IAA7C;;AAEA;AACA,sBAAE,aAAF,CAAgB,YAAY,OAAO,SAAP,CAAiB,QAAjB,CAA0B,OAAtC,CAAhB;AACA;AACA,aAAK,qBAAL,CAA2B,IAA3B;AACA;AACA;AACD;AACD,UAAM,kBAAkB,CAAC,aAAa,OAAO,SAAP,CAAiB,QAAjB,CAA0B,OAAvC,EAAgD,MAAzE;AACA,UAAI,eAAJ,EAAqB;AACnB;AACA,aAAK,eAAL;AACD;AACD,UAAI,CAAC,KAAK,aAAL,EAAL,EAA2B;AACzB;AACD;AACD,UAAI,eAAJ,EAAqB;AACnB,aAAK,iBAAL;AACD;AACD,WAAK,eAAL;AACA,WAAK,qBAAL,CAA2B,KAA3B;AACA,WAAK,WAAL;AACA;AACA,WAAK,UAAL;;AAEA,WAAK,aAAL;;AAEA,WAAK,aAAL;AACD;;;sCACiB;AAChB,UAAM,SAAS,KAAK,OAApB;AADgB,UAER,KAFQ,GAEE,MAFF,CAER,KAFQ;AAGhB;;AACA,uBAAM,OAAN,CAAc,KAAd,EAAqB,oBAArB,EAA2C,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA3C;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,+BAArB,EAAsD,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAtD;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,kBAArB,EAAyC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAzC;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,kBAArB,EAAyC,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAzC;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,wBAArB,EAA+C,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAA/C;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,cAArB,EAAqC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArC;AAED;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;AAHc,UAIN,KAJM,GAI2C,MAJ3C,CAIN,KAJM;AAAA,UAIC,SAJD,GAI2C,MAJ3C,CAIC,SAJD;AAAA,UAIY,OAJZ,GAI2C,MAJ3C,CAIY,OAJZ;AAAA,UAIqB,SAJrB,GAI2C,MAJ3C,CAIqB,SAJrB;AAAA,UAIgC,MAJhC,GAI2C,MAJ3C,CAIgC,MAJhC;AAAA,UAKN,KALM,GAKI,KALJ,CAKN,KALM;AAAA,UAMN,OANM,GAMM,MANN,CAMN,OANM;AAOd;;AACA,UAAI,WAAW,QAAQ,CAAR,GAAa,MAAM,MAAN,GAAe,OAAO,SAAlD;;AAEA;AACA,UAAI,UAAU,IAAd,EAAoB;AAClB,YAAI,OAAO,KAAX,EAAkB;AAChB,iBAAO,KAAP,CAAa,KAAb,GAAqB,QAArB;AACD;AACD,YAAI,OAAO,OAAX,EAAoB;AAClB,iBAAO,OAAP,CAAe,KAAf,GAAuB,QAAvB;AACD;AACF;;AAED;AACA,kCAAc,EAAE,QAAQ,QAAV,EAAd,EAAoC,MAApC,EAA4C,OAA5C;;AAEA;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,KAAjC,EAAyC,aAAa,CAAtD;;AAEA;AACA,UAAI,UAAU,IAAV,IAAkB,QAAQ,IAA9B,EAAoC;AAClC,aAAK,YAAL,CAAkB,QAAQ,IAA1B,EAAiC,WAAW,CAA5C;AACD;AACF;;;kCACa,K,EAAO;AAAA;;AACnB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAEA,UAAM,UAAW,MAAM,IAAN,KAAe,SAAhC;AALmB,UAMX,SANW,GAMG,MANH,CAMX,SANW;AAAA,UAOX,OAPW,GAOC,MAPD,CAOX,OAPW;AAQnB;;AACA,mBAAa,OAAO,OAApB;;AAEA;AACA,aAAO,OAAP,GAAiB,WAAW,YAAM;AAChC;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,OAA1C;;AAEA;AACA,eAAK,eAAL,CAAqB,OAArB;AACD,OANgB,EAMb,UAAU,GAAV,GAAgB,CANH,CAAjB;AAOD;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFc,UAIN,KAJM,GAIe,MAJf,CAIN,KAJM;AAAA,UAIC,SAJD,GAIe,MAJf,CAIC,SAJD;AAAA,UAKN,OALM,GAKM,MALN,CAKN,OALM;AAAA,UAMN,MANM,GAMK,KANL,CAMN,MANM;;AAOd,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,CAAC,MAA3C;;AAEA,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,MAA1C;;AAEA,WAAK,eAAL,CAAqB,MAArB;AACD;;;4BACO;AACN,UAAM,SAAS,KAAK,OAApB;AADM,UAEE,KAFF,GAEY,MAFZ,CAEE,KAFF;;AAGN,UAAI,UAAU,KAAd,EAAqB;AACnB,cAAM,IAAN;AACD;AACF;;;6BACQ;AACP,UAAM,SAAS,KAAK,OAApB;AADO,UAEC,KAFD,GAEW,MAFX,CAEC,KAFD;;AAGP,UAAI,WAAW,KAAf,EAAsB;AACpB,cAAM,KAAN;AACD;AACF;;;gCACW,M,EAAQ;AAClB,UAAM,SAAS,KAAK,OAApB;AADkB,UAEV,KAFU,GAEA,MAFA,CAEV,KAFU;AAGlB;;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,MAAX,CAAL,EAAyB;AACvB,iBAAS,MAAM,MAAf;AACD;;AAED,UAAI,MAAJ,EAAY;AACV,aAAK,KAAL;AACD,OAFD,MAEO;AACL,aAAK,MAAL;AACD;AACD,aAAO,MAAP;AACD;;;mCACc;AACb,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFa,UAGL,KAHK,GAGK,MAHL,CAGL,KAHK;;AAKb;;AACA,UAAI,WAAW,SAAS,OAAO,QAAhB,CAAf;;;AAEE;AACA,sBAAgB,CAHlB;;AAKA;AACA,UAAI,MAAM,QAAN,KAAmB,IAAnB,IAA2B,CAAC,MAAM,MAAM,QAAZ,CAAhC,EAAuD;AACrD,wBAAgB,MAAM,QAAtB;AACD;;AAED;AACA,aAAQ,MAAM,QAAN,IAAkB,aAAlB,GAAkC,QAA1C;AACD;;;0BACK,K,EAAO;AACX,UAAM,SAAS,KAAK,OAApB;AADW,UAEH,KAFG,GAEO,MAFP,CAEH,KAFG;;AAGX,UAAI,aAAa,CAAjB;AAAA,UACE,SAAS,MAAM,MADjB;AAAA,UAEE,WAAW,KAAK,YAAL,EAFb;;AAIA,UAAI,SAAG,MAAH,CAAU,KAAV,CAAJ,EAAsB;AACpB,qBAAa,KAAb;AACD,OAFD,MAEO,IAAI,SAAG,MAAH,CAAU,KAAV,KAAoB,eAAM,OAAN,CAAc,CAAC,OAAD,EAAU,QAAV,CAAd,EAAmC,MAAM,IAAzC,CAAxB,EAAwE;AAC7E;AACA;AACA,qBAAe,MAAM,MAAN,CAAa,KAAb,GAAqB,MAAM,MAAN,CAAa,GAAnC,GAA0C,QAAxD;AACD;AACD,UAAI,aAAa,CAAjB,EAAoB;AAClB,qBAAa,CAAb;AACD,OAFD,MAEO,IAAI,aAAa,QAAjB,EAA2B;AAChC,qBAAa,QAAb;AACD;AACD,WAAK,kBAAL,CAAwB,UAAxB;AACA,UAAI;AACF,cAAM,WAAN,GAAoB,WAAW,OAAX,CAAmB,CAAnB,CAApB;AACD,OAFD,CAGA,OAAO,CAAP,EAAU,CAAG;AACd;;;+BACU,M,EAAQ;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKC,MALD,CAKT,KALS;;AAMjB,UAAM,MAAM,OAAO,SAAnB;AAAA,UACE,MAAM,OAAO,SADf;;AAGA;AACA,UAAI,SAAG,SAAH,CAAa,MAAb,CAAJ,EAA0B;AACxB,iBAAS,QAAQ,MAAjB;AACD;;AAED;AACA,UAAI,WAAW,IAAX,IAAmB,MAAM,MAAN,CAAvB,EAAsC;AACpC,iBAAS,OAAO,MAAhB;AACD;;AAED;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,iBAAS,GAAT;AACD;AACD;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,iBAAS,GAAT;AACD;AACD;AACA,YAAM,MAAN,GAAe,WAAW,SAAS,GAApB,CAAf;;AAEA;AACA,UAAI,OAAO,MAAP,CAAc,OAAlB,EAA2B;AACzB,eAAO,MAAP,CAAc,OAAd,CAAsB,KAAtB,GAA8B,MAA9B;AACD;AACD;AACA,UAAI,WAAW,CAAf,EAAkB;AAChB,cAAM,KAAN,GAAc,IAAd;AACD,OAFD,MAEO,IAAI,MAAM,KAAN,IAAe,SAAS,CAA5B,EAA+B;AACpC,aAAK,WAAL;AACD;AACF;;;gCACW,K,EAAO;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKC,MALD,CAKT,KALS;;AAMjB,UAAI,CAAC,SAAG,OAAH,CAAW,KAAX,CAAL,EAAwB;AACtB,gBAAQ,CAAC,MAAM,KAAf;AACD;;AAED;AACA,WAAK,YAAL,CAAkB,OAAO,OAAP,CAAe,IAAjC,EAAuC,KAAvC;;AAEA;AACA,YAAM,KAAN,GAAc,KAAd;;AAEA;AACA,UAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAK,UAAL,CAAgB,OAAO,MAAvB;AACD;AAEF;;;iCACY,M,EAAQ,K,EAAO;AAC1B;AACA,UAAI,CAAC,MAAL,EAAa;AACX;AACD;AACD;AACA,cAAS,SAAG,OAAH,CAAW,KAAX,IAAoB,KAApB,GAA4B,CAAC,OAAO,YAAP,CAAoB,cAApB,CAAtC;;AAEA;AACA,aAAO,YAAP,CAAoB,cAApB,EAAoC,KAApC;AACA,aAAO,KAAP;AACD;;;gCACW,K,EAAO;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFiB,UAGT,KAHS,GAGC,MAHD,CAGT,KAHS;AAIjB;;AACA,WAAK,kBAAL,CAAwB,MAAM,WAA9B,EAA2C,OAAO,WAAlD;;AAEA;AACA,UAAI,SAAS,MAAM,IAAN,KAAe,YAAxB,IAAwC,MAAM,OAAlD,EAA2D;AACzD;AACD;AACD;AACA,WAAK,eAAL,CAAqB,KAArB;AACD;;;oCACe,K,EAAO;AAAA;;AACrB,UAAM,SAAS,KAAK,OAApB;AADqB,UAEb,KAFa,GAEqC,MAFrC,CAEb,KAFa;AAAA,UAEN,QAFM,GAEqC,MAFrC,CAEN,QAFM;AAAA,UAEI,QAFJ,GAEqC,MAFrC,CAEI,QAFJ;AAAA,UAEc,OAFd,GAEqC,MAFrC,CAEc,OAFd;AAAA,UAEuB,SAFvB,GAEqC,MAFrC,CAEuB,SAFvB;;AAGrB,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED,UAAI,aAAa,SAAS,MAA1B;AAAA,UACE,UAAU,CADZ;AAAA,UAEE,WAAW,KAAK,YAAL,EAFb;AAGA,UAAI,KAAJ,EAAW;AACT,gBAAQ,MAAM,IAAd;AACE,eAAK,YAAL;AACA,eAAK,SAAL;AACE,gBAAI,SAAS,OAAb,EAAsB;AACpB;AACD;;AAED,sBAAU,KAAK,cAAL,CAAoB,MAAM,WAA1B,EAAuC,QAAvC,CAAV;;AAEA;AACA,gBAAI,MAAM,IAAN,KAAe,YAAf,IAA+B,QAAQ,IAA3C,EAAiD;AAC/C,sBAAQ,IAAR,CAAa,KAAb,GAAqB,OAArB;AACD;;AAED;AACF;AACA,eAAK,SAAL;AACA,eAAK,UAAL;AACE,yBAAa,SAAS,MAAtB;AACA,sBAAW,YAAM;AACf,kBAAI,WAAW,MAAM,QAArB;;AAEA,kBAAI,YAAY,SAAS,MAAzB,EAAiC;AAC/B;AACA,uBAAO,OAAK,cAAL,CAAoB,SAAS,GAAT,CAAa,CAAb,CAApB,EAAqC,QAArC,CAAP;AACD;AACD,qBAAO,CAAP;AACD,aARS,EAAV;AASA;AA5BJ;AA8BD;AACD,WAAK,YAAL,CAAkB,UAAlB,EAA8B,OAA9B;AACD;;;iCACY,Q,EAAU,K,EAAO;AAC5B,UAAM,SAAS,KAAK,OAApB;AAD4B,UAEpB,SAFoB,GAEN,MAFM,CAEpB,SAFoB;;AAG5B,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,SAAG,SAAH,CAAa,KAAb,CAAJ,EAAyB;AACvB,gBAAQ,CAAR;AACD;AACD;AACA,UAAI,SAAG,SAAH,CAAa,QAAb,CAAJ,EAA4B;AAC1B,YAAI,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,MAAvC,EAA+C;AAC7C,qBAAW,OAAO,QAAP,CAAgB,MAA3B;AACD,SAFD,MAEO;AACL;AACD;AACF;;AAED;AACA,UAAI,SAAG,WAAH,CAAe,QAAf,CAAJ,EAA8B;AAC5B,iBAAS,KAAT,GAAiB,KAAjB;AACD,OAFD,MAEO,IAAI,QAAJ,EAAc;AACnB;AACA,YAAI,SAAS,GAAb,EAAkB;AAChB,mBAAS,GAAT,CAAa,KAAb,GAAqB,KAArB;AACD;AACD,YAAI,SAAS,IAAb,EAAmB;AACjB,mBAAS,IAAT,CAAc,SAAd,GAA0B,KAA1B;AACD;AACF;AACF;;;uCACkB,I,EAAM,O,EAAS;AAChC,UAAM,SAAS,KAAK,OAApB;;AAEA;AACA,UAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED;AACA,UAAI,MAAM,IAAN,CAAJ,EAAiB;AACf,eAAO,CAAP;AACD;;AAED,aAAO,IAAP,GAAc,SAAS,OAAO,EAAhB,CAAd;AACA,aAAO,IAAP,GAAc,SAAU,OAAO,EAAR,GAAc,EAAvB,CAAd;AACA,aAAO,KAAP,GAAe,SAAW,OAAO,EAAR,GAAc,EAAf,GAAqB,EAA9B,CAAf;;AAEA;AACA,UAAI,eAAgB,SAAW,KAAK,YAAL,KAAsB,EAAvB,GAA6B,EAA9B,GAAoC,EAA7C,IAAmD,CAAvE;;AAEA;AACA,aAAO,IAAP,GAAc,CAAC,MAAM,OAAO,IAAd,EAAoB,KAApB,CAA0B,CAAC,CAA3B,CAAd;AACA,aAAO,IAAP,GAAc,CAAC,MAAM,OAAO,IAAd,EAAoB,KAApB,CAA0B,CAAC,CAA3B,CAAd;;AAEA;AACA,cAAQ,SAAR,GAAoB,CAAC,eAAe,OAAO,KAAP,GAAe,GAA9B,GAAoC,EAArC,IAA2C,OAAO,IAAlD,GAAyD,GAAzD,GAA+D,OAAO,IAA1F;AACD;;;uCACkB,I,EAAM;AACvB;AACA,UAAI,CAAC,SAAG,MAAH,CAAU,IAAV,CAAL,EAAsB;AACpB,eAAO,CAAP;AACD;AACD,UAAM,SAAS,KAAK,OAApB;;AALuB,UAOf,QAPe,GAOO,MAPP,CAOf,QAPe;AAAA,UAOL,OAPK,GAOO,MAPP,CAOL,OAPK;;AAQvB,UAAI,WAAW,KAAK,YAAL,EAAf;AAAA,UACE,QAAQ,KAAK,cAAL,CAAoB,IAApB,EAA0B,QAA1B,CADV;;AAGA;AACA,UAAI,YAAY,SAAS,MAAzB,EAAiC;AAC/B,iBAAS,MAAT,CAAgB,KAAhB,GAAwB,KAAxB;AACD;;AAED;AACA,UAAI,WAAW,QAAQ,IAAvB,EAA6B;AAC3B,gBAAQ,IAAR,CAAa,KAAb,GAAqB,KAArB;AACD;AACF;;;uCACkB;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKmC,MALnC,CAKT,KALS;AAAA,UAKF,SALE,GAKmC,MALnC,CAKF,SALE;AAAA,UAKS,QALT,GAKmC,MALnC,CAKS,QALT;AAAA,UAKmB,WALnB,GAKmC,MALnC,CAKmB,WALnB;AAAA,UAMT,eANS,GAMW,MANX,CAMT,eANS;;AAOjB,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,aAAa,KAAK,YAAL,MAAuB,CAAxC;;AAEA;AACA,UAAI,CAAC,QAAD,IAAa,eAAb,IAAgC,MAAM,MAA1C,EAAkD;AAChD,aAAK,kBAAL,CAAwB,UAAxB,EAAoC,WAApC;AACD;;AAED;AACA,UAAI,QAAJ,EAAc;AACZ,aAAK,kBAAL,CAAwB,UAAxB,EAAoC,QAApC;AACD;AAEF;;;wCACmB;AAAA;;AAClB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,aAAa,KAAK,WAAxB;;AAHkB,UAKV,OALU,GAKwC,MALxC,CAKV,OALU;AAAA,UAKD,OALC,GAKwC,MALxC,CAKD,OALC;AAAA,UAKQ,MALR,GAKwC,MALxC,CAKQ,MALR;AAAA,UAKgB,SALhB,GAKwC,MALxC,CAKgB,SALhB;AAAA,UAK2B,QAL3B,GAKwC,MALxC,CAK2B,QAL3B;AAAA,UAMV,OANU,GAM2B,MAN3B,CAMV,OANU;AAAA,UAMD,SANC,GAM2B,MAN3B,CAMD,SANC;AAAA,UAMU,YANV,GAM2B,MAN3B,CAMU,YANV;;AAOlB,UAAM,aAAc,QAAQ,IAAR,GAAe,QAAf,GAA0B,OAA9C;AACA,UAAM,aAAa,SAAb,UAAa,GAAM;AACvB,YAAM,OAAO,OAAK,WAAL,EAAb;AACA,YAAI,UAAU,QAAQ,OAAO,MAAP,GAAgB,OAAxB,CAAd;AAAA,YACE,SAAS,QAAQ,OAAO,OAAP,GAAiB,MAAzB,CADX;;AAGA;AACA,YAAI,UAAU,OAAO,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,mBAAS,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAT;AACD,SAFD,MAEO;AACL,mBAAS,OAAO,CAAP,CAAT;AACD;AACD,YAAI,MAAJ,EAAY;AACV,cAAM,cAAc,cAAE,QAAF,CAAW,OAAX,EAAoB,QAAQ,QAA5B,CAApB;;AAEA,qBAAW,YAAY;AACrB,mBAAO,KAAP;AACA,gBAAI,WAAJ,EAAiB;AACf,4BAAE,WAAF,CAAc,OAAd,EAAuB,QAAQ,QAA/B,EAAyC,KAAzC;AACA,4BAAE,WAAF,CAAc,MAAd,EAAsB,QAAQ,QAA9B,EAAwC,IAAxC;AACD;AACF,WAND,EAMG,GANH;AAOD;AACF,OAtBD;AAuBA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,OAAlC,EAA2C,UAAU,IAArD,EAA2D,UAA3D;AACA;AACA,uBAAM,aAAN,CAAoB,QAAQ,KAA5B,EAAmC,OAAnC,EAA4C,UAAU,KAAtD,EAA6D,UAA7D;AACA;AACA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,UAAlC,EAA8C,UAAU,IAAxD,EAA8D,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAA9D;;AAEA,uBAAM,aAAN,CAAoB,OAAO,KAA3B,EAAkC,UAAlC,EAA8C,UAAU,MAAxD,EAAgE,YAAM;AACpE,eAAK,UAAL,CAAgB,OAAO,KAAP,CAAa,KAA7B;AACD,OAFD;AAGA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,OAAlC,EAA2C,UAAU,IAArD,EAA2D,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA3D;;AAEA,uBAAM,aAAN,CAAoB,QAAQ,UAA5B,EAAwC,OAAxC,EAAiD,UAAU,UAA3D,EAAuE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAvE;;AAEA;AACA,UAAI,WAAW,kBAAf,EAAmC;AACjC,yBAAM,OAAN,CAAc,QAAd,EAAwB,WAAW,mBAAnC,EAAwD,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAxD;AACD;AACD,UAAI,YAAJ,EAAkB;AAChB;AACA,yBAAM,OAAN,CAAc,SAAd,EAAyB,2FAAzB,EAAsH,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAtH;;AAEA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,uBAAxB,EAAiD,UAAC,KAAD,EAAW;AAC1D,iBAAO,QAAP,CAAgB,KAAhB,GAAwB,MAAM,IAAN,KAAe,YAAvC;AACD,SAFD;;AAIA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,mDAAxB,EAA6E,UAAC,KAAD,EAAW;AACtF,iBAAO,QAAP,CAAgB,OAAhB,GAA0B,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,YAAd,CAAd,EAA2C,MAAM,IAAjD,CAA1B;AACD,SAFD;AAGA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,YAAxB,EAAsC,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAtC,EAAuE,IAAvE;AACD;AACF;;;sCACiB;AAChB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFgB,UAIV,IAJU,GAIU,MAJV,CAIV,IAJU;AAAA,UAIJ,SAJI,GAIU,MAJV,CAIJ,SAJI;AAAA,UAMR,SANQ,GAMM,MANN,CAMR,SANQ;;AAOhB,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,6BAAc,MAAd,CAAP;AACD;AACD,UAAM,SAAS,KAAK,KAAL,CAAW,KAAK,MAAL,KAAiB,OAA5B,CAAf;AACA,gBAAU,YAAV,CAAuB,IAAvB,YAAqC,MAArC;AACA,aAAO,eAAM,UAAN,CAAiB,IAAjB,EAAuB,MAAvB,EAA+B,MAA/B,CAAP;AACA,UAAI,eAAJ;AACA,UAAI,SAAG,MAAH,CAAU,UAAU,QAAV,CAAmB,SAA7B,CAAJ,EAA6C;AAC3C,iBAAS,SAAS,aAAT,CAAuB,UAAU,QAAV,CAAmB,SAA1C,CAAT;AACD;AACD;AACA,UAAI,CAAC,SAAG,WAAH,CAAe,MAAf,CAAL,EAA6B;AAC3B,iBAAS,SAAT;AACD;AACD,aAAO,kBAAP,CAA0B,WAA1B,EAAuC,IAAvC;AACD;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFc,UAIN,SAJM,GAIQ,MAJR,CAIN,SAJM;AAAA,UAKN,SALM,GAKQ,MALR,CAKN,SALM;AAAA,UAMN,QANM,GAMmE,SANnE,CAMN,QANM;AAAA,UAMI,OANJ,GAMmE,SANnE,CAMI,OANJ;AAAA,UAMa,QANb,GAMmE,SANnE,CAMa,QANb;AAAA,UAMuB,MANvB,GAMmE,SANnE,CAMuB,MANvB;AAAA,UAM+B,QAN/B,GAMmE,SANnE,CAM+B,QAN/B;AAAA,UAMyC,WANzC,GAMmE,SANnE,CAMyC,WANzC;AAAA,UAMsD,QANtD,GAMmE,SANnE,CAMsD,QANtD;;AAOd,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,UAAU,gBAAV,CAA2B,QAA3B,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA,UAAI;AACF,eAAO,QAAP,GAAkB,YAAY,SAAS,OAArB,CAAlB;;AAEA;AACA,eAAO,OAAP,GAAiB,EAAjB;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,YAAY,QAAQ,IAApB,CAAtB;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,aAAa,QAAQ,IAArB,CAAtB;AACA,eAAO,OAAP,CAAe,KAAf,GAAuB,YAAY,QAAQ,KAApB,CAAvB;AACA,eAAO,OAAP,CAAe,UAAf,GAA4B,YAAY,QAAQ,UAApB,CAA5B;;AAEA;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,YAAY,QAAQ,IAApB,CAAtB;;AAEA;AACA,eAAO,QAAP,GAAkB,EAAlB;AACA,eAAO,QAAP,CAAgB,SAAhB,GAA4B,YAAY,SAAS,SAArB,CAA5B;;AAEA;AACA,eAAO,QAAP,CAAgB,MAAhB,GAAyB,EAAzB;AACA,eAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,GAA6B,YAAY,SAAS,MAArB,CAA7B;AACA,eAAO,QAAP,CAAgB,MAAhB,CAAuB,IAAvB,GAA8B,OAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,IAA8B,OAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,oBAA3B,CAAgD,MAAhD,EAAwD,CAAxD,CAA5D;;AAEA;AACA,eAAO,QAAP,CAAgB,MAAhB,GAAyB,YAAY,SAAS,MAArB,CAAzB;;AAEA;AACA,eAAO,MAAP,GAAgB,EAAhB;AACA,eAAO,MAAP,CAAc,KAAd,GAAsB,YAAY,OAAO,KAAnB,CAAtB;AACA,eAAO,MAAP,CAAc,OAAd,GAAwB,YAAY,OAAO,OAAnB,CAAxB;;AAEA;AACA,eAAO,QAAP,GAAkB,YAAY,QAAZ,CAAlB;AACA,eAAO,WAAP,GAAqB,YAAY,WAAZ,CAArB;AACA,eAAO,QAAP,GAAkB,aAAa,QAAb,CAAlB;;AAEA,eAAO,IAAP;AACD,OApCD,CAqCA,OAAO,CAAP,EAAU;AACR,aAAK,KAAL,CAAW,0DAAX;AACA;AACA,aAAK,qBAAL,CAA2B,IAA3B;;AAEA,eAAO,KAAP;AACD;AACF;;;0CACqB,M,EAAQ;AAC5B,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAF4B,UAGpB,KAHoB,GAGV,MAHU,CAGpB,KAHoB;;AAI5B,UAAI,UAAU,eAAM,OAAN,CAAc,OAAO,KAAP,CAAa,KAA3B,EAAkC,OAAO,IAAzC,CAAd,EAA8D;AAC5D,cAAM,YAAN,CAAmB,UAAnB,EAA+B,EAA/B;AACD,OAFD,MAEO;AACL,cAAM,eAAN,CAAsB,UAAtB;AACD;AACF;;;sCACiB,K,EAAO;AACvB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,aAAa,KAAK,WAAxB;;AAJuB,UAMf,SANe,GAMQ,MANR,CAMf,SANe;AAAA,UAMJ,OANI,GAMQ,MANR,CAMJ,OANI;;AAOvB,UAAI,gBAAgB,WAAW,kBAA/B;;AAEA,UAAI,aAAJ,EAAmB;AACjB;AACA,YAAI,SAAS,MAAM,IAAN,KAAe,WAAW,mBAAvC,EAA4D;AAC1D,iBAAO,YAAP,GAAsB,WAAW,YAAX,CAAwB,SAAxB,CAAtB;AACD,SAFD,MAEO;AACL;AACA,cAAI,CAAC,WAAW,YAAX,CAAwB,SAAxB,CAAL,EAAyC;AACvC;AACA,iBAAK,mBAAL;;AAEA;AACA,uBAAW,iBAAX,CAA6B,SAA7B;AACD,WAND,MAMO;AACL;AACA,uBAAW,gBAAX;AACD;;AAED;AACA,iBAAO,YAAP,GAAsB,WAAW,YAAX,CAAwB,SAAxB,CAAtB;;AAEA;AACD;AACF,OAtBD,MAsBO;AACL;AACA,eAAO,YAAP,GAAsB,CAAC,OAAO,YAA9B;;AAEA;AACA,iBAAS,IAAT,CAAc,KAAd,CAAoB,QAApB,GAA+B,OAAO,YAAP,GAAsB,QAAtB,GAAiC,EAAhE;AACD;;AAED;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,OAAO,OAAP,CAAe,UAAf,CAA0B,MAAnD,EAA2D,OAAO,YAAlE;;AAEA;AACA,WAAK,UAAL,CAAgB,OAAO,YAAvB;;AAEA;AACA,UAAI,WAAW,QAAQ,UAAvB,EAAmC;AACjC,aAAK,YAAL,CAAkB,QAAQ,UAA1B,EAAsC,OAAO,YAA7C;AACD;;AAED;AACA,WAAK,aAAL,CAAmB,SAAnB,EAA8B,OAAO,YAAP,GAAsB,iBAAtB,GAA0C,gBAAxE,EAA0F,IAA1F;;AAEA;AACA,UAAI,CAAC,OAAO,YAAR,IAAwB,aAA5B,EAA2C;AACzC,aAAK,sBAAL;AACD;AACF;;;0CACqB;AACpB,eAAS;AACP,WAAG,OAAO,WAAP,IAAsB,CADlB;AAEP,WAAG,OAAO,WAAP,IAAsB;AAFlB,OAAT;AAID;;;6CACwB;AACvB,aAAO,QAAP,CAAgB,OAAO,CAAvB,EAA0B,OAAO,CAAjC;AACD;;;oCACe,M,EAAQ;AACtB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAHsB,UAKd,YALc,GAKY,MALZ,CAKd,YALc;AAAA,UAKA,OALA,GAKY,MALZ,CAKA,OALA;AAAA,UAMd,IANc,GAMgC,MANhC,CAMd,IANc;AAAA,UAMR,SANQ,GAMgC,MANhC,CAMR,SANQ;AAAA,UAMG,OANH,GAMgC,MANhC,CAMG,OANH;AAAA,UAMY,QANZ,GAMgC,MANhC,CAMY,QANZ;AAAA,UAMsB,KANtB,GAMgC,MANhC,CAMsB,KANtB;AAAA,UAOd,MAPc,GAOH,KAPG,CAOd,MAPc;AAQtB;;AACA,UAAI,CAAC,YAAD,IAAiB,SAAS,OAA9B,EAAuC;AACrC;AACD;;AAED,UAAI,QAAQ,CAAZ;AAAA,UACE,oBAAoB,KADtB;AAAA,UAEE,OAAO,MAFT;AAAA,UAGE,UAAU,cAAE,QAAF,CAAW,SAAX,EAAsB,QAAQ,OAA9B,CAHZ;;AAKA;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,MAAX,CAAL,EAAyB;AACvB,YAAI,UAAU,OAAO,IAArB,EAA2B;AACzB;AACA,8BAAqB,OAAO,IAAP,KAAgB,iBAArC;;AAEA;AACA,iBAAO,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,YAAd,EAA4B,YAA5B,EAA0C,OAA1C,CAAd,EAAkE,OAAO,IAAzE,CAAP;;AAEA;AACA,cAAI,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,WAAd,CAAd,EAA0C,OAAO,IAAjD,CAAJ,EAA4D;AAC1D,oBAAQ,IAAR;AACD;;AAED;AACA,cAAI,OAAO,IAAP,KAAgB,OAApB,EAA6B;AAC3B,oBAAQ,IAAR;AACD;AACF,SAhBD,MAgBO;AACL,iBAAO,cAAE,QAAF,CAAW,SAAX,EAAsB,QAAQ,YAA9B,CAAP;AACD;AACF;;AAED;AACA,aAAO,YAAP,CAAoB,OAAO,KAA3B;;AAEA;AACA,UAAI,QAAQ,MAAR,IAAkB,OAAtB,EAA+B;AAC7B,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,YAAjC,EAA+C,KAA/C;;AAEA;AACA,YAAI,UAAU,OAAd,EAAuB;AACrB;AACD;;AAED;AACA,YAAI,QAAQ,OAAZ,EAAqB;AACnB,kBAAQ,IAAR;AACD;AACF;;AAED;AACA;AACA,UAAI,CAAC,IAAD,IAAS,CAAC,MAAd,EAAsB;AACpB,eAAO,KAAP,GAAe,OAAO,UAAP,CAAkB,YAAM;AACrC;AACA,cAAI,CAAC,SAAS,OAAT,IAAoB,SAAS,KAA9B,KAAwC,CAAC,iBAA7C,EAAgE;AAC9D;AACD;;AAED,wBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,YAAjC,EAA+C,IAA/C;AACD,SAPc,EAOZ,KAPY,CAAf;AAQD;AACF;;;kCACa,O,EAAS,I,EAAM,O,EAAS,U,EAAY;AAChD,uBAAM,WAAN,CAAkB,OAAlB,EAA2B,IAA3B,EAAiC,OAAjC,EAA0C,eAAM,MAAN,CAAa,EAAb,EAAiB,UAAjB,EAA6B;AACrE,eAAO;AAD8D,OAA7B,CAA1C;AAGD;;;mCACc,O,EAAS,G,EAAK;AAC3B,UAAI,YAAY,CAAZ,IAAiB,QAAQ,CAAzB,IAA8B,MAAM,OAAN,CAA9B,IAAgD,MAAM,GAAN,CAApD,EAAgE;AAC9D,eAAO,CAAP;AACD;AACD,aAAO,CAAE,UAAU,GAAX,GAAkB,GAAnB,EAAwB,OAAxB,CAAgC,CAAhC,CAAP;AACD;;;uCACkB;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,oBAAE,WAAF,CAAc,OAAO,SAArB,EAAgC,OAAO,SAAP,CAAiB,SAAjB,CAA2B,OAA3B,CAAmC,GAAnC,EAAwC,EAAxC,CAAhC,EAA6E,OAAO,SAAP,CAAiB,IAA9F;AACD;;;;;;kBAEY,M;;;;;;;;;;AC13Bf;;;;;;AACO,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAA4B;AACvD,MAAI,yBAAmB,CAAC,OAAO,OAAP,CAAe,OAAvC,EAAgD;AAC9C;AACD;AACD,iBAAM,MAAN,CAAa,OAAb,EAAsB,KAAtB;AACA,SAAO,YAAP,CAAoB,OAApB,CAA4B,OAAO,OAAP,CAAe,GAA3C,EAAgD,KAAK,SAAL,CAAe,OAAf,CAAhD;AACD,CANM;AAOA,IAAM,sCAAe,SAAf,YAAe,CAAC,MAAD,EAAS,OAAT,EAAqB;AAC/C,MAAI,QAAQ,IAAZ;AACA,MAAI,yBAAmB,CAAC,OAAO,OAAP,CAAe,OAAvC,EAAgD;AAC9C;AACD;;AAED,SAAO,YAAP,CAAoB,UAApB,CAA+B,cAA/B;;AAEA;AACA,UAAQ,OAAO,YAAP,CAAoB,OAApB,CAA4B,OAAO,OAAP,CAAe,GAA3C,CAAR;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV;AACD,GAFD,MAEO,IAAI,gBAAgB,IAAhB,CAAqB,KAArB,CAAJ,EAAiC;AACtC,kBAAc,EAAE,QAAQ,WAAW,KAAX,CAAV,EAAd,EAA6C,MAA7C,EAAqD,OAArD;AACD,GAFM,MAEA;AACL;AACA,cAAU,KAAK,KAAL,CAAW,KAAX,CAAV;AACD;AACF,CAnBM;;;;;;;;;;;ACRP;;;;;;;;IAEM,G;;;;;;;yBACQ,Q,EAAU,O,EAAS;AAC7B;AACA,UAAI,CAAC,SAAS,MAAd,EAAsB;AACpB,mBAAW,CAAC,QAAD,CAAX;AACD;;AAED;AACA;AACA,WAAK,IAAI,IAAI,SAAS,MAAT,GAAkB,CAA/B,EAAkC,KAAK,CAAvC,EAA0C,GAA1C,EAA+C;AAC7C,YAAI,QAAS,IAAI,CAAL,GAAU,QAAQ,SAAR,CAAkB,IAAlB,CAAV,GAAoC,OAAhD;AACA,YAAI,UAAU,SAAS,CAAT,CAAd;;AAEA;AACA,YAAI,SAAS,QAAQ,UAArB;AACA,YAAI,UAAU,QAAQ,WAAtB;;AAEA;AACA;AACA,cAAM,WAAN,CAAkB,OAAlB;;AAEA;AACA;AACA;AACA,YAAI,OAAJ,EAAa;AACX,iBAAO,YAAP,CAAoB,KAApB,EAA2B,OAA3B;AACD,SAFD,MAEO;AACL,iBAAO,WAAP,CAAmB,KAAnB;AACD;AACD,eAAO,KAAP;AACD;AACF;;;iCACmB,Q,EAAU;AAC5B,aAAO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAP;AACD;;;kCACoB,I,EAAM,M,EAAQ,U,EAAY;AAC7C;AACA,UAAI,UAAU,SAAS,aAAT,CAAuB,IAAvB,CAAd;;AAEA;AACA,UAAI,aAAJ,CAAkB,OAAlB,EAA2B,UAA3B;;AAEA;AACA,UAAI,YAAJ,CAAiB,MAAjB,EAAyB,OAAzB;AACD;;;kCACoB,O,EAAS,U,EAAY;AACxC,WAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,gBAAQ,YAAR,CAAqB,GAArB,EAA2B,IAAI,OAAJ,CAAY,WAAW,GAAX,CAAZ,KAAgC,WAAW,GAAX,CAAjC,GAAoD,EAApD,GAAyD,WAAW,GAAX,CAAnF;AACD;AACF;;;iCACmB,M,EAAQ,O,EAAS;AACnC,aAAO,YAAP,CAAoB,OAApB,EAA6B,OAAO,UAApC;AACD;;;iCACmB,M,EAAQ;AAC1B,UAAI,SAAS,gBAAT,CAA0B,iBAAiB,MAAjB,GAA0B,IAApD,EAA0D,MAA9D,EAAsE;AAClE;AACH;;AAED,UAAI,MAAM,SAAS,aAAT,CAAuB,QAAvB,CAAV;AACA,UAAI,GAAJ,GAAU,MAAV;AACA,UAAI,iBAAiB,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAArB;AACA,qBAAe,UAAf,CAA0B,YAA1B,CAAuC,GAAvC,EAA4C,cAA5C;AACD;;;6BACe,O,EAAS,S,EAAW;AAClC,UAAI,OAAJ,EAAa;AACX,YAAI,QAAQ,SAAZ,EAAuB;AACnB,iBAAO,QAAQ,SAAR,CAAkB,QAAlB,CAA2B,SAA3B,CAAP;AACH,SAFD,MAEO;AACH,iBAAO,IAAI,MAAJ,CAAW,YAAY,SAAZ,GAAwB,SAAnC,EAA8C,IAA9C,CAAmD,QAAQ,SAA3D,CAAP;AACH;AACF;AACD,aAAO,KAAP;AACD;;;kCACoB,O,EAAQ;AAC3B,UAAI,CAAC,OAAL,EAAc;AACV;AACH;AACD,cAAQ,UAAR,CAAmB,WAAnB,CAA+B,OAA/B;AACD;AACD;;;;gCACmB,O,EAAS,S,EAAW,K,EAAM;AAC3C,UAAI,OAAJ,EAAa;AACX,YAAI,QAAQ,SAAZ,EAAuB;AACrB,kBAAQ,SAAR,CAAkB,QAAQ,KAAR,GAAgB,QAAlC,EAA4C,SAA5C;AACD,SAFD,MAEO;AACL,cAAI,OAAO,CAAC,MAAM,QAAQ,SAAd,GAA0B,GAA3B,EAAgC,OAAhC,CAAwC,MAAxC,EAAgD,GAAhD,EAAqD,OAArD,CAA6D,MAAM,SAAN,GAAkB,GAA/E,EAAoF,EAApF,CAAX;AACA,kBAAQ,SAAR,GAAoB,QAAQ,QAAQ,MAAM,SAAd,GAA0B,EAAlC,CAApB;AACD;AACF;AACF;;;iCACmB;AAClB,UAAI,aAAa;AACT,4BAAoB,KADX;AAET,sBAAc,wBAAW;AAAE,iBAAO,KAAP;AAAe,SAFjC;AAGT,2BAAmB,6BAAW,CAAE,CAHvB;AAIT,0BAAkB,4BAAW,CAAE,CAJtB;AAKT,6BAAqB,EALZ;AAMT,iBAAS,IANA;AAOT,gBAAQ;AAPC,OAAjB;AAAA,UASI,kBAAkB,wBAAwB,KAAxB,CAA8B,GAA9B,CATtB;;AAWA;AACA,UAAI,CAAC,SAAG,SAAH,CAAa,SAAS,gBAAtB,CAAL,EAA8C;AAC1C,mBAAW,kBAAX,GAAgC,IAAhC;AACH,OAFD,MAEO;AACL;AACA,aAAK,IAAI,IAAI,CAAR,EAAW,KAAK,gBAAgB,MAArC,EAA6C,IAAI,EAAjD,EAAqD,GAArD,EAA2D;AACzD,qBAAW,MAAX,GAAoB,gBAAgB,CAAhB,CAApB;;AAEA,cAAI,CAAC,SAAG,SAAH,CAAa,SAAS,WAAW,MAAX,GAAoB,kBAA7B,CAAb,CAAL,EAAqE;AACnE,uBAAW,kBAAX,GAAgC,IAAhC;AACA;AACD,WAHD,MAGO,IAAI,CAAC,SAAG,SAAH,CAAa,SAAS,gBAAtB,CAAD,IAA4C,SAAS,mBAAzD,EAA8E;AACnF;AACA,uBAAW,MAAX,GAAoB,IAApB;AACA,uBAAW,kBAAX,GAAgC,IAAhC;AACA;AACD;AACF;AACF;;AAED;AACA,UAAI,WAAW,kBAAf,EAAmC;AACjC;AACA;AACA,mBAAW,mBAAX,GAAkC,WAAW,MAAX,KAAsB,IAAtB,GAA6B,oBAA7B,GAAoD,WAAW,MAAX,GAAoB,kBAA1G;;AAEA,mBAAW,YAAX,GAA0B,UAAS,OAAT,EAAkB;AAC1C,cAAI,SAAG,SAAH,CAAa,OAAb,CAAJ,EAA2B;AACvB,sBAAU,SAAS,IAAnB;AACH;AACD,kBAAQ,KAAK,MAAb;AACE,iBAAK,EAAL;AACE,qBAAO,SAAS,iBAAT,KAA+B,OAAtC;AACF,iBAAK,KAAL;AACE,qBAAO,SAAS,oBAAT,KAAkC,OAAzC;AACF;AACE,qBAAO,SAAS,KAAK,MAAL,GAAc,mBAAvB,MAAgD,OAAvD;AANJ;AAQD,SAZD;AAaA,mBAAW,iBAAX,GAA+B,UAAS,OAAT,EAAkB;AAC/C,cAAI,SAAG,SAAH,CAAa,OAAb,CAAJ,EAA2B;AACzB,sBAAU,SAAS,IAAnB;AACD;AACD,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,QAAQ,iBAAR,EAAvB,GAAqD,QAAQ,KAAK,MAAL,IAAe,KAAK,MAAL,KAAgB,IAAhB,GAAuB,mBAAvB,GAA6C,mBAA5D,CAAR,GAA5D;AACD,SALD;AAMA,mBAAW,gBAAX,GAA8B,YAAW;AACvC,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,SAAS,gBAAT,EAAvB,GAAqD,SAAS,KAAK,MAAL,IAAe,KAAK,MAAL,KAAgB,IAAhB,GAAuB,gBAAvB,GAA0C,kBAAzD,CAAT,GAA5D;AACD,SAFD;AAGA,mBAAW,OAAX,GAAqB,YAAW;AAC9B,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,SAAS,iBAAhC,GAAoD,SAAS,KAAK,MAAL,GAAc,mBAAvB,CAA3D;AACD,SAFD;AAGD;;AAED,aAAO,UAAP;AACD;;;;;;kBAEY,G;;;;;;;;;;;AChKf;;;;;;;;IAEM,K;;;;;;;gCACe,O,EAAS,I,EAAM,O,EAAS,U,EAAY;AACrD;AACA,UAAI,CAAC,OAAD,IAAY,CAAC,IAAjB,EAAuB;AACrB;AACD;;AAED;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,OAAX,CAAL,EAA0B;AACxB,kBAAU,KAAV;AACD;;AAED;AACA,UAAI,QAAQ,IAAI,WAAJ,CAAgB,IAAhB,EAAsB;AAChC,iBAAS,OADuB;AAEhC,gBAAQ;AAFwB,OAAtB,CAAZ;;AAKA;AACA,cAAQ,aAAR,CAAsB,KAAtB;AACD;;;4BACc,O,EAAS,M,EAAQ,Q,EAAU,U,EAAY;AACpD,UAAI,OAAJ,EAAa;AACX,cAAM,cAAN,CAAqB,OAArB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,IAAhD,EAAsD,UAAtD;AACD;AACF;;;mCAEqB,O,EAAS,M,EAAQ,Q,EAAU,M,EAAQ,U,EAAY;AACnE,UAAI,YAAY,OAAO,KAAP,CAAa,GAAb,CAAhB;AACA;AACA;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,UAAX,CAAL,EAA6B;AAC3B,qBAAa,KAAb;AACD;;AAED;AACA,UAAI,mBAAmB,QAAvB,EAAiC;AAC/B,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,cAAI,QAAQ,CAAR,aAAsB,IAA1B,EAAgC;AAC9B,kBAAM,cAAN,CAAqB,QAAQ,CAAR,CAArB,EAAiC,UAAU,CAAV,CAAjC,EAA+C,UAAU,CAAV,CAA/C,EAA6D,UAAU,CAAV,CAA7D;AACD;AACF;AACD;AACD;;AAED;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,gBAAQ,SAAS,kBAAT,GAA8B,qBAAtC,EAA6D,UAAU,CAAV,CAA7D,EAA2E,QAA3E,EAAqF,UAArF;AACD;AACF;;;kCACoB,O,EAAS,S,EAAW,Y,EAAc,e,EAAiB,U,EAAY;AAClF,YAAM,OAAN,CAAc,OAAd,EAAuB,SAAvB,EAAkC,UAAU,KAAV,EAAiB;AACjD,YAAI,YAAJ,EAAkB;AAChB,uBAAa,KAAb,CAAmB,OAAnB,EAA4B,CAAC,KAAD,CAA5B;AACD;AACD,wBAAgB,KAAhB,CAAsB,OAAtB,EAA+B,CAAC,KAAD,CAA/B;AACD,OALD,EAKG,UALH;AAMD;;;;;;kBAEY,K;;;;;;;;;;;;;IC5DT,G;;;;;;;sBAEK,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,YAAT,EAAuB;AACrB;AACD;AACD,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;AACF,UAAI,YAAU,GAAV,YAAoB,GAAxB;AACA,UAAI,QAAQ,KAAZ,EAAmB;AACjB,gBAAQ,KAAR,CAAc,GAAd;AACD,OAFD,MAEO,IAAI,QAAQ,IAAZ,EAAkB;AACvB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFM,MAEA;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,WAAT,EAAsB;AACpB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,WAAT,EAAsB;AACpB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,YAAT,EAAuB;AACrB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,KAAZ,EAAmB;AACjB,gBAAQ,KAAR,CAAc,GAAd;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,cAAT,EAAyB;AACvB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;AACF,cAAQ,GAAR,OAAgB,GAAhB,YAA0B,GAA1B;AACD;;;;;;AAIH,IAAI,UAAJ,GAAiB,OAAjB;AACA,IAAI,gBAAJ,GAAuB,KAAvB;AACA,IAAI,YAAJ,GAAmB,IAAnB;AACA,IAAI,WAAJ,GAAkB,IAAlB;AACA,IAAI,WAAJ,GAAkB,IAAlB;AACA,IAAI,YAAJ,GAAmB,IAAnB;AACA,IAAI,cAAJ,GAAqB,IAArB;;kBAEe,G;;;;;;;;;;;;;;;IC1FT,K;;;;;;;qCAEmB;AACrB,UAAI,EAAE,kBAAkB,MAApB,CAAJ,EAAiC;AAC/B,eAAO,KAAP;AACD;;AAED;AACA;AACA,UAAI;AACF;AACA,eAAO,YAAP,CAAoB,OAApB,CAA4B,SAA5B,EAAuC,IAAvC;;AAEA;AACA,YAAI,SAAS,OAAO,YAAP,CAAoB,OAApB,CAA4B,SAA5B,CAAb;;AAEA;AACA,eAAO,YAAP,CAAoB,UAApB,CAA+B,SAA/B;;AAEA;AACA,eAAQ,WAAW,IAAnB;AACD,OAZD,CAaA,OAAO,CAAP,EAAU;AACR,eAAO,KAAP;AACD;;AAED,aAAO,KAAP;AACD;;;+BACiB,M,EAAQ,I,EAAM,O,EAAS;AACvC,aAAO,OAAO,OAAP,CAAe,IAAI,MAAJ,CAAW,KAAK,OAAL,CAAa,8BAAb,EAA6C,MAA7C,CAAX,EAAiE,GAAjE,CAAf,EAAsF,OAAtF,CAAP;AACD;;;6BACe;AACd;AACA,UAAI,UAAU,SAAd;;AAEA;AACA,UAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAO,QAAQ,CAAR,CAAP;AACD;;AAED;AACA,UAAI,cAAc,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,OAA3B,CAAlB;AAAA,UACE,SAAS,QAAQ,MADnB;;AAGA;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,YAAI,SAAS,QAAQ,CAAR,CAAb;;AAEA,aAAK,IAAI,QAAT,IAAqB,MAArB,EAA6B;AAC3B,cAAI,OAAO,QAAP,KACF,OAAO,QAAP,EAAiB,WADf,IAEF,OAAO,QAAP,EAAiB,WAAjB,KAAiC,MAFnC,EAGE;AACA,wBAAY,QAAZ,IAAwB,YAAY,QAAZ,KAAyB,EAAjD;AACA,kBAAM,MAAN,CAAa,YAAY,QAAZ,CAAb,EAAoC,OAAO,QAAP,CAApC;AACD,WAND,MAMO;AACL,wBAAY,QAAZ,IAAwB,OAAO,QAAP,CAAxB;AACD;AACF;AACF;;AAED,aAAO,WAAP;AACD;;;yBACU;AACT,aAAO;AACL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,IAAkB,QAAO,KAAP,yCAAO,KAAP,OAAkB,QAA3C;AACD,SAHI;AAIL,eAAO,eAAS,KAAT,EAAgB;AACrB,iBAAO,UAAU,IAAV,IAAmB,QAAO,KAAP,yCAAO,KAAP,OAAkB,QAAlB,IAA8B,MAAM,WAAN,KAAsB,KAA9E;AACD,SANI;AAOL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,KAAmB,OAAO,KAAP,KAAkB,QAAlB,IAA8B,CAAC,MAAM,QAAQ,CAAd,CAA/B,IAAoD,QAAO,KAAP,yCAAO,KAAP,OAAiB,QAAjB,IAA6B,MAAM,WAAN,KAAsB,MAA1H,CAAP;AACD,SATI;AAUL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,KAAmB,OAAO,KAAP,KAAiB,QAAjB,IAA8B,QAAO,KAAP,yCAAO,KAAP,OAAiB,QAAjB,IAA6B,MAAM,WAAN,KAAsB,MAApG,CAAP;AACD,SAZI;AAaL,iBAAS,iBAAS,KAAT,EAAgB;AACvB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,SAA1C;AACD,SAfI;AAgBL,kBAAU,kBAAS,KAAT,EAAgB;AACxB,iBAAO,UAAU,IAAV,IAAkB,iBAAiB,QAA1C;AACD,SAlBI;AAmBL,qBAAa,qBAAS,KAAT,EAAgB;AAC3B,iBAAO,UAAU,IAAV,IAAkB,iBAAiB,WAA1C;AACD,SArBI;AAsBL,kBAAU,mBAAS,KAAT,EAAgB;AACxB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,UAA1C;AACD,SAxBI;AAyBL,mBAAW,mBAAS,KAAT,EAAgB;AACzB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,WAA1C;AACD;AA3BI,OAAP;AA6BD;;;kCACmB;AAClB,UAAI,KAAK,UAAU,SAAnB;AAAA,UACE,OAAO,UAAU,OADnB;AAAA,UAEE,cAAc,KAAK,WAAW,UAAU,UAArB,CAFrB;AAAA,UAGE,eAAe,SAAS,UAAU,UAAnB,EAA+B,EAA/B,CAHjB;AAAA,UAIE,mBAJF;AAAA,UAKE,kBALF;AAAA,UAME,WANF;AAAA,UAOE,OAAO,KAPT;AAAA,UAQE,YAAY,KARd;AAAA,UASE,WAAW,KATb;AAAA,UAUE,WAAW,KAVb;AAAA,UAWE,WAAW,KAXb;;AAaA,UAAK,UAAU,UAAV,CAAqB,OAArB,CAA6B,YAA7B,MAA+C,CAAC,CAAjD,IAAwD,UAAU,UAAV,CAAqB,OAArB,CAA6B,OAA7B,MAA0C,CAAC,CAAvG,EAA2G;AACzG;AACA,eAAO,IAAP;AACA,eAAO,IAAP;AACA,sBAAc,IAAd;AACD,OALD,MAKO,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,MAAX,CAAb,MAAqC,CAAC,CAA1C,EAA6C;AAClD;AACA,eAAO,IAAP;AACA,eAAO,IAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALM,MAKD,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,gBAAX,CAAb,MAA+C,CAAC,CAApD,EAAuD;AAC3D;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,EAAzB,CAAd;AACD,OALK,MAKA,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,QAAX,CAAb,MAAuC,CAAC,CAA5C,EAA+C;AACnD;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALK,MAKC,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,QAAX,CAAb,MAAuC,CAAC,CAA5C,EAA+C;AACpD;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACA,YAAI,CAAC,YAAY,GAAG,OAAH,CAAW,SAAX,CAAb,MAAwC,CAAC,CAA7C,EAAgD;AAC5C,wBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACH;AACF,OARM,MAQA,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,SAAX,CAAb,MAAwC,CAAC,CAA7C,EAAgD;AACrD;AACA,oBAAY,IAAZ;AACA,eAAO,SAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALM,MAKA,IAAI,CAAC,aAAa,GAAG,WAAH,CAAe,GAAf,IAAsB,CAApC,KAA0C,YAAY,GAAG,WAAH,CAAe,GAAf,CAAtD,CAAJ,EAAgF;AACrF;AACA,eAAO,GAAG,SAAH,CAAa,UAAb,EAAwB,SAAxB,CAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;;AAEA,YAAI,KAAK,WAAL,OAAuB,KAAK,WAAL,EAA3B,EAA+C;AAC3C,iBAAO,UAAU,OAAjB;AACH;AACF;;AAED;AACA,UAAI,CAAC,KAAK,YAAY,OAAZ,CAAoB,GAApB,CAAN,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,sBAAc,YAAY,SAAZ,CAAsB,CAAtB,EAAyB,EAAzB,CAAd;AACD;AACD,UAAI,CAAC,KAAK,YAAY,OAAZ,CAAoB,GAApB,CAAN,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,sBAAc,YAAY,SAAZ,CAAsB,CAAtB,EAAyB,EAAzB,CAAd;AACD;;AAED;AACA,qBAAe,SAAS,KAAK,WAAd,EAA2B,EAA3B,CAAf;AACA,UAAI,MAAM,YAAN,CAAJ,EAAyB;AACvB,sBAAc,KAAK,WAAW,UAAU,UAArB,CAAnB;AACA,uBAAe,SAAS,UAAU,UAAnB,EAA+B,EAA/B,CAAf;AACD;;AAED;AACA,aAAO;AACL,cAAY,IADP;AAEL,iBAAY,YAFP;AAGL,cAAY,IAHP;AAIL,mBAAY,SAJP;AAKL,kBAAY,QALP;AAML,kBAAY,QANP;AAOL,kBAAY,QAPP;AAQL,eAAY,sBAAsB,IAAtB,CAA2B,UAAU,QAArC,CARP;AASL,kBAAY,iBAAiB,IAAjB,CAAsB,UAAU,SAAhC,CATP;AAUL,iBAAY,kBAAkB,SAAS;AAVlC,OAAP;AAYD;;;4BACc,Q,EAAU,M,EAAQ;AAC/B,aAAO,MAAM,SAAN,CAAgB,OAAhB,IAA4B,SAAS,OAAT,CAAiB,MAAjB,MAA6B,CAAC,CAAjE;AACD;;;4BACc,I,EAAK;AAClB,UAAM,UAAc,MAAM,YAAN,EAApB;AAAA,UACI,UAAe,QAAQ,IAAR,IAAgB,QAAQ,OAAR,IAAmB,CADtD;AAAA,UAEI,QAAc,QAAQ,KAF1B;AAAA,UAGI,WAAc,QAAQ,QAH1B;AAAA,UAII,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WAJrD;AAAA,UAKI,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WALrD;AAMA,UAAI,QAAc,KAAlB;AAAA,UACI,OAAc,KADlB;;AAGA,cAAQ,IAAR;AACI,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAU,CAAC,OAApB;AACA;;AAEJ,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAS,CAAC,OAAnB;AACA;;AAEJ;AACI,kBAAS,gBAAgB,YAAzB;AACA,iBAAS,SAAS,CAAC,OAAnB;AAbR;;AAgBA,aAAO;AACH,eAAQ,KADL;AAEH,cAAQ;AAFL,OAAP;AAID;;;8BACgB,I,EAAK;AACpB,UAAM,UAAc,MAAM,WAAN,EAApB;AAAA,UACI,UAAe,QAAQ,IAAR,IAAgB,QAAQ,OAAR,IAAmB,CADtD;AAAA,UAEI,QAAc,QAAQ,KAF1B;AAAA,UAGI,WAAc,QAAQ,QAH1B;AAAA,UAII,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WAJrD;AAAA,UAKI,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WALrD;AAMA,UAAI,QAAc,KAAlB;AAAA,UACI,OAAc,KADlB;;AAGA,cAAQ,IAAR;AACI,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAU,CAAC,OAApB;AACA;;AAEJ,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAS,CAAC,OAAnB;AACA;;AAEJ;AACI,kBAAS,gBAAgB,YAAzB;AACA,iBAAS,SAAS,CAAC,OAAnB;AAbR;;AAgBA,aAAO;AACH,eAAQ,KADL;AAEH,cAAQ;AAFL,OAAP;AAID;;;;;;kBAEY,K;AACR,IAAM,kBAAK,MAAM,EAAN,EAAX;AACA,IAAM,0CAAiB,MAAM,cAAN,EAAvB;;;;;;;;;AC7PP;;;;;;AACA,IAAI,yBAAJ;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,SAA/B,EAA0C;AACtC,gBAAY,IAD0B;AAEtC,SAAK,eAAY;AACb;AACF,eAAO,aAAP;AACD;AALqC,CAA1C;kBAOe,O","file":"vplyr.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const defaultConfig = {\n    enabled: true,\n    debug: true,\n    autoplay: false,\n    loop: false,\n    seekTime: 10,\n    volume: 10,\n    volumeMin: 0,\n    volumeMax: 10,\n    volumeStep: 1,\n    duration: null,\n    displayDuration: true,\n    loadSprite: true,\n    hideControls: true,\n    blankUrl: 'https://cdn.selz.com/plyr/blank.mp4',\n    controls: ['play-large', 'play', 'progress', 'time', 'mute', 'volume', 'captions', 'fullscreen'],\n    selectors: {\n        html5: 'video, audio',\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.vplyr',\n        controls: {\n            container: null,\n            wrapper: '.vplyr-controls'\n        },\n        buttons: {\n            seek: '[data-video=\"seek\"]',\n            play: '[data-video=\"play\"]',\n            pause: '[data-video=\"pause\"]',\n            mute: '[data-video=\"mute\"]',\n            fullscreen: '[data-video=\"fullscreen\"]'\n        },\n        volume: {\n            input: '[data-video=\"volume\"]',\n            display: '.vplyr-volume-display'\n        },\n        progress: {\n            container: '.vplyr-progress-bar-container',\n            buffer: '.vplyr-progress-buffer',\n            played: '.vplyr-progress-played'\n        },\n        volume: {\n            input: '[data-video=\"volume\"]',\n            display: '.vplyr-volume-display'\n        },\n        currentTime: '.control-currenttime',\n        duration: '.control-duration'\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null\n    },\n    storage: {\n        enabled: true,\n        key: 'vplyr'\n    },\n    types: {\n        html5: ['video']\n    },\n    classes: {\n        setup: 'vplyr-setup',\n        ready: 'vplyr-ready',\n        muted: 'vplyr-muted',\n        type: 'vplyr-{0}',\n        videoWrapper: 'vplyr-video-container',\n        playing: 'vplyr-plying',\n        loading: 'vplyr-loading',\n        hover: 'vplyr-hover',\n        stopped: 'vplyr-stopped',\n        inIos: 'vplyr--is-ios',\n        inTouch: 'vplyr--is-touch',\n        inWechat: 'vplyr--is-wechat',\n        inChrome: 'vplyr--is-chrome',\n        tabFocus: 'tab-focus',\n        hideControls: 'vplyr-hide-controls',\n        fullscreen: {\n            enabled: 'vplyr-fullscreen-enabled',\n            active: 'vplyr-fullscreen-active'\n        },\n    },\n    events: ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n    // Logging\n    logPrefix: '[VPlyr]'\n}\nexport function createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}","module.exports = require('./vPlayer.js').default;\n","import utils from '../utils/util';\n\nexport const buildControls = (config)=>{\n  const { controls } = config;\n    const html = ['<div class=\"vplyr-video-loader-container\">',\n      '<div class=\"vplyr-video-loader\">',\n      '<div class=\"loader-inner one\"></div>',\n      '<div class=\"loader-inner two\"></div>',\n      '<div class=\"loader-inner three\"></div>',\n      '</div>',\n      '</div><div class=\"vplyr-gradient-bottom\"></div>'];\n    html.push('<div class=\"vplyr-bottom-container\">')\n    if (utils.inArray(controls, 'progress')) {\n      html.push(\n        '<div class=\"vplyr-progress-bar-container\">',\n        '<input id=\"seek{id}\" type=\"range\" min=\"0\" max=\"100\" value=\"0\" step=\"0.1\" class=\"vplyr-progress-bar\" data-video=\"seek\"/>',\n        '<progress class=\"vplyr-progress-played\" max=\"100\" role=\"presentation\"></progress>',\n        '<progress class=\"vplyr-progress-buffer\" max=\"100\" value=\"100\">',\n        '<span>100.00</span>% buffered',\n        '</progress>',\n        '</div>'\n      );\n    }\n    html.push('<div class=\"vplyr-controls\">')\n    html.push('<div class=\"left-controls\">')\n    if (utils.inArray(controls, 'play')) {\n      html.push(\n        '<div class=\"btn-controls\">',\n        '<div class=\"btn-wrap\">',\n        '<div class=\"play\" data-video=\"play\"></div>',\n        '<div class=\"pause\" data-video=\"pause\"></div>',\n        '</div>',\n        '</div>'\n      );\n    }\n    if (utils.inArray(controls, 'time')) {\n      html.push(\n        '<div class=\"time-mod-controls\">',\n        '<div class=\"control-currenttime\">00:00</div>',\n        '<div class=\"control-separator\">/</div>',\n        '<div class=\"control-duration\">00:00</div>',\n        '</div>'\n      );\n    }\n    html.push('</div>')//close vplyr left controls\n    html.push('<div class=\"right-controls\">')\n    if (utils.inArray(controls, 'fullscreen')) {\n      html.push(\n        '<div class=\"fullscreen-controls\" data-video=\"fullscreen\">',\n        '<svg class=\"icon-exit-fullscreen\">',\n        '<use xlink:href=\"#vplyr-exit-fullscreen\"></use>',\n        '</svg>',\n        '<svg class=\"icon-enter-fullscreen\">',\n        ' <use xlink:href=\"#vplyr-enter-fullscreen\"></use>',\n        '</svg>',\n        '</div>'\n      );\n    }\n    html.push('<div class=\"volume-controls\">')\n    if (utils.inArray(controls, 'mute')) {\n      html.push(\n        '<div class=\"vplyr-volume\" data-video=\"mute\">',\n        '<svg class=\"icon-muted\">',\n        '<use xlink:href=\"#vplyr-muted\"></use>',\n        '</svg>',\n        '<svg class=\"icon-volume\">',\n        '<use xlink:href=\"#vplyr-volume\"></use>',\n        '</svg>',\n        '</div>'\n      );\n    }\n    if (utils.inArray(controls, 'volume')) {\n      html.push(\n        '<div class=\"vplyr-volume-progress\">',\n        '<input type=\"range\" id=\"volume{id}\"  class=\"vplyr-volume-input\"  min=\"0\"  max=\"10\" data-video=\"volume\" value=\"8\">',\n        '<progress class=\"vplyr-volume-display\" max=\"10\" role=\"presentation\"></progress>',\n        '</div>'\n      );\n    }\n    html.push('</div>')//close vplyr volume controls\n\n    html.push('</div>')//close vplyr right controls\n\n    html.push('</div>')//close vplyr controls\n    html.push('</div>')//close\n    return html.join('');\n}","import utils, { is } from '../utils/util';\nimport Player from './player';\nimport { defaultConfig as defaults } from '../config';\n\nclass VPlayer {\n  constructor(target, options) {\n    this.TAG = 'VideoPlayer';\n    this._intaface = null;\n    this.media = target;\n    this.options = options;\n  }\n  setup() {\n    const element = this.media;\n    const options = this.options;\n    let data = {};\n\n    try { data = JSON.parse(element.getAttribute('data-vplyr')); }\n    catch (e) { }\n    const config = utils.extend({}, defaults, options, data);\n    if (!config.enabled) {\n      return null;\n    }\n    const player = new Player(element, config);\n    const instance =player.setup();\n    window.___intance__ = instance;\n    console.log(instance);\n  }\n}\nexport default VPlayer;","import $ from '../utils/dom';\nimport utils, { is } from '../utils/util';\nimport Event from '../utils/events';\nimport Log from '../utils/logger';;\nimport { setupStorage, updateStorage } from './storage';\nimport { buildControls } from './controls';\nimport { defaultConfig as defaults } from '../config';\n\nclass Player {\n  constructor(media, config) {\n    console.log(new utils().is);\n\n    const browser = utils.browerSniff();\n    this.TAG = 'Player';\n    this._player = {\n      media, browser\n    };\n    this._config = config;\n    this._timers = {};\n    this._storage = {};\n    this._media = media;\n    this._fullscreen = $.fullscreen();\n    this.__init__ = false;\n    this.__original = media.cloneNode(true);\n  }\n  setup() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    let api = {};\n    if (this.__init__) {\n      return null;\n    }\n    if (!is.htmlElement(media)) {\n      Log.w(this.TAG, 'media must be a video');\n      return;\n    }\n    setupStorage(config, storage);\n    const tagName = media.tagName.toLowerCase();\n    player.type = tagName;\n    config.crossorigin = (media.getAttribute('crossorigin') !== null);\n    config.autoplay = (config.autoplay || (media.getAttribute('autoplay') !== null));\n    config.loop = (config.loop || (media.getAttribute('loop') !== null));\n    player.supported = utils.supported(player.type);\n    if (!player.supported.basic) {\n      return;\n    }\n    player.container = $.wrap(media, document.createElement('div'));\n    player.container.setAttribute('tabindex', 0);\n    this._toggleStyleHook();\n\n    Log.i(this.TAG, '' + player.browser.name + ' ' + player.browser.version);\n    this._setupMedia();\n    if (utils.inArray(config.types.html5, player.type)) {\n      // Setup UI\n      this._setupInterface();\n\n      this._ready();\n    }\n    this.__init__ = true;\n    api = {\n      getType: player.type,\n      getDuration: this._getDuration.bind(this),\n      play: this._play.bind(this),\n      pause: this._pause.bind(this),\n      stop: () => { this._pause().bind(this); this._seek().bind(this); },\n      seek: this._seek.bind(this),\n      setVolume: this._setVolume.bind(this),\n      togglePlay: this._togglePlay.bind(this),\n      toggleMute: this._toggleMute.bind(this),\n      toggleFullscreen: this._toggleFullscreen.bind(this),\n      toggleControls: this._toggleControls.bind(this),\n      isFullscreen: function () { return player.isFullscreen || false; },\n      getContainer: function () { return player.container },\n      getMedia: function () { return player.media; },\n      getCurrentTime: function () { return player.media.currentTime; },\n      getVolume: function () { return player.media.volume; },\n      isMuted: function () { return player.media.muted; },\n      isReady: function () { return $.hasClass(player.container, config.classes.ready); },\n      isLoading: function () { return $.hasClass(player.container, config.classes.loading); },\n      isPaused: function () { return player.media.paused; },\n      on: function (event, callback) { Event.onEvent(player.container, event, callback); return this; },\n    }\n    return api;\n  }\n  _ready() {\n    const config = this._config;\n    const player = this._player;\n    const { media, container } = player;\n\n    // Ready event at end of execution stack\n    window.setTimeout(() => {\n      this._triggerEvent(media, 'ready');\n    }, 0);\n\n    // Set class hook on media element\n    $.toggleClass(media, defaults.classes.setup, true);\n\n    // Set container class for ready\n    $.toggleClass(container, config.classes.ready, true);\n\n    // Autoplay\n    if (config.autoplay) {\n      this._play();\n    }\n  }\n  _setupMedia() {\n    const config = this._config;\n    const player = this._player;\n    const original = this._original;\n    const { media } = player;\n\n    if (!media) {\n      Log.w(this.TAG, 'No media element found!');\n      return;\n    }\n    const { autoplay, classes } = config;\n    const { container, type, browser, supported } = player;\n    const { stopped, inIos, inChrome, inTouch, inWechat, videoWrapper } = classes;\n    const { isIos, isChrome, isTouch, isWechat } = browser;\n    if (supported.full) {\n      $.toggleClass(container, classes.type.replace('{0}', type), true);\n      $.toggleClass(container, stopped, autoplay);\n      // Add iOS class\n      $.toggleClass(container, inIos, isIos);\n      // Add chrome class\n      $.toggleClass(container, inChrome, isChrome);\n      // Add touch class\n      $.toggleClass(container, inTouch, isTouch);\n\n      // Add wechat class\n      $.toggleClass(container, inWechat, isWechat);\n      if (player.type === 'video') {\n        const wrapper = document.createElement('div');\n        wrapper.setAttribute('class', videoWrapper);\n        $.wrap(player.media, wrapper);\n        // Cache the container\n        player.videoContainer = wrapper;\n      }\n    }\n  }\n  _setupInterface() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n    const { media } = player;\n    const _getElements = (selector) => {\n      return player.container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    if (!player.supported.full) {\n      Log.w(this.TAG, 'Basic support only', player.type);\n\n      // Remove controls\n      $.removeElement(_getElement(config.selectors.controls.wrapper));\n      // reset native controls\n      this._toggleNativeControls(true);\n      // Bail\n      return;\n    }\n    const controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n    if (controlsMissing) {\n      // Inject custom controls\n      this._injectControls();\n    }\n    if (!this._findElements()) {\n      return;\n    }\n    if (controlsMissing) {\n      this._controlListeners();\n    }\n    this._mediaListeners();\n    this._toggleNativeControls(false);\n    this._timeUpdate();\n    // Set volume\n    this._setVolume();\n\n    this._updateVolume();\n\n    this._checkPlaying();\n  }\n  _mediaListeners() {\n    const player = this._player;\n    const { media } = player;\n    // Time change on media\n    Event.onEvent(media, 'timeupdate seeking', this._timeUpdate.bind(this));\n\n    Event.onEvent(media, 'durationchange loadedmetadata', this._displayDuration.bind(this));\n\n    Event.onEvent(media, 'play pause ended', this._checkPlaying.bind(this));\n\n    Event.onEvent(media, 'progress playing', this._updateProgress.bind(this));\n\n    Event.onEvent(media, 'waiting canplay seeked', this._checkLoading.bind(this));\n\n    Event.onEvent(media, 'volumechange', this._updateVolume.bind(this));\n\n  }\n  _updateVolume() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n    const { media, container, buttons, supported, volume } = player;\n    const { muted } = media;\n    const { classes } = config;\n    // Get the current volume\n    var __volume = muted ? 0 : (media.volume * config.volumeMax);\n\n    // Update the <input type=\"range\"> if present\n    if (supported.full) {\n      if (volume.input) {\n        volume.input.value = __volume;\n      }\n      if (volume.display) {\n        volume.display.value = __volume;\n      }\n    }\n\n    // Update the volume in storage\n    updateStorage({ volume: __volume }, config, storage);\n\n    // Toggle class if muted\n    $.toggleClass(container, classes.muted, (__volume === 0));\n\n    // Update checkbox for mute state\n    if (supported.full && buttons.mute) {\n      this._toggleState(buttons.mute, (volume === 0));\n    }\n  }\n  _checkLoading(event) {\n    const config = this._config;\n    const player = this._player;\n    const timers = this._timers;\n\n    const loading = (event.type === 'waiting');\n    const { container } = player;\n    const { classes } = config;\n    // Clear timer\n    clearTimeout(timers.loading);\n\n    // Timer to prevent flicker when seeking\n    timers.loading = setTimeout(() => {\n      // Toggle container class hook\n      $.toggleClass(container, classes.loading, loading);\n\n      // Show controls if loading, hide if done\n      this._toggleControls(loading);\n    }, (loading ? 250 : 0));\n  }\n  _checkPlaying() {\n    const config = this._config;\n    const player = this._player;\n\n    const { media, container } = player;\n    const { classes } = config;\n    const { paused } = media;\n    $.toggleClass(container, classes.playing, !paused);\n\n    $.toggleClass(container, classes.stopped, paused);\n\n    this._toggleControls(paused);\n  }\n  _play() {\n    const player = this._player;\n    const { media } = player;\n    if ('play' in media) {\n      media.play();\n    }\n  }\n  _pause() {\n    const player = this._player;\n    const { media } = player;\n    if ('pause' in media) {\n      media.pause();\n    }\n  }\n  _togglePlay(toggle) {\n    const player = this._player;\n    const { media } = player;\n    // True toggle\n    if (!is.boolean(toggle)) {\n      toggle = media.paused;\n    }\n\n    if (toggle) {\n      this._play();\n    } else {\n      this._pause();\n    }\n    return toggle;\n  }\n  _getDuration() {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n\n    // It should be a number, but parse it just incase\n    var duration = parseInt(config.duration),\n\n      // True duration\n      mediaDuration = 0;\n\n    // Only if duration available\n    if (media.duration !== null && !isNaN(media.duration)) {\n      mediaDuration = media.duration;\n    }\n\n    // If custom duration is funky, use regular duration\n    return (isNaN(duration) ? mediaDuration : duration);\n  }\n  _seek(input) {\n    const player = this._player;\n    const { media } = player;\n    let targetTime = 0,\n      paused = media.paused,\n      duration = this._getDuration();\n\n    if (is.number(input)) {\n      targetTime = input;\n    } else if (is.object(input) && utils.inArray(['input', 'change'], input.type)) {\n      // It's the seek slider\n      // Seek to the selected time\n      targetTime = ((input.target.value / input.target.max) * duration);\n    }\n    if (targetTime < 0) {\n      targetTime = 0;\n    } else if (targetTime > duration) {\n      targetTime = duration;\n    }\n    this._updateSeekDisplay(targetTime);\n    try {\n      media.currentTime = targetTime.toFixed(4);\n    }\n    catch (e) { }\n  }\n  _setVolume(volume) {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    const max = config.volumeMax,\n      min = config.volumeMin;\n\n    // Load volume from storage if no value specified\n    if (is.undefined(volume)) {\n      volume = storage.volume;\n    }\n\n    // Use config if all else fails\n    if (volume === null || isNaN(volume)) {\n      volume = config.volume;\n    }\n\n    // Maximum is volumeMax\n    if (volume > max) {\n      volume = max;\n    }\n    // Minimum is volumeMin\n    if (volume < min) {\n      volume = min;\n    }\n    // Set the player volume\n    media.volume = parseFloat(volume / max);\n\n    // Set the display\n    if (player.volume.display) {\n      player.volume.display.value = volume;\n    }\n    // Toggle muted state\n    if (volume === 0) {\n      media.muted = true;\n    } else if (media.muted && volume > 0) {\n      this._toggleMute();\n    }\n  }\n  _toggleMute(muted) {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    if (!is.boolean(muted)) {\n      muted = !media.muted;\n    }\n\n    // Set button state\n    this._toggleState(player.buttons.mute, muted);\n\n    // Set mute on the player\n    media.muted = muted;\n\n    // If volume is 0 after unmuting, set to default\n    if (media.volume === 0) {\n      this._setVolume(config.volume);\n    }\n\n  }\n  _toggleState(target, state) {\n    // Bail if no target\n    if (!target) {\n      return;\n    }\n    // Get state\n    state = (is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\n    // Set the attribute on target\n    target.setAttribute('aria-pressed', state);\n    return state;\n  }\n  _timeUpdate(event) {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n    // Duration\n    this._updateTimeDisplay(media.currentTime, player.currentTime);\n\n    // Ignore updates while seeking\n    if (event && event.type === 'timeupdate' && media.seeking) {\n      return;\n    }\n    // Playing progress\n    this._updateProgress(event);\n  }\n  _updateProgress(event) {\n    const player = this._player;\n    const { media, controls, progress, buttons, supported } = player;\n    if (!supported.full) {\n      return;\n    }\n\n    var __progress = progress.played,\n      __value = 0,\n      duration = this._getDuration();\n    if (event) {\n      switch (event.type) {\n        case 'timeupdate':\n        case 'seeking':\n          if (controls.pressed) {\n            return;\n          }\n\n          __value = this._getPercentage(media.currentTime, duration);\n\n          // Set seek range value only if it's a 'natural' time event\n          if (event.type === 'timeupdate' && buttons.seek) {\n            buttons.seek.value = __value;\n          }\n\n          break;\n        // Check buffer status\n        case 'playing':\n        case 'progress':\n          __progress = progress.buffer;\n          __value = (() => {\n            var buffered = media.buffered;\n\n            if (buffered && buffered.length) {\n              // HTML5\n              return this._getPercentage(buffered.end(0), duration);\n            }\n            return 0;\n          })();\n          break;\n      }\n    }\n    this._setProgress(__progress, __value);\n  }\n  _setProgress(progress, value) {\n    const player = this._player;\n    const { supported } = player;\n    if (!supported.full) {\n      return;\n    }\n\n    // Default to 0\n    if (is.undefined(value)) {\n      value = 0;\n    }\n    // Default to buffer or bail\n    if (is.undefined(progress)) {\n      if (player.progress && player.progress.buffer) {\n        progress = player.progress.buffer;\n      } else {\n        return;\n      }\n    }\n\n    // One progress element passed\n    if (is.htmlElement(progress)) {\n      progress.value = value;\n    } else if (progress) {\n      // Object of progress + text element\n      if (progress.bar) {\n        progress.bar.value = value;\n      }\n      if (progress.text) {\n        progress.text.innerHTML = value;\n      }\n    }\n  }\n  _updateTimeDisplay(time, element) {\n    const player = this._player;\n\n    // Bail if there's no duration display\n    if (!element) {\n      return;\n    }\n\n    // Fallback to 0\n    if (isNaN(time)) {\n      time = 0;\n    }\n\n    player.secs = parseInt(time % 60);\n    player.mins = parseInt((time / 60) % 60);\n    player.hours = parseInt(((time / 60) / 60) % 60);\n\n    // Do we need to display hours?\n    var displayHours = (parseInt(((this._getDuration() / 60) / 60) % 60) > 0);\n\n    // Ensure it's two digits. For example, 03 rather than 3.\n    player.secs = ('0' + player.secs).slice(-2);\n    player.mins = ('0' + player.mins).slice(-2);\n\n    // Render\n    element.innerHTML = (displayHours ? player.hours + ':' : '') + player.mins + ':' + player.secs;\n  }\n  _updateSeekDisplay(time) {\n    // Default to 0\n    if (!is.number(time)) {\n      time = 0;\n    }\n    const player = this._player;\n\n    const { progress, buttons } = player;\n    var duration = this._getDuration(),\n      value = this._getPercentage(time, duration);\n\n    // Update progress\n    if (progress && progress.played) {\n      progress.played.value = value;\n    }\n\n    // Update seek range input\n    if (buttons && buttons.seek) {\n      buttons.seek.value = value;\n    }\n  }\n  _displayDuration() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media, supported, duration, currentTime } = player;\n    const { displayDuration } = config;\n    if (!supported.full) {\n      return;\n    }\n\n    // Determine duration\n    var __duration = this._getDuration() || 0;\n\n    // If there's only one time display, display duration there\n    if (!duration && displayDuration && media.paused) {\n      this._updateTimeDisplay(__duration, currentTime);\n    }\n\n    // If there's a duration element, update content\n    if (duration) {\n      this._updateTimeDisplay(__duration, duration);\n    }\n\n  }\n  _controlListeners() {\n    const config = this._config;\n    const player = this._player;\n    const fullscreen = this._fullscreen;\n\n    const { browser, buttons, volume, container, controls } = player;\n    const { classes, listeners, hideControls } = config;\n    const inputEvent = (browser.isIE ? 'change' : 'input');\n    const togglePlay = () => {\n      const play = this._togglePlay();\n      let trigger = buttons[play ? 'play' : 'pause'],\n        target = buttons[play ? 'pause' : 'play'];\n\n      // Get the last play button to account for the large play button\n      if (target && target.length > 1) {\n        target = target[target.length - 1];\n      } else {\n        target = target[0];\n      }\n      if (target) {\n        const hadTabFocus = $.hasClass(trigger, classes.tabFocus);\n\n        setTimeout(function () {\n          target.focus();\n          if (hadTabFocus) {\n            $.toggleClass(trigger, classes.tabFocus, false);\n            $.toggleClass(target, classes.tabFocus, true);\n          }\n        }, 100);\n      }\n    }\n    Event.proxyListener(buttons.play, 'click', listeners.play, togglePlay);\n    // Pause\n    Event.proxyListener(buttons.pause, 'click', listeners.pause, togglePlay);\n    // Seek\n    Event.proxyListener(buttons.seek, inputEvent, listeners.seek, this._seek.bind(this));\n\n    Event.proxyListener(volume.input, inputEvent, listeners.volume, () => {\n      this._setVolume(volume.input.value);\n    });\n    Event.proxyListener(buttons.mute, 'click', listeners.mute, this._toggleMute.bind(this));\n\n    Event.proxyListener(buttons.fullscreen, 'click', listeners.fullscreen, this._toggleFullscreen.bind(this));\n\n    // Handle user exiting fullscreen by escaping etc\n    if (fullscreen.supportsFullScreen) {\n      Event.onEvent(document, fullscreen.fullScreenEventName, this._toggleFullscreen.bind(this));\n    }\n    if (hideControls) {\n      // Toggle controls on mouse events and entering fullscreen\n      Event.onEvent(container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', this._toggleControls.bind(this));\n\n      // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mouseenter mouseleave', (event) => {\n        player.controls.hover = event.type === 'mouseenter';\n      });\n\n      // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mousedown mouseup touchstart touchend touchcancel', (event) => {\n        player.controls.pressed = utils.inArray(['mousedown', 'touchstart'], event.type);\n      });\n      // Focus in/out on controls\n      Event.onEvent(controls, 'focus blur', this._toggleControls.bind(this), true);\n    }\n  }\n  _injectControls() {\n    const config = this._config;\n    const player = this._player;\n\n    let { html, selectors } = config;\n\n    const { container } = player;\n    if (!html) {\n      html = buildControls(config);\n    }\n    const random = Math.floor(Math.random() * (1000000));\n    container.setAttribute('id', `vplyr${random}`);\n    html = utils.replaceAll(html, '{id}', random);\n    let target;\n    if (is.string(selectors.controls.container)) {\n      target = document.querySelector(selectors.controls.container);\n    }\n    // Inject into the container by default\n    if (!is.htmlElement(target)) {\n      target = container\n    }\n    target.insertAdjacentHTML('beforeend', html);\n  }\n  _findElements() {\n    const config = this._config;\n    const player = this._player;\n\n    const { container } = player;\n    const { selectors } = config;\n    const { controls, buttons, progress, volume, duration, currentTime, seekTime } = selectors;\n    const _getElements = (selector) => {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    try {\n      player.controls = _getElement(controls.wrapper);\n\n      // Buttons\n      player.buttons = {};\n      player.buttons.seek = _getElement(buttons.seek);\n      player.buttons.play = _getElements(buttons.play);\n      player.buttons.pause = _getElement(buttons.pause);\n      player.buttons.fullscreen = _getElement(buttons.fullscreen);\n\n      // Inputs\n      player.buttons.mute = _getElement(buttons.mute);\n\n      // Progress\n      player.progress = {};\n      player.progress.container = _getElement(progress.container);\n\n      // Progress - Buffering\n      player.progress.buffer = {};\n      player.progress.buffer.bar = _getElement(progress.buffer);\n      player.progress.buffer.text = player.progress.buffer.bar && player.progress.buffer.bar.getElementsByTagName('span')[0];\n\n      // Progress - Played\n      player.progress.played = _getElement(progress.played);\n\n      // Volume\n      player.volume = {};\n      player.volume.input = _getElement(volume.input);\n      player.volume.display = _getElement(volume.display);\n\n      // Timing\n      player.duration = _getElement(duration);\n      player.currentTime = _getElement(currentTime);\n      player.seekTime = _getElements(seekTime);\n\n      return true;\n    }\n    catch (e) {\n      this._warn('It looks like there is a problem with your controls HTML');\n      // Restore native video controls\n      this._toggleNativeControls(true);\n\n      return false;\n    }\n  }\n  _toggleNativeControls(toggle) {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n    if (toggle && utils.inArray(config.types.html5, player.type)) {\n      media.setAttribute('controls', '');\n    } else {\n      media.removeAttribute('controls');\n    }\n  }\n  _toggleFullscreen(event) {\n    // Check for native support\n    const config = this._config;\n    const player = this._player;\n    const fullscreen = this._fullscreen;\n\n    const { container, buttons } = player;\n    var nativeSupport = fullscreen.supportsFullScreen;\n\n    if (nativeSupport) {\n      // If it's a fullscreen change event, update the UI\n      if (event && event.type === fullscreen.fullScreenEventName) {\n        player.isFullscreen = fullscreen.isFullScreen(container);\n      } else {\n        // Else it's a user request to enter or exit\n        if (!fullscreen.isFullScreen(container)) {\n          // Save scroll position\n          this._saveScrollPosition();\n\n          // Request full screen\n          fullscreen.requestFullScreen(container);\n        } else {\n          // Bail from fullscreen\n          fullscreen.cancelFullScreen();\n        }\n\n        // Check if we're actually full screen (it could fail)\n        player.isFullscreen = fullscreen.isFullScreen(container);\n\n        return;\n      }\n    } else {\n      // Otherwise, it's a simple toggle\n      player.isFullscreen = !player.isFullscreen;\n\n      // Bind/unbind escape key\n      document.body.style.overflow = player.isFullscreen ? 'hidden' : '';\n    }\n\n    // Set class hook\n    $.toggleClass(container, config.classes.fullscreen.active, player.isFullscreen);\n\n    // Trap focus\n    this._focusTrap(player.isFullscreen);\n\n    // Set button state\n    if (buttons && buttons.fullscreen) {\n      this._toggleState(buttons.fullscreen, player.isFullscreen);\n    }\n\n    // Trigger an event\n    this._triggerEvent(container, player.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Restore scroll position\n    if (!player.isFullscreen && nativeSupport) {\n      this._restoreScrollPosition();\n    }\n  }\n  _saveScrollPosition() {\n    scroll = {\n      x: window.pageXOffset || 0,\n      y: window.pageYOffset || 0\n    };\n  }\n  _restoreScrollPosition() {\n    window.scrollTo(scroll.x, scroll.y);\n  }\n  _toggleControls(toggle) {\n    const config = this._config;\n    const player = this._player;\n    const timers = this._timers;\n\n    const { hideControls, classes } = config;\n    const { type, container, browser, controls, media } = player;\n    const { paused } = media;\n    // Don't hide if config says not to, it's audio, or not ready or loading\n    if (!hideControls || type === 'audio') {\n      return;\n    }\n\n    var delay = 0,\n      isEnterFullscreen = false,\n      show = toggle,\n      loading = $.hasClass(container, classes.loading);\n\n    // Default to false if no boolean\n    if (!is.boolean(toggle)) {\n      if (toggle && toggle.type) {\n        // Is the enter fullscreen event\n        isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\n        // Whether to show controls\n        show = utils.inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\n        // Delay hiding on move events\n        if (utils.inArray(['mousemove', 'touchmove'], toggle.type)) {\n          delay = 2000;\n        }\n\n        // Delay a little more for keyboard users\n        if (toggle.type === 'focus') {\n          delay = 3000;\n        }\n      } else {\n        show = $.hasClass(container, classes.hideControls);\n      }\n    }\n\n    // Clear timer every movement\n    window.clearTimeout(timers.hover);\n\n    // If the mouse is not over the controls, set a timeout to hide them\n    if (show || paused || loading) {\n      $.toggleClass(container, classes.hideControls, false);\n\n      // Always show controls when paused or if touch\n      if (paused || loading) {\n        return;\n      }\n\n      // Delay for hiding on touch\n      if (browser.isTouch) {\n        delay = 3000;\n      }\n    }\n\n    // If toggle is false or if we're playing (regardless of toggle),\n    // then set the timer to hide the controls\n    if (!show || !paused) {\n      timers.hover = window.setTimeout(() => {\n        // If the mouse is over the controls (and not entering fullscreen), bail\n        if ((controls.pressed || controls.hover) && !isEnterFullscreen) {\n          return;\n        }\n\n        $.toggleClass(container, classes.hideControls, true);\n      }, delay);\n    }\n  }\n  _triggerEvent(element, type, bubbles, properties) {\n    Event.customEvent(element, type, bubbles, utils.extend({}, properties, {\n      vplyr: this\n    }));\n  }\n  _getPercentage(current, max) {\n    if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n      return 0;\n    }\n    return ((current / max) * 100).toFixed(2);\n  }\n  _toggleStyleHook() {\n    const config = this._config;\n    const player = this._player;\n    $.toggleClass(player.container, config.selectors.container.replace('.', ''), player.supported.full);\n  }\n}\nexport default Player;","import utils,{ storageSupport } from '../utils/util';\nexport const updateStorage = (value, config, storage) => {\n  if (!storageSupport || !config.storage.enabled) {\n    return;\n  }\n  utils.extend(storage, value);\n  window.localStorage.setItem(config.storage.key, JSON.stringify(storage));\n}\nexport const setupStorage = (config, storage) => {\n  var value = null;\n  if (!storageSupport || !config.storage.enabled) {\n    return;\n  }\n\n  window.localStorage.removeItem('vplyr-volume');\n\n  // load value from the current key\n  value = window.localStorage.getItem(config.storage.key);\n\n  if (!value) {\n    return;\n  } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n    updateStorage({ volume: parseFloat(value) }, config, storage);\n  } else {\n    // Assume it's JSON from this or a later version of plyr\n    storage = JSON.parse(value);\n  }\n}\n","import utils,{is} from './util';\n\nclass Dom {\n  static wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    if (!elements.length) {\n      elements = [elements];\n    }\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    for (var i = elements.length - 1; i >= 0; i--) {\n      var child = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n      var element = elements[i];\n\n      // Cache the current parent and sibling.\n      var parent = element.parentNode;\n      var sibling = element.nextSibling;\n\n      // Wrap the element (is automatically removed from its current\n      // parent).\n      child.appendChild(element);\n\n      // If the element had a sibling, insert the wrapper before\n      // the sibling to maintain the HTML structure; otherwise, just\n      // append it to the parent.\n      if (sibling) {\n        parent.insertBefore(child, sibling);\n      } else {\n        parent.appendChild(child);\n      }\n      return child;\n    }\n  }\n  static getClassname(selector) {\n    return selector.replace('.', '');\n  }\n  static insertElement(type, parent, attributes) {\n    // Create a new <element>\n    var element = document.createElement(type);\n\n    // Set all passed attributes\n    Dom.setAttributes(element, attributes);\n\n    // Inject the new element\n    Dom.prependChild(parent, element);\n  }\n  static setAttributes(element, attributes) {\n    for (var key in attributes) {\n      element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n    }\n  }\n  static prependChild(parent, element) {\n    parent.insertBefore(element, parent.firstChild);\n  }\n  static injectScript(source) {\n    if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n        return;\n    }\n\n    var tag = document.createElement('script');\n    tag.src = source;\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  }\n  static hasClass(element, className) {\n    if (element) {\n      if (element.classList) {\n          return element.classList.contains(className);\n      } else {\n          return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n      }\n    }\n    return false;\n  }\n  static removeElement(element){\n    if (!element) {\n        return;\n    }\n    element.parentNode.removeChild(element);\n  }\n  // Toggle class on an element\n  static toggleClass(element, className, state){\n    if (element) {\n      if (element.classList) {\n        element.classList[state ? 'add' : 'remove'](className);\n      } else {\n        let name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n        element.className = name + (state ? ' ' + className : '');\n      }\n    }\n  }\n  static fullscreen() {\n    var fullscreen = {\n            supportsFullScreen: false,\n            isFullScreen: function() { return false; },\n            requestFullScreen: function() {},\n            cancelFullScreen: function() {},\n            fullScreenEventName: '',\n            element: null,\n            prefix: ''\n        },\n        browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\n    // Check for native support\n    if (!is.undefined(document.cancelFullScreen)) {\n        fullscreen.supportsFullScreen = true;\n    } else {\n      // Check for fullscreen support by vendor prefix\n      for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n        fullscreen.prefix = browserPrefixes[i];\n\n        if (!is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n          fullscreen.supportsFullScreen = true;\n          break;\n        } else if (!is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n          // Special case for MS (when isn't it?)\n          fullscreen.prefix = 'ms';\n          fullscreen.supportsFullScreen = true;\n          break;\n        }\n      }\n    }\n\n    // Update methods to do something useful\n    if (fullscreen.supportsFullScreen) {\n      // Yet again Microsoft awesomeness,\n      // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n      fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\n      fullscreen.isFullScreen = function(element) {\n        if (is.undefined(element)) {\n            element = document.body;\n        }\n        switch (this.prefix) {\n          case '':\n            return document.fullscreenElement === element;\n          case 'moz':\n            return document.mozFullScreenElement === element;\n          default:\n            return document[this.prefix + 'FullscreenElement'] === element;\n        }\n      };\n      fullscreen.requestFullScreen = function(element) {\n        if (is.undefined(element)) {\n          element = document.body;\n        }\n        return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n      };\n      fullscreen.cancelFullScreen = function() {\n        return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n      };\n      fullscreen.element = function() {\n        return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n      };\n    }\n\n    return fullscreen;\n  }\n}\nexport default Dom;\n","import utils, { is } from './util';\n\nclass Event {\n  static customEvent(element, type, bubbles, properties) {\n    // Bail if no element\n    if (!element || !type) {\n      return;\n    }\n\n    // Default bubbles to false\n    if (!is.boolean(bubbles)) {\n      bubbles = false;\n    }\n\n    // Create and dispatch the event\n    var event = new CustomEvent(type, {\n      bubbles: bubbles,\n      detail: properties\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n  }\n  static onEvent(element, events, callback, useCapture) {\n    if (element) {\n      Event.toggleListener(element, events, callback, true, useCapture);\n    }\n  }\n\n  static toggleListener(element, events, callback, toggle, useCapture) {\n    var eventList = events.split(' ');\n    // Whether the listener is a capturing listener or not\n    // Default to false\n    if (!is.boolean(useCapture)) {\n      useCapture = false;\n    }\n\n    // If a nodelist is passed, call itself on each node\n    if (element instanceof NodeList) {\n      for (var x = 0; x < element.length; x++) {\n        if (element[x] instanceof Node) {\n          Event.toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n        }\n      }\n      return;\n    }\n\n    // If a single node is passed, bind the event listener\n    for (var i = 0; i < eventList.length; i++) {\n      element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n    }\n  }\n  static proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n    Event.onEvent(element, eventName, function (event) {\n      if (userListener) {\n        userListener.apply(element, [event]);\n      }\n      defaultListener.apply(element, [event]);\n    }, useCapture);\n  }\n}\nexport default Event;","\nclass Log {\n\n  static e(tag, msg) {\n    if (!Log.ENABLE_ERROR) {\n      return;\n    }\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n    let str = `[${tag}] > ${msg}`;\n    if (console.error) {\n      console.error(str);\n    } else if (console.warn) {\n      console.warn(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static i(tag, msg) {\n    if (!Log.ENABLE_INFO) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.info) {\n      console.info(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static w(tag, msg) {\n    if (!Log.ENABLE_WARN) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.warn) {\n      console.warn(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static d(tag, msg) {\n    if (!Log.ENABLE_DEBUG) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.debug) {\n      console.debug(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static v(tag, msg) {\n    if (!Log.ENABLE_VERBOSE) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n    console.log(`[${tag}] > ${msg}`);\n  }\n\n}\n\nLog.GLOBAL_TAG = 'VPlyr';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nexport default Log;","class Utils {\n  \n  static storageSupport(){\n    if (!('localStorage' in window)) {\n      return false;\n    }\n\n    // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n    // see: https://github.com/Selz/plyr/issues/131\n    try {\n      // Add test item\n      window.localStorage.setItem('___test', 'OK');\n\n      // Get the test item\n      let result = window.localStorage.getItem('___test');\n\n      // Clean up\n      window.localStorage.removeItem('___test');\n\n      // Check if value matches\n      return (result === 'OK');\n    }\n    catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n  static replaceAll(string, find, replace) {\n    return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n  }\n  static extend() {\n    // Get arguments\n    let objects = arguments;\n\n    // Bail if nothing to merge\n    if (!objects.length) {\n      return;\n    }\n\n    // Return first if specified but nothing to merge\n    if (objects.length === 1) {\n      return objects[0];\n    }\n\n    // First object is the destination\n    let destination = Array.prototype.shift.call(objects),\n      length = objects.length;\n\n    // Loop through all objects to merge\n    for (let i = 0; i < length; i++) {\n      let source = objects[i];\n\n      for (let property in source) {\n        if (source[property] &&\n          source[property].constructor &&\n          source[property].constructor === Object\n        ) {\n          destination[property] = destination[property] || {};\n          Utils.extend(destination[property], source[property]);\n        } else {\n          destination[property] = source[property];\n        }\n      }\n    }\n\n    return destination;\n  }\n  static is(){\n    return {\n      object: function(input) {\n        return input !== null && typeof(input) === 'object';\n      },\n      array: function(input) {\n        return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n      },\n      number: function(input) {\n        return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n      },\n      string: function(input) {\n        return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n      },\n      boolean: function(input) {\n        return input !== null && typeof input === 'boolean';\n      },\n      nodeList: function(input) {\n        return input !== null && input instanceof NodeList;\n      },\n      htmlElement: function(input) {\n        return input !== null && input instanceof HTMLElement;\n      },\n      function: function(input) {\n        return input !== null && typeof input === 'function';\n      },\n      undefined: function(input) {\n        return input !== null && typeof input === 'undefined';\n      }\n    }\n  }\n  static browerSniff(){\n    let ua = navigator.userAgent,\n      name = navigator.appName,\n      fullVersion = '' + parseFloat(navigator.appVersion),\n      majorVersion = parseInt(navigator.appVersion, 10),\n      nameOffset,\n      verOffset,\n      ix,\n      isIE = false,\n      isFirefox = false,\n      isChrome = false,\n      isWechat = false,\n      isSafari = false;\n\n    if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n      // MSIE 11\n      isIE = true;\n      name = 'IE';\n      fullVersion = '11';\n    } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n      // MSIE\n      isIE = true;\n      name = 'IE';\n      fullVersion = ua.substring(verOffset + 5);\n    }else if ((verOffset = ua.indexOf('micromessenger')) !== -1) {\n      // WeChat\n      isWechat = true;\n      name = 'WeChat';\n      fullVersion = ua.substring(verOffset + 15);\n    }else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n      // Chrome\n      isChrome = true;\n      name = 'Chrome';\n      fullVersion = ua.substring(verOffset + 7);\n    } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n      // Safari\n      isSafari = true;\n      name = 'Safari';\n      fullVersion = ua.substring(verOffset + 7);\n      if ((verOffset = ua.indexOf('Version')) !== -1) {\n          fullVersion = ua.substring(verOffset + 8);\n      }\n    } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n      // Firefox\n      isFirefox = true;\n      name = 'Firefox';\n      fullVersion = ua.substring(verOffset + 8);\n    } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n      // In most other browsers, 'name/version' is at the end of userAgent\n      name = ua.substring(nameOffset,verOffset);\n      fullVersion = ua.substring(verOffset + 1);\n\n      if (name.toLowerCase() === name.toUpperCase()) {\n          name = navigator.appName;\n      }\n    }\n\n    // Trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n\n    // Get major version\n    majorVersion = parseInt('' + fullVersion, 10);\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    // Return data\n    return {\n      name:       name,\n      version:    majorVersion,\n      isIE:       isIE,\n      isFirefox:  isFirefox,\n      isChrome:   isChrome,\n      isSafari:   isSafari,\n      isWechat:   isWechat,\n      isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n      isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n      isTouch:    'ontouchstart' in document.documentElement\n    };\n  }\n  static inArray(haystack, needle) {\n    return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n  }\n  static support(type){\n    const browser     = Utils.browserSniff(),\n        isOldIE     = (browser.isIE && browser.version <= 9),\n        isIos       = browser.isIos,\n        isIphone    = browser.isIphone,\n        audioSupport = !!document.createElement('audio').canPlayType,\n        videoSupport = !!document.createElement('video').canPlayType;\n    let basic       = false,\n        full        = false;\n\n    switch (type) {\n        case 'video':\n            basic = videoSupport;\n            full  = (basic && (!isOldIE));\n            break;\n\n        case 'audio':\n            basic = audioSupport;\n            full  = (basic && !isOldIE);\n            break;\n\n        default:\n            basic = (audioSupport && videoSupport);\n            full  = (basic && !isOldIE);\n    }\n\n    return {\n        basic:  basic,\n        full:   full\n    };\n  }\n  static supported(type){\n    const browser     = Utils.browerSniff(),\n        isOldIE     = (browser.isIE && browser.version <= 9),\n        isIos       = browser.isIos,\n        isIphone    = browser.isIphone,\n        audioSupport = !!document.createElement('audio').canPlayType,\n        videoSupport = !!document.createElement('video').canPlayType;\n    let basic       = false,\n        full        = false;\n\n    switch (type) {\n        case 'video':\n            basic = videoSupport;\n            full  = (basic && (!isOldIE));\n            break;\n\n        case 'audio':\n            basic = audioSupport;\n            full  = (basic && !isOldIE);\n            break;\n\n        default:\n            basic = (audioSupport && videoSupport);\n            full  = (basic && !isOldIE);\n    }\n\n    return {\n        basic:  basic,\n        full:   full\n    };\n  }\n}\nexport default Utils;\nexport const is = Utils.is();\nexport const storageSupport = Utils.storageSupport();\n","import Player from './player/index';\nlet vPlayer = Player;\n\nObject.defineProperty(vPlayer, 'version', {\n    enumerable: true,\n    get: function () {\n        // replaced by browserify-versionify transform\n      return '__VERSION__';\n    }\n});\nexport default vPlayer;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}