{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-runtime/core-js/json/stringify.js","node_modules/babel-runtime/core-js/object/assign.js","node_modules/babel-runtime/core-js/object/define-property.js","node_modules/babel-runtime/core-js/symbol.js","node_modules/babel-runtime/core-js/symbol/iterator.js","node_modules/babel-runtime/core-js/weak-map.js","node_modules/babel-runtime/helpers/classCallCheck.js","node_modules/babel-runtime/helpers/createClass.js","node_modules/babel-runtime/helpers/defineProperty.js","node_modules/babel-runtime/helpers/typeof.js","node_modules/core-js/library/fn/json/stringify.js","node_modules/core-js/library/fn/object/assign.js","node_modules/core-js/library/fn/object/define-property.js","node_modules/core-js/library/fn/symbol/index.js","node_modules/core-js/library/fn/symbol/iterator.js","node_modules/core-js/library/fn/weak-map.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_add-to-unscopables.js","node_modules/core-js/library/modules/_an-instance.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_array-methods.js","node_modules/core-js/library/modules/_array-species-constructor.js","node_modules/core-js/library/modules/_array-species-create.js","node_modules/core-js/library/modules/_classof.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_collection-weak.js","node_modules/core-js/library/modules/_collection.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_enum-keys.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_for-of.js","node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_is-array-iter.js","node_modules/core-js/library/modules/_is-array.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_iter-call.js","node_modules/core-js/library/modules/_iter-create.js","node_modules/core-js/library/modules/_iter-define.js","node_modules/core-js/library/modules/_iter-step.js","node_modules/core-js/library/modules/_iterators.js","node_modules/core-js/library/modules/_keyof.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_meta.js","node_modules/core-js/library/modules/_object-assign.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_object-gopd.js","node_modules/core-js/library/modules/_object-gopn-ext.js","node_modules/core-js/library/modules/_object-gopn.js","node_modules/core-js/library/modules/_object-gops.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_redefine-all.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_string-at.js","node_modules/core-js/library/modules/_to-index.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_wks-define.js","node_modules/core-js/library/modules/_wks-ext.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/core.get-iterator-method.js","node_modules/core-js/library/modules/es6.array.iterator.js","node_modules/core-js/library/modules/es6.object.assign.js","node_modules/core-js/library/modules/es6.object.define-property.js","node_modules/core-js/library/modules/es6.object.to-string.js","node_modules/core-js/library/modules/es6.string.iterator.js","node_modules/core-js/library/modules/es6.symbol.js","node_modules/core-js/library/modules/es6.weak-map.js","node_modules/core-js/library/modules/es7.symbol.async-iterator.js","node_modules/core-js/library/modules/es7.symbol.observable.js","node_modules/core-js/library/modules/web.dom.iterable.js","src/js/config.js","src/js/dom.js","src/js/event.js","src/js/index.js","src/js/logger.js","src/js/player.js","src/js/polyfill.js","src/js/util.js","src/js/vplyr.js"],"names":[],"mappings":"AAAA;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;;ACFA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;;ACHA;AACA;AACA;;ACFA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvDA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;QCiFgB,mB,GAAA,mB;;;;AA7FT,IAAM,wCAAgB;AAC3B,aAAyB,IADE;AAE3B,WAAwB,IAFG;AAG3B,cAAwB,KAHG;AAI3B,UAAwB,KAJG;AAK3B,cAAwB,EALG;AAM3B,YAAwB,EANG;AAO3B,eAAwB,CAPG;AAQ3B,eAAwB,EARG;AAS3B,gBAAwB,CATG;AAU3B,cAAwB,IAVG;AAW3B,qBAAwB,IAXG;AAY3B,gBAAwB,IAZ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","file":"vplyr.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/weak-map\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","var core  = require('../../modules/_core')\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');","require('../modules/es6.object.to-string');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.weak-map');\nmodule.exports = require('../modules/_core').WeakMap;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require('./_ctx')\n  , IObject  = require('./_iobject')\n  , toObject = require('./_to-object')\n  , toLength = require('./_to-length')\n  , asc      = require('./_array-species-create');\nmodule.exports = function(TYPE, $create){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\n    , create        = $create || asc;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};","var isObject = require('./_is-object')\n  , isArray  = require('./_is-array')\n  , SPECIES  = require('./_wks')('species');\n\nmodule.exports = function(original){\n  var C;\n  if(isArray(original)){\n    C = original.constructor;\n    // cross-realm fallback\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\n    if(isObject(C)){\n      C = C[SPECIES];\n      if(C === null)C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function(original, length){\n  return new (speciesConstructor(original))(length);\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","'use strict';\nvar redefineAll       = require('./_redefine-all')\n  , getWeak           = require('./_meta').getWeak\n  , anObject          = require('./_an-object')\n  , isObject          = require('./_is-object')\n  , anInstance        = require('./_an-instance')\n  , forOf             = require('./_for-of')\n  , createArrayMethod = require('./_array-methods')\n  , $has              = require('./_has')\n  , arrayFind         = createArrayMethod(5)\n  , arrayFindIndex    = createArrayMethod(6)\n  , id                = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function(that){\n  return that._l || (that._l = new UncaughtFrozenStore);\n};\nvar UncaughtFrozenStore = function(){\n  this.a = [];\n};\nvar findUncaughtFrozen = function(store, key){\n  return arrayFind(store.a, function(it){\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function(key){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)return entry[1];\n  },\n  has: function(key){\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function(key, value){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function(key){\n    var index = arrayFindIndex(this.a, function(it){\n      return it[0] === key;\n    });\n    if(~index)this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this)['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var data = getWeak(anObject(key), true);\n    if(data === true)uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};","'use strict';\nvar global         = require('./_global')\n  , $export        = require('./_export')\n  , meta           = require('./_meta')\n  , fails          = require('./_fails')\n  , hide           = require('./_hide')\n  , redefineAll    = require('./_redefine-all')\n  , forOf          = require('./_for-of')\n  , anInstance     = require('./_an-instance')\n  , isObject       = require('./_is-object')\n  , setToStringTag = require('./_set-to-string-tag')\n  , dP             = require('./_object-dp').f\n  , each           = require('./_array-methods')(0)\n  , DESCRIPTORS    = require('./_descriptors');\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function(target, iterable){\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base;\n      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){\n        anInstance(this, C, KEY);\n        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    if('size' in proto)dP(C.prototype, 'size', {\n      get: function(){\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys')\n  , gOPS    = require('./_object-gops')\n  , pIE     = require('./_object-pie');\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","var ctx         = require('./_ctx')\n  , call        = require('./_iter-call')\n  , isArrayIter = require('./_is-array-iter')\n  , anObject    = require('./_an-object')\n  , toLength    = require('./_to-length')\n  , getIterFn   = require('./core.get-iterator-method')\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require('./_global').document && document.documentElement;","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// check on default Array iterator\nvar Iterators  = require('./_iterators')\n  , ITERATOR   = require('./_wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};","'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","var getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject');\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};","module.exports = true;","var META     = require('./_uid')('meta')\n  , isObject = require('./_is-object')\n  , has      = require('./_has')\n  , setDesc  = require('./_object-dp').f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !require('./_fails')(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = require('./_object-keys')\n  , gOPS     = require('./_object-gops')\n  , pIE      = require('./_object-pie')\n  , toObject = require('./_to-object')\n  , IObject  = require('./_iobject')\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require('./_an-object')\n  , dPs         = require('./_object-dps')\n  , enumBugKeys = require('./_enum-bug-keys')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};","var dP       = require('./_object-dp')\n  , anObject = require('./_an-object')\n  , getKeys  = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};","var pIE            = require('./_object-pie')\n  , createDesc     = require('./_property-desc')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , has            = require('./_has')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject')\n  , gOPN      = require('./_object-gopn').f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = require('./_object-keys-internal')\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};","exports.f = Object.getOwnPropertySymbols;","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require('./_has')\n  , toObject    = require('./_to-object')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};","var has          = require('./_has')\n  , toIObject    = require('./_to-iobject')\n  , arrayIndexOf = require('./_array-includes')(false)\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require('./_object-keys-internal')\n  , enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};","exports.f = {}.propertyIsEnumerable;","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","var hide = require('./_hide');\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};","module.exports = require('./_hide');","var def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var shared = require('./_shared')('keys')\n  , uid    = require('./_uid');\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};","var global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","var toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","var toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var global         = require('./_global')\n  , core           = require('./_core')\n  , LIBRARY        = require('./_library')\n  , wksExt         = require('./_wks-ext')\n  , defineProperty = require('./_object-dp').f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};","exports.f = require('./_wks');","var store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});","","'use strict';\nvar $at  = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","'use strict';\n// ECMAScript 6 symbols shim\nvar global         = require('./_global')\n  , has            = require('./_has')\n  , DESCRIPTORS    = require('./_descriptors')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , META           = require('./_meta').KEY\n  , $fails         = require('./_fails')\n  , shared         = require('./_shared')\n  , setToStringTag = require('./_set-to-string-tag')\n  , uid            = require('./_uid')\n  , wks            = require('./_wks')\n  , wksExt         = require('./_wks-ext')\n  , wksDefine      = require('./_wks-define')\n  , keyOf          = require('./_keyof')\n  , enumKeys       = require('./_enum-keys')\n  , isArray        = require('./_is-array')\n  , anObject       = require('./_an-object')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , createDesc     = require('./_property-desc')\n  , _create        = require('./_object-create')\n  , gOPNExt        = require('./_object-gopn-ext')\n  , $GOPD          = require('./_object-gopd')\n  , $DP            = require('./_object-dp')\n  , $keys          = require('./_object-keys')\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f  = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !require('./_library')){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);","'use strict';\nvar each         = require('./_array-methods')(0)\n  , redefine     = require('./_redefine')\n  , meta         = require('./_meta')\n  , assign       = require('./_object-assign')\n  , weak         = require('./_collection-weak')\n  , isObject     = require('./_is-object')\n  , getWeak      = meta.getWeak\n  , isExtensible = Object.isExtensible\n  , uncaughtFrozenStore = weak.ufstore\n  , tmp          = {}\n  , InternalMap;\n\nvar wrapper = function(get){\n  return function WeakMap(){\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key){\n    if(isObject(key)){\n      var data = getWeak(key);\n      if(data === true)return uncaughtFrozenStore(this).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value){\n    return weak.def(this, key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){\n  InternalMap = weak.getConstructor(wrapper);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function(key){\n    var proto  = $WeakMap.prototype\n      , method = proto[key];\n    redefine(proto, key, function(a, b){\n      // store frozen objects on internal weakmap shim\n      if(isObject(a) && !isExtensible(a)){\n        if(!this._f)this._f = new InternalMap;\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}","require('./_wks-define')('asyncIterator');","require('./_wks-define')('observable');","require('./es6.array.iterator');\nvar global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , TO_STRING_TAG = require('./_wks')('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}","export const defaultConfig = {\n  enabled:                 true,\n  debug:                  true,\n  autoplay:               false,\n  loop:                   false,\n  seekTime:               10,\n  volume:                 10,\n  volumeMin:              0,\n  volumeMax:              10,\n  volumeStep:             1,\n  duration:               null,\n  displayDuration:        true,\n  loadSprite:             true,\n  hideControls:           true,\n  blankUrl:'https://cdn.selz.com/plyr/blank.mp4',\n  controls:               ['play-large', 'play', 'progress', 'time', 'mute', 'volume', 'captions', 'fullscreen'],\n  selectors: {\n    html5:                'video, audio',\n    editable:             'input, textarea, select, [contenteditable]',\n    container:            '.vplyr',\n    controls: {\n        container:        null,\n        wrapper:          '.vplyr-controls'\n    },\n    buttons: {\n        seek:             '[data-video=\"seek\"]',\n        play:             '[data-video=\"play\"]',\n        pause:            '[data-video=\"pause\"]',\n        mute:             '[data-video=\"mute\"]',\n        fullscreen:       '[data-video=\"fullscreen\"]'\n    },\n    volume: {\n        input:            '[data-video=\"volume\"]',\n        display:          '.vplyr-volume-display'\n    },\n    progress: {\n        container:        '.vplyr-progress-bar-container',\n        buffer:           '.vplyr-progress-buffer',\n        played:           '.vplyr-progress-played'\n    },\n    volume: {\n        input:          '[data-video=\"volume\"]',\n        display:        '.vplyr-volume-display'\n    },\n    currentTime:          '.control-currenttime',\n    duration:             '.control-duration'\n    },\n\n  // Custom control listeners\n  listeners: {\n      seek:               null,\n      play:               null,\n      pause:              null,\n      restart:            null,\n      rewind:             null,\n      forward:            null,\n      mute:               null,\n      volume:             null,\n      captions:           null,\n      fullscreen:         null\n  },\n  storage: {\n    enabled:            true,\n    key:                'vplyr'\n  },\n  types: {\n    html5:              ['video']\n  },\n  classes:{\n    setup:              'vplyr-setup',\n    ready:              'vplyr-ready',\n    muted:              'vplyr-muted',\n    type:               'vplyr-{0}',\n    videoWrapper:'vplyr-video-container',\n    playing:'vplyr-plying',\n    loading:            'vplyr-loading',\n    hover:              'vplyr-hover',\n    stopped:'vplyr-stopped',\n    inIos:              'vplyr--is-ios',\n    inTouch:            'vplyr--is-touch',\n    inWechat:           'vplyr--is-wechat',\n    inChrome:           'vplyr--is-chrome',\n    tabFocus:           'tab-focus',\n    hideControls:       'vplyr-hide-controls',\n    fullscreen: {\n        enabled:        'vplyr-fullscreen-enabled',\n        active:         'vplyr-fullscreen-active'\n    },\n  },\n  events: ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n  // Logging\n  logPrefix: '[VPlyr]'\n}\nexport function createDefaultConfig() {\n  return Object.assign({}, defaultConfig);\n}","import utils from './util';\n\nclass Dom {\n  constructor(){\n    this.toggleClass  = this._toggleClass.bind(this);\n    this.removeElement  = this._removeElement.bind(this);\n    this.hasClass = this._hasClass.bind(this);\n    this.injectScript = this._injectScript.bind(this);\n    this.prependChild = this._prependChild.bind(this);\n    this.setAttributes = this._setAttributes.bind(this);\n    this.insertElement= this._insertElement.bind(this);\n    this.getClassname= this._getClassname.bind(this);\n    this.fullscreen= this._fullscreen.bind(this);\n  }\n  _getClassname(selector) {\n    return selector.replace('.', '');\n  }\n  _insertElement(type, parent, attributes) {\n    // Create a new <element>\n    var element = document.createElement(type);\n\n    // Set all passed attributes\n    _setAttributes(element, attributes);\n\n    // Inject the new element\n    _prependChild(parent, element);\n  }\n  _setAttributes(element, attributes) {\n    for (var key in attributes) {\n      element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n    }\n  }\n  _prependChild(parent, element) {\n    parent.insertBefore(element, parent.firstChild);\n  }\n  _injectScript(source) {\n    if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n        return;\n    }\n\n    var tag = document.createElement('script');\n    tag.src = source;\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  }\n  _hasClass(element, className) {\n    if (element) {\n      if (element.classList) {\n          return element.classList.contains(className);\n      } else {\n          return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n      }\n    }\n    return false;\n  }\n  _removeElement(element){\n    if (!element) {\n        return;\n    }\n    element.parentNode.removeChild(element);\n  }\n  // Toggle class on an element\n  _toggleClass(element, className, state){\n    if (element) {\n      if (element.classList) {\n        element.classList[state ? 'add' : 'remove'](className);\n      } else {\n        let name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n        element.className = name + (state ? ' ' + className : '');\n      }\n    }\n  }\n  _fullscreen() {\n    var fullscreen = {\n            supportsFullScreen: false,\n            isFullScreen: function() { return false; },\n            requestFullScreen: function() {},\n            cancelFullScreen: function() {},\n            fullScreenEventName: '',\n            element: null,\n            prefix: ''\n        },\n        browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\n    // Check for native support\n    if (!utils.is.undefined(document.cancelFullScreen)) {\n        fullscreen.supportsFullScreen = true;\n    } else {\n      // Check for fullscreen support by vendor prefix\n      for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n        fullscreen.prefix = browserPrefixes[i];\n\n        if (!utils.is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n          fullscreen.supportsFullScreen = true;\n          break;\n        } else if (!utils.is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n          // Special case for MS (when isn't it?)\n          fullscreen.prefix = 'ms';\n          fullscreen.supportsFullScreen = true;\n          break;\n        }\n      }\n    }\n\n    // Update methods to do something useful\n    if (fullscreen.supportsFullScreen) {\n      // Yet again Microsoft awesomeness,\n      // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n      fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\n      fullscreen.isFullScreen = function(element) {\n        if (utils.is.undefined(element)) {\n            element = document.body;\n        }\n        switch (this.prefix) {\n          case '':\n            return document.fullscreenElement === element;\n          case 'moz':\n            return document.mozFullScreenElement === element;\n          default:\n            return document[this.prefix + 'FullscreenElement'] === element;\n        }\n      };\n      fullscreen.requestFullScreen = function(element) {\n        if (utils.is.undefined(element)) {\n          element = document.body;\n        }\n        return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n      };\n      fullscreen.cancelFullScreen = function() {\n        return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n      };\n      fullscreen.element = function() {\n        return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n      };\n    }\n\n    return fullscreen;\n  }\n}\nexport default new Dom();\n","import utils from './util';\n\nclass Event{\n  constructor(){\n    this.onEvent = this._on.bind(this);\n    this.customEvent = this._event.bind(this);\n  }\n  _event(element, type, bubbles, properties) {\n    // Bail if no element\n    if (!element || !type) {\n        return;\n    }\n\n    // Default bubbles to false\n    if (!utils.is.boolean(bubbles)) {\n        bubbles = false;\n    }\n\n    // Create and dispatch the event\n    var event = new CustomEvent(type, {\n        bubbles:    bubbles,\n        detail:     properties\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n  }\n  _on(element, events, callback, useCapture) {\n    if (element) {\n      this._toggleListener(element, events, callback, true, useCapture);\n    }\n  }\n\n  _toggleListener(element, events, callback, toggle, useCapture) {\n    var eventList = events.split(' ');\n    // Whether the listener is a capturing listener or not\n    // Default to false\n    if (!utils.is.boolean(useCapture)) {\n      useCapture = false;\n    }\n\n    // If a nodelist is passed, call itself on each node\n    if (element instanceof NodeList) {\n      for (var x = 0; x < element.length; x++) {\n        if (element[x] instanceof Node) {\n          this._toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n        }\n      }\n      return;\n    }\n\n    // If a single node is passed, bind the event listener\n    for (var i = 0; i < eventList.length; i++) {\n      element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n    }\n  }\n}\nexport default new Event();","import vPlayer from './vplyr.js';\nimport polyfill from './polyfill.js';\n\n;(function(root, factory) {\n    'use strict';\n    /*global define,module*/\n\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(root, document);\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define([], function () { return factory(root, document); });\n    } else {\n        // Browser globals (root is window)\n        root.vplyr = factory(root, document);\n    }\n}(typeof window !== 'undefined' ? window : this, function(window, document) {\n  polyfill.install();\n  window.vPlayer = vPlayer;\n}))","import utils from './util.js';\n\nexport default class Log {\n  constructor(config){\n    this._config = config;\n    this.log = this._log.bind(this);\n    this.warn = this._warn.bind(this);\n    this.console = this._console.bind(this);\n  }\n  _console(type,args){\n    if (this._config.debug && window.console) {\n      args = Array.prototype.slice.call(args);\n\n      if (utils.is.string(this._config.logPrefix) && this._config.logPrefix.length) {\n        args.unshift(this._config.logPrefix);\n      }\n      console[type].apply(console, args);\n    }\n  }\n  _log() { \n    this._console('log', arguments) \n  };\n  _warn() { \n    this._console('warn', arguments) \n  };\n}","'use strict';\n\nimport utils from './util';\nimport $ from './dom';\nimport Event from './event';\nimport Logger from './logger';\n\nlet _log , _warn;\nimport {defaultConfig as defaults} from './config';\n\nconst playerMap = new WeakMap();\nconst fullscreen = $.fullscreen();\n\nclass Player {\n  constructor(media, config){\n    const _logger = new Logger(config);\n    \n    this._log = _logger.log;\n    this._warn = _logger.warn;\n    playerMap.set(this,{\n      media,\n      config,\n      player:{},\n      timers:{},\n      fullscreen,\n      original:null,\n      storage:{}\n    })\n    this._init();\n    this._log(this,$);\n  }\n  pause(){\n    this._pause();\n  }\n  play(){\n    this._play();\n  }\n  stop(){\n    this._pause();\n    this._seek();\n  }\n  togglePlay(){\n    this._togglePlay();\n  }\n  toggleControls(){\n    this._toggleControls();\n  }\n  get loadingState(){\n    const {player,config} = playerMap.get(this);\n    const {container} = player;\n    const {classes} = config;\n    return $.hasClass(container, classes.loading);\n  }\n  get readyState(){\n    const {player,config} = playerMap.get(this);\n    const {container} = player;\n    const {classes} = config;\n    return $.hasClass(container, classes.ready);\n  }\n  get container(){\n    const {player} = playerMap.get(this);\n    return player.container;\n  }\n  get type(){\n    const {player} = playerMap.get(this);\n    return player.type;\n  }\n  get volume(){\n    const {player} = playerMap.get(this);\n    return player.media.volume;\n  }\n  get duration(){\n    return this._getDuration();\n  }\n  get currentTime(){\n    const {player} = playerMap.get(this);\n    return player.media.currentTime;\n  }\n  get fullscreen(){\n    const {player} = playerMap.get(this);\n    return player.isFullscreen || false;\n  }\n  get muted(){\n    const {player} = playerMap.get(this);\n    return player.media.muted;\n  }\n  get paused(){\n    const {player} = playerMap.get(this);\n    return player.media.paused;\n  }\n  set fullscreen(fullscreen){\n    if(!utils.is.boolean(fullscreen)){\n      return;\n    }\n    \n    const {player} = playerMap.get(this);\n    if((!player.isFullscreen && fullscreen) || (player.isFullscreen && !fullscreen)){\n      this._toggleFullscreen();\n    }\n  }\n  set volume(value){\n    return this._setVolume(value);\n  }\n  set currentTime(value){\n    this.seek(value);\n  }\n  set muted(muted){\n    this._toggleMute(muted);\n  }\n  _init(){\n    const {player,media,config} = playerMap.get(this);\n    let {original} = playerMap.get(this);\n    original = media.cloneNode(true);\n    player.media =media;\n    this._log('Config', config);\n    \n    \n    this._setup();\n    this._log('player', player);\n    if (!this.__init__) {\n      return null;\n    }\n  }\n  _setup(){\n    if (this.__init__) {\n      return null;\n    }\n    const {original,player,config} = playerMap.get(this);\n    const {media} = player; \n    player.browser = utils.browserSniff;\n    if (!utils.is.htmlElement(media)) {\n      return;\n    }\n    this._setupStorage();//设置storage\n    const tagName = media.tagName.toLowerCase();\n    player.type  = tagName;\n    config.crossorigin  = (media.getAttribute('crossorigin') !== null);\n    config.autoplay     = (config.autoplay || (media.getAttribute('autoplay') !== null));\n    config.loop         = (config.loop || (media.getAttribute('loop') !== null));\n    player.supported = utils.supported(player.type);\n    if (!player.supported.basic) {\n      return;\n    }\n    player.container = this._wrap(media, document.createElement('div'));\n    player.container.setAttribute('tabindex', 0);\n    this._toggleStyleHook();\n    this._log('' + player.browser.name + ' ' + player.browser.version);\n    this._setupMedia();\n\n    if(utils.inArray(config.types.html5,player.type)){\n      // Setup UI\n      this._setupInterface();\n\n      this._ready();\n    }\n    this.__init__ = true;\n  }\n  _ready() {\n    const {player,config} = playerMap.get(this);\n    const {media,container} = player;\n    \n    // Ready event at end of execution stack\n    window.setTimeout(()=> {\n      this._triggerEvent(media, 'ready');\n    }, 0);\n\n    // Set class hook on media element\n    $.toggleClass(media, defaults.classes.setup, true);\n\n    // Set container class for ready\n    $.toggleClass(container, config.classes.ready, true);\n\n    // Autoplay\n    if (config.autoplay) {\n      this._play();\n    }\n  }\n  _setupInterface(){\n    const {player,config} = playerMap.get(this);\n    \n    const _getElements = (selector)=> {\n      return player.container.querySelectorAll(selector);\n    }\n    const _getElement=(selector)=> {\n      return _getElements(selector)[0];\n    }\n    if (!player.supported.full) {\n      this._warn('Basic support only', player.type);\n      \n      // Remove controls\n      $.removeElement(_getElement(config.selectors.controls.wrapper));\n      // reset native controls\n      this._toggleNativeControls(true);\n      // Bail\n      return;\n    }\n    const controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n    if (controlsMissing) {\n      // Inject custom controls\n      this._injectControls();\n    }\n    // Find the elements\n    if (!this._findElements()) {\n      return;\n    }\n    if (controlsMissing) {\n      this._controlListeners();\n    }\n    this._mediaListeners();\n    this._toggleNativeControls(false);\n    this._timeUpdate();\n    // Set volume\n    this._setVolume();\n\n    this._updateVolume();\n\n    this._checkPlaying();\n  }\n  _setupStorage() {\n    var value = null;\n    let {config,storage} = playerMap.get(this);\n    // Bail if we don't have localStorage support or it's disabled\n    if (!utils.storageSupport || !config.storage.enabled) {\n      return;\n    }\n    \n    window.localStorage.removeItem('vplyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n        return;\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n      // If value is a number, it's probably volume from an older\n      // version of plyr. See: https://github.com/Selz/plyr/pull/313\n      // Update the key to be JSON\n      this._updateStorage({volume: parseFloat(value)});\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n      storage = JSON.parse(value);\n    }\n  }\n  _triggerEvent(element, type, bubbles, properties) {\n    Event.customEvent(element, type, bubbles, utils.extend({}, properties, {\n      vplyr: this\n    }));\n  }\n  _getDuration() {\n    const {config,player} = playerMap.get(this);\n    const {media} = player;\n    \n    // It should be a number, but parse it just incase\n    var duration = parseInt(config.duration),\n\n    // True duration\n    mediaDuration = 0;\n\n    // Only if duration available\n    if (media.duration !== null && !isNaN(media.duration)) {\n      mediaDuration = media.duration;\n    }\n\n    // If custom duration is funky, use regular duration\n    return (isNaN(duration) ? mediaDuration : duration);\n  }\n  _seek(input){\n    const {player} = playerMap.get(this);\n    const {media} = player;\n    let targetTime  = 0,\n        paused      = media.paused,\n        duration    = this._getDuration();\n\n    if (utils.is.number(input)) {\n      targetTime = input;\n    } else if (utils.is.object(input) && utils.inArray(['input', 'change'], input.type)) {\n      // It's the seek slider\n      // Seek to the selected time\n      targetTime = ((input.target.value / input.target.max) * duration);\n    }\n    if (targetTime < 0) {\n      targetTime = 0;\n    } else if (targetTime > duration) {\n      targetTime = duration;\n    }\n    this._updateSeekDisplay(targetTime);\n    try {\n      media.currentTime = targetTime.toFixed(4);\n    }\n    catch(e) {}\n    // Logging\n    this._log('Seeking to ' + media.currentTime + ' seconds');\n  }\n  _play() {\n    const {player} = playerMap.get(this);\n    const {media} = player;\n    if ('play' in media) {\n      media.play();\n    }\n  }\n  _pause() {\n    const {player} = playerMap.get(this);\n    const {media} = player;\n    if ('pause' in media) {\n      media.pause();\n    }\n  }\n  _togglePlay(toggle) {\n    const {player} = playerMap.get(this);\n    const {media} = player;\n    // True toggle\n    if (!utils.is.boolean(toggle)) {\n      toggle = media.paused;\n    }\n\n    if (toggle) {\n      this._play();\n    } else {\n      this._pause();\n    }\n    return toggle;\n  }\n  _getPercentage(current, max) {\n    if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n        return 0;\n    }\n    return ((current / max) * 100).toFixed(2);\n  }\n  _updateSeekDisplay(time) {\n    // Default to 0\n    if (!utils.is.number(time)) {\n        time = 0;\n    }\n    const {player} = playerMap.get(this);\n    \n    const {progress,buttons} = player;\n    var duration    = this._getDuration(),\n        value       = this._getPercentage(time, duration);\n\n    // Update progress\n    if (progress && progress.played) {\n      progress.played.value = value;\n    }\n\n    // Update seek range input\n    if (buttons && buttons.seek) {\n      buttons.seek.value = value;\n    }\n  }\n  _mediaListeners(){\n    const {player} = playerMap.get(this);\n    const {media} = player;\n    // Time change on media\n    Event.onEvent(media, 'timeupdate seeking', this._timeUpdate.bind(this));\n\n    Event.onEvent(media, 'durationchange loadedmetadata', this._displayDuration.bind(this));\n    \n    Event.onEvent(media, 'play pause ended', this._checkPlaying.bind(this));\n\n    Event.onEvent(media, 'progress playing', this._updateProgress.bind(this));\n\n    Event.onEvent(media, 'waiting canplay seeked', this._checkLoading.bind(this));\n\n    Event.onEvent(media, 'volumechange', this._updateVolume.bind(this));\n    \n  }\n  _proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n    Event.onEvent(element, eventName, function(event) {\n      if (userListener) {\n        userListener.apply(element, [event]);\n      }\n      defaultListener.apply(element, [event]);\n    }, useCapture);\n  }\n  _controlListeners(){\n    const {player,config,fullscreen} = playerMap.get(this);\n    \n    const {browser,buttons,volume,container,controls} = player;\n    const {classes,listeners,hideControls} = config;\n    const inputEvent = (browser.isIE ? 'change' : 'input');\n    const togglePlay = ()=>{\n      const play = this._togglePlay();\n      let trigger = buttons[play ? 'play' : 'pause'],\n          target =buttons[play ? 'pause' : 'play'];\n\n      // Get the last play button to account for the large play button\n      if (target && target.length > 1) {\n        target = target[target.length - 1];\n      } else {\n        target = target[0];\n      }\n      if (target) {\n        const hadTabFocus = $.hasClass(trigger, classes.tabFocus);\n\n        setTimeout(function() {\n          target.focus();\n          if (hadTabFocus) {\n            $.toggleClass(trigger, classes.tabFocus, false);\n            $.toggleClass(target,classes.tabFocus, true);\n          }\n        }, 100);\n      }\n    }\n    this._proxyListener(buttons.play, 'click', listeners.play, togglePlay);\n    // Pause\n    this._proxyListener(buttons.pause, 'click', listeners.pause, togglePlay);\n    // Seek\n    this._proxyListener(buttons.seek, inputEvent, listeners.seek, this._seek.bind(this));\n\n    this._proxyListener(volume.input, inputEvent, listeners.volume, ()=>{\n      this._setVolume(volume.input.value);\n    });\n    this._proxyListener(buttons.mute, 'click', listeners.mute, this._toggleMute.bind(this));\n\n    this._proxyListener(buttons.fullscreen, 'click', listeners.fullscreen, this._toggleFullscreen.bind(this));\n\n    // Handle user exiting fullscreen by escaping etc\n    if (fullscreen.supportsFullScreen) {\n      Event.onEvent(document, fullscreen.fullScreenEventName, this._toggleFullscreen.bind(this));\n    }\n    if (hideControls) {\n      // Toggle controls on mouse events and entering fullscreen\n      Event.onEvent(container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', this._toggleControls.bind(this));\n\n      // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mouseenter mouseleave', (event)=>{\n          player.controls.hover = event.type === 'mouseenter';\n      });\n\n        // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mousedown mouseup touchstart touchend touchcancel', (event)=> {\n        player.controls.pressed = utils.inArray(['mousedown', 'touchstart'], event.type);\n      });\n      // Focus in/out on controls\n      Event.onEvent(controls, 'focus blur', this._toggleControls.bind(this), true);\n    }\n  }\n  _toggleFullscreen(event) {\n    // Check for native support\n    const {player,config,fullscreen} = playerMap.get(this);\n    \n    const {container,buttons} = player;\n    var nativeSupport = fullscreen.supportsFullScreen;\n\n    if (nativeSupport) {\n      // If it's a fullscreen change event, update the UI\n      if (event && event.type === fullscreen.fullScreenEventName) {\n          player.isFullscreen = fullscreen.isFullScreen(container);\n      } else {\n        // Else it's a user request to enter or exit\n        if (!fullscreen.isFullScreen(container)) {\n          // Save scroll position\n          this._saveScrollPosition();\n\n          // Request full screen\n          fullscreen.requestFullScreen(container);\n        } else {\n            // Bail from fullscreen\n          fullscreen.cancelFullScreen();\n        }\n\n        // Check if we're actually full screen (it could fail)\n        player.isFullscreen = fullscreen.isFullScreen(container);\n\n        return;\n      }\n    } else {\n        // Otherwise, it's a simple toggle\n        player.isFullscreen = !player.isFullscreen;\n\n        // Bind/unbind escape key\n        document.body.style.overflow = player.isFullscreen ? 'hidden' : '';\n    }\n\n    // Set class hook\n    $.toggleClass(container, config.classes.fullscreen.active, player.isFullscreen);\n\n    // Trap focus\n    this._focusTrap(player.isFullscreen);\n\n    // Set button state\n    if (buttons && buttons.fullscreen) {\n      this._toggleState(buttons.fullscreen, player.isFullscreen);\n    }\n\n    // Trigger an event\n    this._triggerEvent(container, player.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Restore scroll position\n    if (!player.isFullscreen && nativeSupport) {\n        this._restoreScrollPosition();\n    }\n  }\n  _focusTrap() {\n    const {player,config} = playerMap.get(this);\n    const  {container} = player;\n    const _getElements = (selector)=> {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement=(selector)=> {\n      return _getElements(selector)[0];\n    }\n    var tabbables   = _getElements('input:not([disabled]), button:not([disabled])'),\n        first       = tabbables[0],\n        last        = tabbables[tabbables.length - 1];\n\n    function _checkFocus(event) {\n      // If it is TAB\n      if (event.which === 9 && isFullscreen) {\n        if (event.target === last && !event.shiftKey) {\n          // Move focus to first element that can be tabbed if Shift isn't used\n          event.preventDefault();\n          first.focus();\n        } else if (event.target === first && event.shiftKey) {\n          // Move focus to last element that can be tabbed if Shift is used\n          event.preventDefault();\n          last.focus();\n        }\n      }\n    }\n\n    // Bind the handler\n    Event.onEvent(container, 'keydown', _checkFocus);\n  }\n  _saveScrollPosition() {\n    scroll = {\n        x: window.pageXOffset || 0,\n        y: window.pageYOffset || 0\n    };\n  }\n  _restoreScrollPosition() {\n    window.scrollTo(scroll.x, scroll.y);\n  }\n  _checkLoading(event) {\n    const {player,config,timers} = playerMap.get(this);\n    const loading = (event.type === 'waiting');\n    const {container} = player;\n    const {classes} = config;\n    // Clear timer\n    clearTimeout(timers.loading);\n\n    // Timer to prevent flicker when seeking\n    timers.loading = setTimeout(()=>{\n      // Toggle container class hook\n      $.toggleClass(container, classes.loading, loading);\n\n      // Show controls if loading, hide if done\n      this._toggleControls(loading);\n    }, (loading ? 250 : 0));\n  }\n  _checkPlaying() {\n    const {player,config} = playerMap.get(this);\n    const {media,container} = player;\n    const {classes} = config;\n    const {paused} = media;\n    $.toggleClass(container, classes.playing, !paused);\n\n    $.toggleClass(container, classes.stopped, paused);\n\n    this._toggleControls(paused);\n  }\n  _timeUpdate(event) {\n    const {player,config} = playerMap.get(this);\n    const {media} = player;\n    // Duration\n    this._updateTimeDisplay(media.currentTime, player.currentTime);\n\n    // Ignore updates while seeking\n    if (event && event.type === 'timeupdate' && media.seeking) {\n      return;\n    }\n    // Playing progress\n    this._updateProgress(event);\n  }\n  _updateProgress(event){\n    const {player} = playerMap.get(this);\n    const {media,controls,progress,buttons,supported} = player;\n    if (!supported.full) {\n      return;\n    }\n\n    var __progress    = progress.played,\n        __value       = 0,\n        duration    = this._getDuration();\n    if(event){\n      switch(event.type){\n        case 'timeupdate':\n        case 'seeking':\n          if (controls.pressed) {\n            return;\n          }\n\n          __value = this._getPercentage(media.currentTime, duration);\n\n          // Set seek range value only if it's a 'natural' time event\n          if (event.type === 'timeupdate' && buttons.seek) {\n            buttons.seek.value = __value;\n          }\n\n          break;  \n          // Check buffer status\n        case 'playing':\n        case 'progress':\n          __progress    = progress.buffer;\n          __value = (()=> {\n            var buffered = media.buffered;\n\n            if (buffered && buffered.length) {\n              // HTML5\n              return this._getPercentage(buffered.end(0), duration);\n            } \n            return 0;\n          })();\n          break;\n      }\n    }\n    this._setProgress(__progress, __value);\n  }\n  _setProgress(progress, value) {\n    const {player} = playerMap.get(this);\n    \n    const {supported} = player;\n    if (!supported.full) {\n      return;\n    }\n\n    // Default to 0\n    if (utils.is.undefined(value)) {\n      value = 0;\n    }\n    // Default to buffer or bail\n    if (utils.is.undefined(progress)) {\n      if (player.progress && player.progress.buffer) {\n        progress = player.progress.buffer;\n      } else {\n        return;\n      }\n    }\n\n    // One progress element passed\n    if (utils.is.htmlElement(progress)) {\n        progress.value = value;\n    } else if (progress) {\n      // Object of progress + text element\n      if (progress.bar) {\n        progress.bar.value = value;\n      }\n      if (progress.text) {\n        progress.text.innerHTML = value;\n      }\n    }\n  }\n  _setVolume(volume){\n    const {player,config,storage} = playerMap.get(this);\n    const {media} = player;\n    const max = config.volumeMax,\n        min = config.volumeMin;\n\n    // Load volume from storage if no value specified\n    if (utils.is.undefined(volume)) {\n      volume = storage.volume;\n    }\n\n    // Use config if all else fails\n    if (volume === null || isNaN(volume)) {\n      volume = config.volume;\n    }\n    \n    // Maximum is volumeMax\n    if (volume > max) {\n      volume = max;\n    }\n    // Minimum is volumeMin\n    if (volume < min) {\n      volume = min;\n    }\n    // Set the player volume\n    media.volume = parseFloat(volume / max);\n\n    // Set the display\n    if (player.volume.display) {\n      player.volume.display.value = volume;\n    }\n    // Toggle muted state\n    if (volume === 0) {\n      media.muted = true;\n    } else if (media.muted && volume > 0) {\n      this._toggleMute();\n    }\n  }\n  _updateVolume() {\n    const {player,config,storage} = playerMap.get(this);\n    const {media,container,buttons,supported,volume} = player;\n    const {muted} = media;\n    const {classes} = config;\n    // Get the current volume\n    var __volume = muted ? 0 : (media.volume * config.volumeMax);\n\n    // Update the <input type=\"range\"> if present\n    if (supported.full) {\n      if (volume.input) {\n        volume.input.value = __volume;\n      }\n      if (volume.display) {\n        volume.display.value = __volume;\n      }\n    }\n\n    // Update the volume in storage\n    this._updateStorage({volume: __volume});\n\n    // Toggle class if muted\n    $.toggleClass(container, classes.muted, (__volume === 0));\n\n    // Update checkbox for mute state\n    if (supported.full && buttons.mute) {\n      this._toggleState(buttons.mute, (volume === 0));\n    }\n  }\n  _updateStorage(value) {\n    const {storage,config} = playerMap.get(this);\n    \n    // Bail if we don't have localStorage support or it's disabled\n    if (!utils.storageSupport || !config.storage.enabled) {\n        return;\n    }\n\n    // Update the working copy of the values\n    utils.extend(storage, value);\n\n    // Update storage\n    window.localStorage.setItem(config.storage.key, JSON.stringify(storage));\n  }\n  _toggleState(target, state) {\n    // Bail if no target\n    if (!target) {\n        return;\n    }\n    // Get state\n    state = (utils.is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\n    // Set the attribute on target\n    target.setAttribute('aria-pressed', state);\n    return state;\n  }\n  _toggleMute(muted){\n    const {player,config,storage} = playerMap.get(this);\n    const {media} = player;\n    if (!utils.is.boolean(muted)) {\n      muted = !media.muted;\n    }\n\n    // Set button state\n    this._toggleState(player.buttons.mute, muted);\n\n    // Set mute on the player\n    media.muted = muted;\n\n    // If volume is 0 after unmuting, set to default\n    if (media.volume === 0) {\n      this._setVolume(config.volume);\n    }\n\n  }\n  _displayDuration() {\n    const {player,config,storage} = playerMap.get(this);\n    const {media,supported,duration,currentTime} = player;\n    const {displayDuration} = config;\n    if (!supported.full) {\n      return;\n    }\n\n    // Determine duration\n    var __duration = this._getDuration() || 0;\n\n    // If there's only one time display, display duration there\n    if (!duration && displayDuration && media.paused) {\n      this._updateTimeDisplay(__duration,currentTime);\n    }\n\n    // If there's a duration element, update content\n    if (duration) {\n      this._updateTimeDisplay(__duration, duration);\n    }\n\n  }\n  _updateTimeDisplay(time, element) {\n    const {player} = playerMap.get(this);\n    \n    // Bail if there's no duration display\n    if (!element) {\n        return;\n    }\n\n    // Fallback to 0\n    if (isNaN(time)) {\n        time = 0;\n    }\n\n    player.secs = parseInt(time % 60);\n    player.mins = parseInt((time / 60) % 60);\n    player.hours = parseInt(((time / 60) / 60) % 60);\n\n    // Do we need to display hours?\n    var displayHours = (parseInt(((this._getDuration() / 60) / 60) % 60) > 0);\n\n    // Ensure it's two digits. For example, 03 rather than 3.\n    player.secs = ('0' + player.secs).slice(-2);\n    player.mins = ('0' + player.mins).slice(-2);\n\n    // Render\n    element.innerHTML = (displayHours ? player.hours + ':' : '') + player.mins + ':' + player.secs;\n  }\n  _injectControls(){\n    const {player,config} = playerMap.get(this);\n    let {html,selectors} = config;\n    const {container} = player;\n    // Insert custom video controls\n    this._log('Injecting custom controls');\n    // If no controls are specified, create default\n    if (!html) {\n      html = this._buildControls();\n    }\n    const random =Math.floor(Math.random() * (1000000));\n    container.setAttribute('id', `vplyr${random}`);\n    html = utils.replaceAll(html, '{id}', random);\n    let target;\n    if (utils.is.string(selectors.controls.container)) {\n      target = document.querySelector(selectors.controls.container);\n    }\n    // Inject into the container by default\n    if (!utils.is.htmlElement(target)) {\n      target = container\n    }\n    target.insertAdjacentHTML('beforeend', html);\n  }\n  _findElements(){\n    const {player,config} = playerMap.get(this);\n    \n    const {container} = player;\n    const {selectors} = config;\n    const {controls,buttons,progress,volume,duration,currentTime,seekTime} = selectors;\n    const _getElements = (selector)=> {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement=(selector)=> {\n      return _getElements(selector)[0];\n    }\n    try {\n      player.controls                 = _getElement(controls.wrapper);\n\n      // Buttons\n      player.buttons = {};\n      player.buttons.seek             = _getElement(buttons.seek);\n      player.buttons.play             = _getElements(buttons.play);\n      player.buttons.pause            = _getElement(buttons.pause);\n      player.buttons.fullscreen       = _getElement(buttons.fullscreen);\n\n      // Inputs\n      player.buttons.mute             = _getElement(buttons.mute);\n\n      // Progress\n      player.progress = {};\n      player.progress.container       = _getElement(progress.container);\n\n      // Progress - Buffering\n      player.progress.buffer          = {};\n      player.progress.buffer.bar      = _getElement(progress.buffer);\n      player.progress.buffer.text     = player.progress.buffer.bar && player.progress.buffer.bar.getElementsByTagName('span')[0];\n\n      // Progress - Played\n      player.progress.played          = _getElement(progress.played);\n\n      // Volume\n      player.volume                   = {};\n      player.volume.input             = _getElement(volume.input);\n      player.volume.display           = _getElement(volume.display);\n\n      // Timing\n      player.duration                 = _getElement(duration);\n      player.currentTime              = _getElement(currentTime);\n      player.seekTime                 = _getElements(seekTime);\n\n      return true;\n    }\n    catch(e) {\n      this._warn('It looks like there is a problem with your controls HTML');\n      // Restore native video controls\n      this._toggleNativeControls(true);\n\n      return false;\n    }\n  }\n  _buildControls(){\n    const {config} = playerMap.get(this);\n    \n    const {controls} = config;\n    const html = ['<div class=\"vplyr-video-loader-container\">',\n          '<div class=\"vplyr-video-loader\">',\n          '<div class=\"loader-inner one\"></div>',\n          '<div class=\"loader-inner two\"></div>',\n          '<div class=\"loader-inner three\"></div>',\n          '</div>',\n          '</div><div class=\"vplyr-gradient-bottom\"></div>'];\n    html.push('<div class=\"vplyr-bottom-container\">')\n    if (utils.inArray(controls, 'progress')) {\n      html.push(\n          '<div class=\"vplyr-progress-bar-container\">',\n          '<input id=\"seek{id}\" type=\"range\" min=\"0\" max=\"100\" value=\"0\" step=\"0.1\" class=\"vplyr-progress-bar\" data-video=\"seek\"/>',\n          '<progress class=\"vplyr-progress-played\" max=\"100\" role=\"presentation\"></progress>',\n          '<progress class=\"vplyr-progress-buffer\" max=\"100\" value=\"100\">',\n          '<span>100.00</span>% buffered',\n          '</progress>',\n          '</div>'\n      );\n    }\n    html.push('<div class=\"vplyr-controls\">')\n    html.push('<div class=\"left-controls\">')\n    if (utils.inArray(controls, 'play')) {\n      html.push(\n        '<div class=\"btn-controls\">',\n          '<div class=\"btn-wrap\">',\n          '<div class=\"play\" data-video=\"play\"></div>',\n          '<div class=\"pause\" data-video=\"pause\"></div>',\n          '</div>',\n          '</div>'\n      );\n    }\n    if (utils.inArray(controls, 'time')) {\n      html.push(\n        '<div class=\"time-mod-controls\">',\n          '<div class=\"control-currenttime\">00:00</div>',\n          '<div class=\"control-separator\">/</div>',\n          '<div class=\"control-duration\">00:00</div>',\n          '</div>'\n      );\n    }\n    html.push('</div>')//close vplyr left controls\n    html.push('<div class=\"right-controls\">')\n    if (utils.inArray(controls, 'fullscreen')) {\n      html.push(\n        '<div class=\"fullscreen-controls\" data-video=\"fullscreen\">',\n          '<svg class=\"icon-exit-fullscreen\">',\n          '<use xlink:href=\"#vplyr-exit-fullscreen\"></use>',\n          '</svg>',\n          '<svg class=\"icon-enter-fullscreen\">',\n          ' <use xlink:href=\"#vplyr-enter-fullscreen\"></use>',\n          '</svg>',\n          '</div>'\n      );\n    }\n    html.push('<div class=\"volume-controls\">')\n    if (utils.inArray(controls, 'mute')) {\n      html.push(\n        '<div class=\"vplyr-volume\" data-video=\"mute\">',\n          '<svg class=\"icon-muted\">',\n          '<use xlink:href=\"#vplyr-muted\"></use>',\n          '</svg>',\n          '<svg class=\"icon-volume\">',\n          '<use xlink:href=\"#vplyr-volume\"></use>',\n          '</svg>',\n          '</div>'\n      );\n    }\n    if (utils.inArray(controls, 'volume')) {\n      html.push(\n        '<div class=\"vplyr-volume-progress\">',\n          '<input type=\"range\" id=\"volume{id}\"  class=\"vplyr-volume-input\"  min=\"0\"  max=\"10\" data-video=\"volume\" value=\"8\">',\n          '<progress class=\"vplyr-volume-display\" max=\"10\" role=\"presentation\"></progress>',\n          '</div>'\n      );\n    }\n    html.push('</div>')//close vplyr volume controls\n    \n    html.push('</div>')//close vplyr right controls\n    \n    html.push('</div>')//close vplyr controls\n    html.push('</div>')//close\n    return html.join('');\n  }\n  _toggleControls(toggle) {\n    const {player,config,timers} = playerMap.get(this);\n    \n    const {hideControls,classes} = config;\n    const {type,container,browser,controls,media} = player;\n    const {paused} = media;\n    // Don't hide if config says not to, it's audio, or not ready or loading\n    if (!hideControls || type === 'audio') {\n      return;\n    }\n\n    var delay = 0,\n        isEnterFullscreen = false,\n        show = toggle,\n        loading = $.hasClass(container, classes.loading);\n\n    // Default to false if no boolean\n    if (!utils.is.boolean(toggle)) {\n      if (toggle && toggle.type) {\n        // Is the enter fullscreen event\n        isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\n        // Whether to show controls\n        show = utils.inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\n        // Delay hiding on move events\n        if (utils.inArray(['mousemove', 'touchmove'], toggle.type)) {\n          delay = 2000;\n        }\n\n        // Delay a little more for keyboard users\n        if (toggle.type === 'focus') {\n            delay = 3000;\n        }\n      } else {\n        show = $.hasClass(container, classes.hideControls);\n      }\n    }\n\n    // Clear timer every movement\n    window.clearTimeout(timers.hover);\n\n    // If the mouse is not over the controls, set a timeout to hide them\n    if (show || paused || loading) {\n      $.toggleClass(container, classes.hideControls, false);\n\n      // Always show controls when paused or if touch\n      if (paused || loading) {\n        return;\n      }\n\n      // Delay for hiding on touch\n      if (browser.isTouch) {\n        delay = 3000;\n      }\n    }\n\n    // If toggle is false or if we're playing (regardless of toggle),\n    // then set the timer to hide the controls\n    if (!show || !paused) {\n      timers.hover = window.setTimeout(() =>{\n        // If the mouse is over the controls (and not entering fullscreen), bail\n        if ((controls.pressed || controls.hover) && !isEnterFullscreen) {\n            return;\n        }\n\n        $.toggleClass(container, classes.hideControls, true);\n      }, delay);\n    }\n  }\n  _setupMedia(){\n    const {original,player,config} = playerMap.get(this);\n    if (!player.media) {\n      this._warn('No media element found!');\n      return;\n    }\n    const {autoplay,classes} = config;\n    const {container,type,browser,supported} = player;\n    const {stopped,inIos,inChrome,inTouch,inWechat,videoWrapper} =classes;\n    const {isIos,isChrome,isTouch,isWechat} = browser;\n    if(supported.full){\n      $.toggleClass(container, classes.type.replace('{0}', type), true);\n      $.toggleClass(container, stopped, autoplay);\n      // Add iOS class\n      $.toggleClass(container, inIos, isIos);\n      // Add chrome class\n      $.toggleClass(container, inChrome, isChrome);\n      // Add touch class\n      $.toggleClass(container, inTouch, isTouch);\n\n      // Add wechat class\n      $.toggleClass(container, inWechat, isWechat);\n      if(player.type === 'video'){\n        const wrapper = document.createElement('div');\n        wrapper.setAttribute('class', videoWrapper);\n        this._wrap(player.media, wrapper);\n        // Cache the container\n        player.videoContainer = wrapper;\n      }\n    }\n  }\n  _toggleNativeControls(toggle) {\n    const {player,config} = playerMap.get(this);\n    const {media} = player;\n    if (toggle && utils.inArray(config.types.html5, player.type)) {\n      media.setAttribute('controls', '');\n    } else {\n      media.removeAttribute('controls');\n    }\n  }\n  _wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    if (!elements.length) {\n        elements = [elements];\n    }\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    for (var i = elements.length - 1; i >= 0; i--) {\n      var child   = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n      var element = elements[i];\n\n      // Cache the current parent and sibling.\n      var parent  = element.parentNode;\n      var sibling = element.nextSibling;\n\n      // Wrap the element (is automatically removed from its current\n      // parent).\n      child.appendChild(element);\n\n      // If the element had a sibling, insert the wrapper before\n      // the sibling to maintain the HTML structure; otherwise, just\n      // append it to the parent.\n      if (sibling) {\n          parent.insertBefore(child, sibling);\n      } else {\n          parent.appendChild(child);\n      }\n      return child;\n    }\n  }\n  _toggleStyleHook() {\n    const {player,config} = playerMap.get(this);\n    $.toggleClass(player.container, config.selectors.container.replace('.', ''), player.supported.full);\n  }\n}\nexport default Player;","class Polyfill {\n    constructor(){\n      this.install = this._install.bind(this);\n    }\n    _install(){\n        if (typeof window.CustomEvent === 'function') {\n            return;\n        }\n        \n        function CustomEvent(event, params) {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            var evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    }\n}\nexport default new Polyfill();","class Utils {\n  constructor(){\n    this.browserSniff=this._browserSniff.bind(this)();\n    this.is = this._is.bind(this)();\n    this.storageSupport = this._storageSupport.bind(this)();\n    this.extend  = this._extend.bind(this);\n    this.matches  = this._matches.bind(this);\n    this.inArray = this._inArray.bind(this);\n    this.supported = this._support.bind(this);\n    this.replaceAll = this._replaceAll.bind(this);\n    \n  }\n  _replaceAll(string, find, replace) {\n    return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n  }\n  _support(type){\n    const browser     = this._browserSniff(),\n        isOldIE     = (browser.isIE && browser.version <= 9),\n        isIos       = browser.isIos,\n        isIphone    = browser.isIphone,\n        audioSupport = !!document.createElement('audio').canPlayType,\n        videoSupport = !!document.createElement('video').canPlayType;\n    let basic       = false,\n        full        = false;\n\n    switch (type) {\n        case 'video':\n            basic = videoSupport;\n            full  = (basic && (!isOldIE));\n            break;\n\n        case 'audio':\n            basic = audioSupport;\n            full  = (basic && !isOldIE);\n            break;\n\n        default:\n            basic = (audioSupport && videoSupport);\n            full  = (basic && !isOldIE);\n    }\n\n    return {\n        basic:  basic,\n        full:   full\n    };\n  }\n  _inArray(haystack, needle) {\n    return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n  }\n\n  _matches(element, selector) {\n    var p = Element.prototype;\n\n    var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n    };\n\n    return f.call(element, selector);\n  }\n  _extend() {\n    // Get arguments\n    let objects = arguments;\n\n    // Bail if nothing to merge\n    if (!objects.length) {\n        return;\n    }\n\n    // Return first if specified but nothing to merge\n    if (objects.length === 1) {\n        return objects[0];\n    }\n\n    // First object is the destination\n    let destination = Array.prototype.shift.call(objects),\n        length      = objects.length;\n\n    // Loop through all objects to merge\n    for (let i = 0; i < length; i++) {\n        let source = objects[i];\n\n      for (let property in source) {\n        if (source[property] && \n          source[property].constructor &&\n          source[property].constructor === Object\n        ) {\n          destination[property] = destination[property] || {};\n          this._extend(destination[property], source[property]);\n        } else {\n          destination[property] = source[property];\n        }\n      }\n    }\n\n    return destination;\n  }\n  //remove an element\n  \n  _storageSupport(){\n    if (!('localStorage' in window)) {\n      return false;\n    }\n\n    // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n    // see: https://github.com/Selz/plyr/issues/131\n    try {\n      // Add test item\n      window.localStorage.setItem('___test', 'OK');\n\n      // Get the test item\n      let result = window.localStorage.getItem('___test');\n\n      // Clean up\n      window.localStorage.removeItem('___test');\n\n      // Check if value matches\n      return (result === 'OK');\n    }\n    catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n  \n  _browserSniff(){\n    let ua = navigator.userAgent,\n      name = navigator.appName,\n      fullVersion = '' + parseFloat(navigator.appVersion),\n      majorVersion = parseInt(navigator.appVersion, 10),\n      nameOffset,\n      verOffset,\n      ix,\n      isIE = false,\n      isFirefox = false,\n      isChrome = false,\n      isWechat = false,\n      isSafari = false;\n\n    if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n      // MSIE 11\n      isIE = true;\n      name = 'IE';\n      fullVersion = '11';\n    } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n      // MSIE\n      isIE = true;\n      name = 'IE';\n      fullVersion = ua.substring(verOffset + 5);\n    }else if ((verOffset = ua.indexOf('micromessenger')) !== -1) {\n      // WeChat\n      isWechat = true;\n      name = 'WeChat';\n      fullVersion = ua.substring(verOffset + 15);\n    }else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n      // Chrome\n      isChrome = true;\n      name = 'Chrome';\n      fullVersion = ua.substring(verOffset + 7);\n    } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n      // Safari\n      isSafari = true;\n      name = 'Safari';\n      fullVersion = ua.substring(verOffset + 7);\n      if ((verOffset = ua.indexOf('Version')) !== -1) {\n          fullVersion = ua.substring(verOffset + 8);\n      }\n    } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n      // Firefox\n      isFirefox = true;\n      name = 'Firefox';\n      fullVersion = ua.substring(verOffset + 8);\n    } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n      // In most other browsers, 'name/version' is at the end of userAgent\n      name = ua.substring(nameOffset,verOffset);\n      fullVersion = ua.substring(verOffset + 1);\n\n      if (name.toLowerCase() === name.toUpperCase()) {\n          name = navigator.appName;\n      }\n    }\n\n    // Trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n\n    // Get major version\n    majorVersion = parseInt('' + fullVersion, 10);\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    // Return data\n    return {\n      name:       name,\n      version:    majorVersion,\n      isIE:       isIE,\n      isFirefox:  isFirefox,\n      isChrome:   isChrome,\n      isSafari:   isSafari,\n      isWechat:   isWechat,\n      isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n      isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n      isTouch:    'ontouchstart' in document.documentElement\n    };\n  }\n  _is(){\n    return {\n      object: function(input) {\n        return input !== null && typeof(input) === 'object';\n      },\n      array: function(input) {\n        return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n      },\n      number: function(input) {\n        return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n      },\n      string: function(input) {\n        return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n      },\n      boolean: function(input) {\n        return input !== null && typeof input === 'boolean';\n      },\n      nodeList: function(input) {\n        return input !== null && input instanceof NodeList;\n      },\n      htmlElement: function(input) {\n        return input !== null && input instanceof HTMLElement;\n      },\n      function: function(input) {\n        return input !== null && typeof input === 'function';\n      },\n      undefined: function(input) {\n        return input !== null && typeof input === 'undefined';\n      }\n    }\n  }\n}\nexport default new Utils();","'use strict';\n\nimport utils from './util';\nimport $ from './dom';\nimport {defaultConfig as defaults} from './config';\nimport Event from './event';\nimport Player from './player';\n\nclass vPlayer {\n  constructor(targets, options){\n    this.TAG = 'VideoPlayer';\n    this.players = this._init(targets,options);\n  }\n  _init(targets, options){\n    const _targets = this.__getTargets(targets, options);\n    \n    if (!utils.supported().basic || !_targets.length) {\n      return false;\n    }\n    const players = [],instances = [];\n    const selector = [defaults.selectors.html5].join(',');\n    const _add = (target, media)=>{\n      if (!$.hasClass(media,defaults.classes.hook)){\n        players.push({\n          target:     target,\n          media:      media\n        });\n      }\n    };//end add\n    for (var i = 0; i < _targets.length; i++) {\n      var target = _targets[i];\n\n      // Get children\n      var children = target.querySelectorAll(selector);\n\n      // If there's more than one media element child, wrap them\n      if (children.length) {\n        for (var x = 0; x < children.length; x++) {\n          _add(target, children[x]);\n        }\n      } else if (this.__matches(target, selector)) {\n        // Target is media element\n        _add(target, target);\n      }\n    }// end for\n    console.log('players--->',players);\n    players.forEach((player)=>{\n      const element = player.target;\n      const media = player.media;\n      let match = false;\n      if (media === element) {\n        match = true;\n      }\n      let data = {};\n      try { data = JSON.parse(element.getAttribute('data-vplyr')); }\n      catch(e) { }\n      const config = utils.extend({}, defaults, options, data);\n      if (!config.enabled) {\n        return null;\n      }\n      \n      console.log(media.duration);\n      const instance = new Player(media, config);\n       // Go to next if setup failed\n      if (!utils.is.object(instance)) {\n        return;\n      }\n      if (config.debug) {\n        var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);\n        Event.onEvent(instance.container, events.join(' '), function(event) {\n          console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.vplyr);\n        });\n      }\n      // Callback\n      Event.customEvent(instance.container, 'setup', true, {\n        vplyr: instance\n      });\n\n      // Add to return array even if it's already setup\n      instances.push(instance);\n    });\n    return instances;\n  }\n  __matches(element, selector) {\n    var p = Element.prototype;\n\n    var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n    };\n\n    return f.call(element, selector);\n  }\n  __getTargets(targets,options){\n    const selector = [defaults.selectors.html5].join(',');\n    if (utils.is.string(targets)) {\n      // String selector passed\n      targets = document.querySelectorAll(targets);\n    } else if(utils.is.htmlElement(targets)){\n      targets = [targets];\n    }else if (!utils.is.nodeList(targets) && !utils.is.array(targets) && !utils.is.string(targets))  {\n      // No selector passed, possibly options as first argument\n      // If options are the first argument\n      if (utils.is.undefined(options) && utils.is.object(targets)) {\n          options = targets;\n      }\n      targets = document.querySelectorAll(selector);\n    }\n    if (utils.is.nodeList(targets)) {\n      targets = Array.prototype.slice.call(targets);\n    }\n    return targets;\n  }\n  \n}\nexport default vPlayer;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}