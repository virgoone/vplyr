{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/flv.js/dist/flv.js","src/js/config.js","src/js/index.js","src/js/player/controls.js","src/js/player/index.js","src/js/player/player.js","src/js/player/storage.js","src/js/utils/dom.js","src/js/utils/events.js","src/js/utils/logger.js","src/js/utils/util.js","src/js/vPlayer.js"],"names":[],"mappingsvmWgB,mB,GAAA,mB;;;;AA/FT,IAAM,wCAAgB;AACzB,iBAAa,IADY;AAEzB,aAAS,IAFgB;AAGzB,WAAO,IAHkB;AAIzB,cAAU,KAJe;AAKzB,UAAM,KALmB;AAMzB,cAAU,EANe;AAOzB,YAAQ,EAPiB;AAQzB,eAAW,CARc;AASzB,eAAW,EATc;AAUzB,gBAAY,CAVa;AAWzB,cAAU,IAXe;AAYzB,qBAAiB,IAZQ;AAazB,gBAAY,IAba;AAczB,kBAAc,IAdW;AAezB,cAAU,qCAfe;AAgBzB,cAAU,CAAC,YAAD,EAAe,MAAf,EAAuB,UAAvB,EAAmC,MAAnC,EAA2C,MAA3C,EAAmD,QAAnD,EAA6D,UAA7D,EAAyE,YAAzE,CAhBe;AAiBzB;AACI,eAAO,cADX;AAEI,kBAAU,4CAFd;AAGI,mBAAW,QAHf;AAII,kBAAU;AACN,uBAAW,IADL;AAEN,qBAAS;AAFH,SAJd;AAQI,iBAAS;AACL,kBAAM,qBADD;AAEL,kBAAM,qBAFD;AAGL,mBAAO,sBAHF;AAIL,kBAAM,qBAJD;AAKL,wBAAY;AALP,SARb;AAeI,gBAAQ;AACJ,mBAAO,uBADH;AAEJ,qBAAS;AAFL,SAfZ;AAmBI,kBAAU;AACN,uBAAW,+BADL;AAEN,oBAAQ,wBAFF;AAGN,oBAAQ;AAHF;AAnBd,6CAwBY;AACJ,eAAO,uBADH;AAEJ,iBAAS;AAFL,KAxBZ,8CA4BiB,sBA5BjB,2CA6Bc,mBA7Bd,cAjByB;;AAiDzB;AACA,eAAW;AACP,cAAM,IADC;AAEP,cAAM,IAFC;AAGP,eAAO,IAHA;AAIP,iBAAS,IAJF;AAKP,gBAAQ,IALD;AAMP,iBAAS,IANF;AAOP,cAAM,IAPC;AAQP,gBAAQ,IARD;AASP,kBAAU,IATH;AAUP,oBAAY;AAVL,KAlDc;AA8DzB,aAAS;AACL,iBAAS,IADJ;AAEL,aAAK;AAFA,KA9DgB;AAkEzB,WAAO;AACH,eAAO,CAAC,OAAD;AADJ,KAlEkB;AAqEzB,aAAS;AACL,eAAO,aADF;AAEL,eAAO,aAFF;AAGL,eAAO,aAHF;AAIL,cAAM,WAJD;AAKL,sBAAc,uBALT;AAML,iBAAS,cANJ;AAOL,iBAAS,eAPJ;AAQL,eAAO,aARF;AASL,iBAAS,eATJ;AAUL,eAAO,eAVF;AAWL,iBAAS,iBAXJ;AAYL,kBAAU,kBAZL;AAaL,kBAAU,kBAbL;AAcL,kBAAU,WAdL;AAeL,sBAAc,qBAfT;AAgBL,oBAAY;AACR,qBAAS,0BADD;AAER,oBAAQ;AAFA;AAhBP,KArEgB;AA0FzB,YAAQ,CAAC,OAAD,EAAU,OAAV,EAAmB,UAAnB,EAA+B,SAA/B,EAA0C,SAA1C,EAAqD,SAArD,EAAgE,SAAhE,EAA2E,gBAA3E,EAA6F,WAA7F,EAA0G,YAA1G,EAAwH,gBAAxH,EAA0I,YAA1I,EAAwJ,cAAxJ,EAAwK,MAAxK,EAAgL,OAAhL,EAAyL,OAAzL,EAAkM,SAAlM,EAA6M,QAA7M,EAAuN,SAAvN,CA1FiB;AA2FzB;AACA,eAAW;;AA5Fc,CAAtB;AA+FA,SAAS,mBAAT,GAA+B;AAClC,WAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,aAAlB,CAAP;AACH;;;;;ACjGD,OAAO,OAAP,GAAiB,QAAQ,cAAR,EAAwB,OAAzC;;;;;;;;;;ACAA;;;;;;AAEO,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,MAAD,EAAY;AAAA,MAC/B,QAD+B,GAClB,MADkB,CAC/B,QAD+B;;AAEvC,MAAM,OAAO,CAAC,4CAAD,EACX,kCADW,EAEX,sCAFW,EAGX,sCAHW,EAIX,wCAJW,EAKX,QALW,EAMX,iDANW,CAAb;AAOA,OAAK,IAAL,CAAU,2HAAV,EACE,QADF,EAEE,+CAFF,EAGE,2BAHF,EAIE,kyBAJF,EAKE,WALF,EAME,gDANF,EAOE,0BAPF,EAQE,qxCARF,EASE,aATF,EAUE,yDAVF,EAWE,qCAXF,EAYE,w8CAZF,EAaE,YAbF,EAcE,0DAdF,EAeE,8BAfF,EAgBE,wZAhBF,EAiBE,4aAjBF,EAkBE,kZAlBF,EAmBE,mbAnBF,EAoBE,WApBF,EAqBE,UArBF,EAsBE,UAtBF;AAuBA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,YAAxB,CAAJ,EAA2C;AACzC,SAAK,IAAL,CAAU,oDAAV,EACE,4BADF,EAEE,wBAFF,EAGE,0BAHF,EAIE,2BAJF,EAKE,QALF,EAME,QANF,EAOE,QAPF;AAQD;;AAGD,OAAK,IAAL,CAAU,sCAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,UAAxB,CAAJ,EAAyC;AACvC,SAAK,IAAL,CACE,4CADF,EAEE,yHAFF,EAGE,mFAHF,EAIE,gEAJF,EAKE,+BALF,EAME,aANF,EAOE,QAPF;AASD;AACD,OAAK,IAAL,CAAU,8BAAV;AACA,OAAK,IAAL,CAAU,6BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,4BADF,EAEE,wBAFF,EAGE,4CAHF,EAIE,8CAJF,EAKE,QALF,EAME,QANF;AAQD;AACD,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,iCADF,EAEE,8CAFF,EAGE,wCAHF,EAIE,2CAJF,EAKE,QALF;AAOD;AACD,OAAK,IAAL,CAAU,QAAV,EA7EuC,CA6EpB;AACnB,OAAK,IAAL,CAAU,8BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,YAAxB,CAAJ,EAA2C;AACzC,SAAK,IAAL,CACE,2DADF,EAEE,oCAFF,EAGE,iDAHF,EAIE,QAJF,EAKE,qCALF,EAME,mDANF,EAOE,QAPF,EAQE,QARF;AAUD;AACD,OAAK,IAAL,CAAU,+BAAV;AACA,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,MAAxB,CAAJ,EAAqC;AACnC,SAAK,IAAL,CACE,8CADF,EAEE,0BAFF,EAGE,uCAHF,EAIE,QAJF,EAKE,2BALF,EAME,wCANF,EAOE,QAPF,EAQE,QARF;AAUD;AACD,MAAI,eAAM,OAAN,CAAc,QAAd,EAAwB,QAAxB,CAAJ,EAAuC;AACrC,SAAK,IAAL,CACE,qCADF,EAEE,mHAFF,EAGE,iFAHF,EAIE,QAJF;AAMD;AACD,OAAK,IAAL,CAAU,QAAV,EAhHuC,CAgHpB;;AAEnB,OAAK,IAAL,CAAU,QAAV,EAlHuC,CAkHpB;;AAEnB,OAAK,IAAL,CAAU,QAAV,EApHuC,CAoHpB;AACnB,OAAK,IAAL,CAAU,QAAV,EArHuC,CAqHpB;AACnB,SAAO,KAAK,IAAL,CAAU,EAAV,CAAP;AACD,CAvHM;;;;;;;;;;;ACFP;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AADkC;;;AAGlC,IAAM,UAAU,SAAhB;;IACM,O;AACJ,mBAAY,MAAZ,EAAoB,OAApB,EAA6B;AAAA;;AAC3B,SAAK,GAAL,GAAW,aAAX;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,KAAL,GAAa,MAAb;AACA,QAAI,QAAQ,IAAR,CAAa,OAAO,GAApB,CAAJ,EAA8B;AAC5B,WAAK,QAAL,GAAgB,KAAK,aAAL,CAAmB,MAAnB,CAAhB;AACD;AACD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,OAAL;AACD;;;;4BACO;AACN,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,KAAT;AACD;;;2BACM;AACL,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,IAAT;AACD;;;2BACM;AACL,UAAM,WAAW,KAAK,SAAtB;AACA,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,CAAc,MAAd;AACA,aAAK,QAAL,CAAc,kBAAd;AACA,aAAK,QAAL,GAAgB,IAAhB;AACD;AACD,eAAS,IAAT;AACD;;;iCACY;AACX,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,UAAT;AACD;;;qCACgB;AACf,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,cAAT;AACD;;;8BAgGS;AACR,UAAI,KAAK,SAAT,EAAoB;AAClB;AACD;AACD,UAAM,UAAU,KAAK,KAArB;AACA,UAAM,UAAU,KAAK,OAArB;AACA,UAAI,OAAO,EAAX;;AAEA,UAAI;AAAE,eAAO,KAAK,KAAL,CAAW,QAAQ,YAAR,CAAqB,YAArB,CAAX,CAAP;AAAwD,OAA9D,CACA,OAAO,CAAP,EAAU,CAAG;AACb,UAAM,SAAS,eAAM,MAAN,CAAa,EAAb,yBAA2B,OAA3B,EAAoC,IAApC,CAAf;AACA,UAAI,CAAC,OAAO,OAAZ,EAAqB;AACnB,eAAO,IAAP;AACD;AACD,UAAM,SAAS,qBAAW,OAAX,EAAoB,MAApB,CAAf;AACA,UAAM,WAAW,OAAO,KAAP,EAAjB;AACA,UAAI,OAAO,KAAX,EAAkB;AAChB,YAAM,SAAS,OAAO,MAAP,CAAc,MAAd,CAAqB,CAAC,OAAD,EAAS,OAAT,EAAkB,aAAlB,EAAiC,iBAAjC,EAAoD,gBAApD,EAAsE,iBAAtE,EAAyF,kBAAzF,CAArB,CAAf;AACA,yBAAM,OAAN,CAAc,SAAS,YAAT,EAAd,EAAuC,OAAO,IAAP,CAAY,GAAZ,CAAvC,EAAyD,UAAU,KAAV,EAAiB;AACxE,2BAAI,CAAJ,CAAM,KAAK,GAAX,EAAe,CAAC,OAAO,SAAR,EAAmB,QAAnB,EAA6B,MAAM,IAAnC,EAAyC,IAAzC,CAA8C,GAA9C,CAAf;AACD,SAFD;AAGD;AACD,WAAK,SAAL,GAAiB,QAAjB;AACD;;;kCACa,G,EAAK;AAAA;;AACjB,UAAM,eAAe;AACnB,gBAAQ,KADW;AAEnB,cAAM,KAFa;AAGnB,aAAK;AAHc,OAArB;AAKA,UAAM,eAAe;AACnB,sBAAc,KADK;AAEnB,kCAA0B,IAFP;AAGnB,0BAAkB,MAAM,IAHL;AAInB,2BAAmB;AAJA,OAArB;AAMA,UAAM,SAAS,cAAM,YAAN,CAAmB,YAAnB,EAAiC,YAAjC,CAAf;AACA,aAAO,EAAP,CAAU,cAAM,MAAN,CAAa,KAAvB,EAA8B,UAAU,CAAV,EAAa,CAAb,EAAgB;AAC5C,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,aAAa,CAAb,GAAiB,KAAjB,GAAyB,CAAzC;AACA,eAAO,MAAP;AACD,OAHD;AAIA,aAAO,EAAP,CAAU,cAAM,MAAN,CAAa,eAAvB,EAAwC;AAAA,eAAK,iBAAI,CAAJ,CAAM,MAAK,GAAX,EAAgB,SAAS,EAAE,KAAF,GAAU,EAAnB,IAAyB,EAAzB,GAA8B,MAA9C,CAAL;AAAA,OAAxC;;AAEA,aAAO,kBAAP,CAA0B,KAAK,KAA/B;AACA,aAAO,IAAP;AACA,aAAO,MAAP;AACD;;;wBA7IkB;AACjB,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,SAAT,EAAP;AACD;;;wBACgB;AACf,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,OAAT,EAAP;AACD;;;wBACe;AACd,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,YAAT,EAAP;AACD;;;wBACU;AACT,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,OAAhB;AACD;;;wBACY;AACX,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,SAAT,EAAP;AACD,K;sBA2DU,M,EAAQ;AACjB,UAAI,CAAC,SAAG,MAAH,CAAU,MAAV,CAAL,EAAwB;AACtB;AACD;AACD,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,YAAT,CAAsB,MAAtB;AACD;;;wBAhEY;AACX,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,SAAT,EAAP;AACD,K;sBA+CU,K,EAAO;AAChB,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,SAAT,CAAmB,KAAnB,CAAP;AACD;;;wBAjDc;AACb,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,WAAT,EAAP;AACD;;;wBACiB;AAChB,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,cAAT,EAAP;AACD,K;sBA2Ce,K,EAAO;AACrB,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,IAAT,CAAc,KAAd;AACD;;;wBA7CgB;AACf,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,YAAT,MAA2B,KAAlC;AACD,K;sBAyBc,U,EAAY;AACzB,UAAI,CAAC,SAAG,OAAH,CAAW,UAAX,CAAL,EAA6B;AAC3B;AACD;;AAED,UAAM,WAAW,KAAK,SAAtB;AACA,UAAK,CAAC,SAAS,YAAT,EAAD,IAA4B,UAA7B,IAA6C,SAAS,YAAT,MAA2B,CAAC,UAA7E,EAA0F;AACxF,iBAAS,gBAAT;AACD;AACF;;;wBAjCW;AACV,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,OAAT,EAAP;AACD,K;sBA8CS,K,EAAO;AACf,UAAI,CAAC,SAAG,OAAH,CAAW,KAAX,CAAL,EAAwB;AACtB;AACD;AACD,UAAM,WAAW,KAAK,SAAtB;AACA,UAAK,CAAC,SAAS,OAAT,EAAD,IAAuB,KAAxB,IAAmC,SAAS,OAAT,MAAsB,CAAC,KAA9D,EAAsE;AACpE,iBAAS,UAAT,CAAoB,KAApB;AACD;AAEF;;;wBAtDS;AACR,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,SAAT,EAAP;AACD,K;sBAKO,M,EAAQ;AACd,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,CAAc,MAAd;AACA,aAAK,QAAL,CAAc,kBAAd;AACA,aAAK,QAAL,GAAgB,IAAhB;AACD;AACD,UAAM,WAAW,KAAK,SAAtB;AACA,eAAS,YAAT,CAAsB,MAAtB;AACA,UAAI,QAAQ,IAAR,CAAa,MAAb,CAAJ,EAA0B;AACxB,aAAK,QAAL,GAAgB,KAAK,aAAL,CAAmB,MAAnB,CAAhB;AACD;AACF;;;wBAfY;AACX,UAAM,WAAW,KAAK,SAAtB;AACA,aAAO,SAAS,QAAhB;AACD;;;;;;kBAgGY,O;;;;;;;;;;;AC3Lf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAHkC;;IAK5B,M;AACJ,kBAAY,KAAZ,EAAmB,MAAnB,EAA2B;AAAA;;AACzB,QAAM,UAAU,eAAM,WAAN,EAAhB;AACA,SAAK,GAAL,GAAW,QAAX;AACA,SAAK,OAAL,GAAe;AACb,kBADa,EACN;AADM,KAAf;AAGA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,WAAL,GAAmB,cAAE,UAAF,EAAnB;AACA,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,UAAL,GAAkB,MAAM,SAAN,CAAgB,IAAhB,CAAlB;AACD;;;;4BACO;AACN,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHM,UAKE,KALF,GAKY,MALZ,CAKE,KALF;;AAMN,UAAI,MAAM,EAAV;AACA,UAAI,KAAK,QAAT,EAAmB;AACjB,eAAO,IAAP;AACD;AACD,UAAI,CAAC,SAAG,WAAH,CAAe,KAAf,CAAL,EAA4B;AAC1B,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,uBAAhB;AACA;AACD;AACD,iCAAa,MAAb,EAAqB,OAArB;AACA,UAAM,UAAU,MAAM,OAAN,CAAc,WAAd,EAAhB;AACA,aAAO,IAAP,GAAc,OAAd;AACA,aAAO,WAAP,GAAsB,MAAM,YAAN,CAAmB,aAAnB,MAAsC,IAA5D;AACA,aAAO,QAAP,GAAmB,OAAO,QAAP,IAAoB,MAAM,YAAN,CAAmB,UAAnB,MAAmC,IAA1E;AACA,aAAO,IAAP,GAAe,OAAO,IAAP,IAAgB,MAAM,YAAN,CAAmB,MAAnB,MAA+B,IAA9D;AACA,aAAO,SAAP,GAAmB,eAAM,SAAN,CAAgB,OAAO,IAAvB,CAAnB;AACA,UAAI,CAAC,OAAO,SAAP,CAAiB,KAAtB,EAA6B;AAC3B;AACD;AACD,aAAO,SAAP,GAAmB,cAAE,IAAF,CAAO,KAAP,EAAc,SAAS,aAAT,CAAuB,KAAvB,CAAd,CAAnB;AACA,aAAO,SAAP,CAAiB,YAAjB,CAA8B,UAA9B,EAA0C,CAA1C;AACA,WAAK,gBAAL;;AAEA,uBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,KAAK,OAAO,OAAP,CAAe,IAApB,GAA2B,GAA3B,GAAiC,OAAO,OAAP,CAAe,OAAhE;AACA,WAAK,WAAL;AACA,UAAI,eAAM,OAAN,CAAc,OAAO,KAAP,CAAa,KAA3B,EAAkC,OAAO,IAAzC,CAAJ,EAAoD;AAClD,aAAK,eAAL;;AAEA,aAAK,MAAL;AACD;AACD,WAAK,QAAL,GAAgB,IAAhB;AACA,YAAM;AACJ,kBAAU,KAAK,QADX;AAEJ,iBAAS,OAAO,IAFZ;AAGJ,qBAAa,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAHT;AAIJ,cAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAJF;AAKJ,eAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CALH;AAMJ,cAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CANF;AAOJ,cAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAPF;AAQJ,mBAAW,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CARP;AASJ,oBAAY,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CATR;AAUJ,oBAAY,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAVR;AAWJ,0BAAkB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAXd;AAYJ,wBAAgB,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAZZ;AAaJ,sBAAc,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAbV;AAcJ,sBAAc,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAdV;AAeJ,mBAAW,qBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,GAApB;AAAyB,SAf9C;AAgBJ,mBAAW,qBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,YAAb,CAA0B,QAA1B,CAAP;AAA4C,SAhBjE;AAiBJ,sBAAc,wBAAY;AAAE,iBAAO,OAAO,YAAP,IAAuB,KAA9B;AAAsC,SAjB9D;AAkBJ,sBAAc,wBAAY;AAAE,iBAAO,OAAO,SAAd;AAAyB,SAlBjD;AAmBJ,kBAAU,oBAAY;AAAE,iBAAO,OAAO,KAAd;AAAsB,SAnB1C;AAoBJ,wBAAgB,0BAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,WAApB;AAAkC,SApB5D;AAqBJ,mBAAW,qBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,MAApB;AAA6B,SArBlD;AAsBJ,iBAAS,mBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,KAApB;AAA4B,SAtB/C;AAuBJ,iBAAS,mBAAY;AAAE,iBAAO,cAAE,QAAF,CAAW,OAAO,SAAlB,EAA6B,OAAO,OAAP,CAAe,KAA5C,CAAP;AAA4D,SAvB/E;AAwBJ,mBAAW,qBAAY;AAAE,iBAAO,cAAE,QAAF,CAAW,OAAO,SAAlB,EAA6B,OAAO,OAAP,CAAe,OAA5C,CAAP;AAA8D,SAxBnF;AAyBJ,kBAAU,oBAAY;AAAE,iBAAO,OAAO,KAAP,CAAa,MAApB;AAA6B,SAzBjD;AA0BJ,YAAI,YAAU,KAAV,EAAiB,QAAjB,EAA2B;AAAE,2BAAM,OAAN,CAAc,OAAO,SAArB,EAAgC,KAAhC,EAAuC,QAAvC,EAAkD,OAAO,IAAP;AAAc,SA1B7F;AA2BJ,iBAAS,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB;AA3BL,OAAN;AA6BA,aAAO,GAAP;AACD;;;4BACO;AACN,WAAK,MAAL;AACA,WAAK,KAAL;AACD;;;6BACQ;AAAA;;AACP,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFO,UAGC,KAHD,GAGsB,MAHtB,CAGC,KAHD;AAAA,UAGQ,SAHR,GAGsB,MAHtB,CAGQ,SAHR;;AAKP;;AACA,aAAO,UAAP,CAAkB,YAAM;AACtB,cAAK,aAAL,CAAmB,KAAnB,EAA0B,OAA1B;AACD,OAFD,EAEG,CAFH;;AAIA;AACA,oBAAE,WAAF,CAAc,KAAd,EAAqB,sBAAS,OAAT,CAAiB,KAAtC,EAA6C,IAA7C;;AAEA;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,OAAO,OAAP,CAAe,KAAxC,EAA+C,IAA/C;;AAEA;AACA,UAAI,OAAO,QAAX,EAAqB;AACnB,aAAK,KAAL;AACD;AACF;;;kCACa;AACZ,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,WAAW,KAAK,SAAtB;AAHY,UAIJ,KAJI,GAIM,MAJN,CAIJ,KAJI;;;AAMZ,UAAI,CAAC,KAAL,EAAY;AACV,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,yBAAhB;AACA;AACD;AATW,UAUJ,QAVI,GAUkB,MAVlB,CAUJ,QAVI;AAAA,UAUM,OAVN,GAUkB,MAVlB,CAUM,OAVN;AAAA,UAWJ,SAXI,GAWoC,MAXpC,CAWJ,SAXI;AAAA,UAWO,IAXP,GAWoC,MAXpC,CAWO,IAXP;AAAA,UAWa,OAXb,GAWoC,MAXpC,CAWa,OAXb;AAAA,UAWsB,SAXtB,GAWoC,MAXpC,CAWsB,SAXtB;AAAA,UAYJ,OAZI,GAY0D,OAZ1D,CAYJ,OAZI;AAAA,UAYK,KAZL,GAY0D,OAZ1D,CAYK,KAZL;AAAA,UAYY,QAZZ,GAY0D,OAZ1D,CAYY,QAZZ;AAAA,UAYsB,OAZtB,GAY0D,OAZ1D,CAYsB,OAZtB;AAAA,UAY+B,QAZ/B,GAY0D,OAZ1D,CAY+B,QAZ/B;AAAA,UAYyC,YAZzC,GAY0D,OAZ1D,CAYyC,YAZzC;AAAA,UAaJ,KAbI,GAamC,OAbnC,CAaJ,KAbI;AAAA,UAaG,QAbH,GAamC,OAbnC,CAaG,QAbH;AAAA,UAaa,OAbb,GAamC,OAbnC,CAaa,OAbb;AAAA,UAasB,QAbtB,GAamC,OAbnC,CAasB,QAbtB;;AAcZ,UAAI,UAAU,IAAd,EAAoB;AAClB,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,IAAR,CAAa,OAAb,CAAqB,KAArB,EAA4B,IAA5B,CAAzB,EAA4D,IAA5D;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,OAAzB,EAAkC,QAAlC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,KAAzB,EAAgC,KAAhC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAzB,EAAmC,QAAnC;AACA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,OAAzB,EAAkC,OAAlC;;AAEA;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAzB,EAAmC,QAAnC;AACA,YAAI,OAAO,IAAP,KAAgB,OAApB,EAA6B;AAC3B,cAAM,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAhB;AACA,kBAAQ,YAAR,CAAqB,OAArB,EAA8B,YAA9B;AACA,wBAAE,IAAF,CAAO,OAAO,KAAd,EAAqB,OAArB;AACA;AACA,iBAAO,cAAP,GAAwB,OAAxB;AACD;AACF;AACF;;;sCACiB;AAChB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;AAHgB,UAIR,KAJQ,GAIE,MAJF,CAIR,KAJQ;;AAKhB,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,OAAO,SAAP,CAAiB,gBAAjB,CAAkC,QAAlC,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA,UAAI,CAAC,OAAO,SAAP,CAAiB,IAAtB,EAA4B;AAC1B,yBAAI,CAAJ,CAAM,KAAK,GAAX,EAAgB,oBAAhB,EAAsC,OAAO,IAA7C;;AAEA;AACA,sBAAE,aAAF,CAAgB,YAAY,OAAO,SAAP,CAAiB,QAAjB,CAA0B,OAAtC,CAAhB;AACA;AACA,aAAK,qBAAL,CAA2B,IAA3B;AACA;AACA;AACD;AACD,UAAM,kBAAkB,CAAC,aAAa,OAAO,SAAP,CAAiB,QAAjB,CAA0B,OAAvC,EAAgD,MAAzE;AACA,UAAI,eAAJ,EAAqB;AACnB;AACA,aAAK,eAAL;AACD;AACD,UAAI,CAAC,KAAK,aAAL,EAAL,EAA2B;AACzB;AACD;AACD,UAAI,eAAJ,EAAqB;AACnB,aAAK,iBAAL;AACD;AACD,WAAK,eAAL;AACA,WAAK,qBAAL,CAA2B,KAA3B;AACA,WAAK,WAAL;AACA;AACA,WAAK,UAAL;;AAEA,WAAK,aAAL;;AAEA,WAAK,aAAL;AACD;;;sCACiB;AAAA;;AAChB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFgB,UAIR,KAJQ,GAIsB,MAJtB,CAIR,KAJQ;AAAA,UAID,OAJC,GAIsB,MAJtB,CAID,OAJC;AAAA,UAIQ,SAJR,GAIsB,MAJtB,CAIQ,SAJR;;AAKhB,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,UAAU,gBAAV,CAA2B,QAA3B,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA;AACA,uBAAM,OAAN,CAAc,KAAd,EAAqB,oBAArB,EAA2C,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA3C;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,+BAArB,EAAsD,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAtD;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,kBAArB,EAAyC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAzC;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,kBAArB,EAAyC,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAzC;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,wBAArB,EAA+C,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAA/C;;AAEA,uBAAM,OAAN,CAAc,KAAd,EAAqB,cAArB,EAAqC,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArC;AACA,UAAI,OAAO,WAAX,EAAwB;AACtB,YAAM,eAAe,YAAY,MAAM,OAAO,OAAP,CAAe,YAAjC,CAArB;AACA,YAAI,CAAC,YAAL,EAAmB;AACjB;AACD;AACD,qBAAa,KAAb,CAAmB,MAAnB,GAA4B,SAA5B;AACA,yBAAM,OAAN,CAAc,YAAd,EAA4B,OAA5B,EAAqC,YAAM;AACzC;AACA,cAAI,OAAO,YAAP,IAAuB,QAAQ,OAA/B,IAA0C,CAAC,MAAM,MAArD,EAA6D;AAC3D;AACD;;AAED,cAAI,MAAM,MAAV,EAAkB;AAChB,mBAAK,KAAL;AACD,WAFD,MAEO,IAAI,MAAM,KAAV,EAAiB;AACtB,mBAAK,KAAL;AACA,mBAAK,KAAL;AACD,WAHM,MAGA;AACL,mBAAK,MAAL;AACD;AACF,SAdD;AAeD;AACD,UAAI,OAAO,kBAAX,EAA+B;AAC7B,yBAAM,OAAN,CAAc,KAAd,EAAqB,aAArB,EAAoC,UAAU,KAAV,EAAiB;AAAE,gBAAM,cAAN;AAAyB,SAAhF;AACD;AACD,uBAAM,OAAN,CAAc,KAAd,EAAqB,OAAO,MAAP,CAAc,MAAd,CAAqB,CAAC,OAAD,EAAU,SAAV,EAAoB,OAApB,CAArB,EAAmD,IAAnD,CAAwD,GAAxD,CAArB,EAAoF,UAAC,KAAD,EAAU;AAC5F,eAAK,aAAL,CAAmB,SAAnB,EAA8B,MAAM,IAApC,EAA0C,IAA1C;AACD,OAFD;AAID;;;6BACQ,Q,EAAU,O,EAAS;AAC1B,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,WAAW,KAAK,SAAtB;;AAEA,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,eAAO,IAAP;AACD;AACD,WAAK,qBAAL,CAA2B,IAA3B;AACA,mBAAa,KAAK,OAAL,CAAa,OAA1B;;AAEA,UAAI,CAAC,SAAG,OAAH,CAAW,OAAX,CAAL,EAA0B;AACxB,kBAAU,IAAV;AACD;;AAED;AACA,UAAI,SAAG,QAAH,CAAY,QAAZ,CAAJ,EAA2B;AACzB,iBAAS,IAAT,CAAc,QAAd;AACD;;AAED;AACA,UAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED;AACA,WAAK,QAAL,GAAgB,KAAhB;AACA,aAAO,SAAP,CAAiB,UAAjB,CAA4B,YAA5B,CAAyC,QAAzC,EAAmD,OAAO,SAA1D;AACA,eAAS,IAAT,CAAc,KAAd,CAAoB,QAApB,GAA+B,EAA/B;;AAEA,WAAK,aAAL,CAAmB,QAAnB,EAA6B,WAA7B,EAA0C,IAA1C;AAED;;;kCACa,M,EAAQ;AACpB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFoB,UAGZ,KAHY,GAGF,MAHE,CAGZ,KAHY;;AAIpB,UAAI,CAAC,MAAD,IAAW,CAAC,SAAG,MAAH,CAAU,MAAV,CAAhB,EAAmC;AACjC;AACD;AACD,WAAK,KAAL;AACA,WAAK,kBAAL;AACA;AACA,WAAK,YAAL;AACA,YAAM,GAAN,GAAY,MAAZ;AACD;;;kCACa,M,EAAQ;AACpB,UAAM,SAAS,KAAK,OAApB;AADoB,UAEZ,KAFY,GAEI,MAFJ,CAEZ,KAFY;AAAA,UAEL,IAFK,GAEI,MAFJ,CAEL,IAFK;;AAGpB,UAAI,SAAS,OAAb,EAAsB;AACpB,cAAM,YAAN,CAAmB,QAAnB,EAA6B,MAA7B;AACD;AACF;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;AAHc,UAIN,KAJM,GAI2C,MAJ3C,CAIN,KAJM;AAAA,UAIC,SAJD,GAI2C,MAJ3C,CAIC,SAJD;AAAA,UAIY,OAJZ,GAI2C,MAJ3C,CAIY,OAJZ;AAAA,UAIqB,SAJrB,GAI2C,MAJ3C,CAIqB,SAJrB;AAAA,UAIgC,MAJhC,GAI2C,MAJ3C,CAIgC,MAJhC;AAAA,UAKN,KALM,GAKI,KALJ,CAKN,KALM;AAAA,UAMN,OANM,GAMM,MANN,CAMN,OANM;AAOd;;AACA,UAAI,WAAW,QAAQ,CAAR,GAAa,MAAM,MAAN,GAAe,OAAO,SAAlD;;AAEA;AACA,UAAI,UAAU,IAAd,EAAoB;AAClB,YAAI,OAAO,KAAX,EAAkB;AAChB,iBAAO,KAAP,CAAa,KAAb,GAAqB,QAArB;AACD;AACD,YAAI,OAAO,OAAX,EAAoB;AAClB,iBAAO,OAAP,CAAe,KAAf,GAAuB,QAAvB;AACD;AACF;;AAED;AACA,kCAAc,EAAE,QAAQ,QAAV,EAAd,EAAoC,MAApC,EAA4C,OAA5C;;AAEA;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,KAAjC,EAAyC,aAAa,CAAtD;;AAEA;AACA,UAAI,UAAU,IAAV,IAAkB,QAAQ,IAA9B,EAAoC;AAClC,aAAK,YAAL,CAAkB,QAAQ,IAA1B,EAAiC,WAAW,CAA5C;AACD;AACF;;;kCACa,K,EAAO;AAAA;;AACnB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAEA,UAAM,UAAW,MAAM,IAAN,KAAe,SAAhC;AALmB,UAMX,SANW,GAMG,MANH,CAMX,SANW;AAAA,UAOX,OAPW,GAOC,MAPD,CAOX,OAPW;AAQnB;;AACA,mBAAa,OAAO,OAApB;;AAEA;AACA,aAAO,OAAP,GAAiB,WAAW,YAAM;AAChC;AACA,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,OAA1C;;AAEA;AACA,eAAK,eAAL,CAAqB,OAArB;AACD,OANgB,EAMb,UAAU,GAAV,GAAgB,CANH,CAAjB;AAOD;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFc,UAIN,KAJM,GAIe,MAJf,CAIN,KAJM;AAAA,UAIC,SAJD,GAIe,MAJf,CAIC,SAJD;AAAA,UAKN,OALM,GAKM,MALN,CAKN,OALM;AAAA,UAMN,MANM,GAMK,KANL,CAMN,MANM;;AAOd,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,CAAC,MAA3C;;AAEA,oBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,OAAjC,EAA0C,MAA1C;;AAEA,WAAK,eAAL,CAAqB,MAArB;AACD;;;4BACO;AACN,UAAM,SAAS,KAAK,OAApB;AADM,UAEE,KAFF,GAEY,MAFZ,CAEE,KAFF;;AAGN,UAAI,UAAU,KAAd,EAAqB;AACnB,cAAM,IAAN;AACD;AACF;;;6BACQ;AACP,UAAM,SAAS,KAAK,OAApB;AADO,UAEC,KAFD,GAEW,MAFX,CAEC,KAFD;;AAGP,UAAI,WAAW,KAAf,EAAsB;AACpB,cAAM,KAAN;AACD;AACF;;;gCACW,M,EAAQ;AAClB,UAAM,SAAS,KAAK,OAApB;AADkB,UAEV,KAFU,GAEA,MAFA,CAEV,KAFU;AAGlB;;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,MAAX,CAAL,EAAyB;AACvB,iBAAS,MAAM,MAAf;AACD;;AAED,UAAI,MAAJ,EAAY;AACV,aAAK,KAAL;AACD,OAFD,MAEO;AACL,aAAK,MAAL;AACD;AACD,aAAO,MAAP;AACD;;;mCACc;AACb,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFa,UAGL,KAHK,GAGK,MAHL,CAGL,KAHK;;AAKb;;AACA,UAAI,WAAW,SAAS,OAAO,QAAhB,CAAf;;;AAEE;AACA,sBAAgB,CAHlB;;AAKA;AACA,UAAI,MAAM,QAAN,KAAmB,IAAnB,IAA2B,CAAC,MAAM,MAAM,QAAZ,CAAhC,EAAuD;AACrD,wBAAgB,MAAM,QAAtB;AACD;;AAED;AACA,aAAQ,MAAM,QAAN,IAAkB,aAAlB,GAAkC,QAA1C;AACD;;;0BACK,K,EAAO;AACX,UAAM,SAAS,KAAK,OAApB;AADW,UAEH,KAFG,GAEO,MAFP,CAEH,KAFG;;AAGX,UAAI,aAAa,CAAjB;AAAA,UACE,SAAS,MAAM,MADjB;AAAA,UAEE,WAAW,KAAK,YAAL,EAFb;;AAIA,UAAI,SAAG,MAAH,CAAU,KAAV,CAAJ,EAAsB;AACpB,qBAAa,KAAb;AACD,OAFD,MAEO,IAAI,SAAG,MAAH,CAAU,KAAV,KAAoB,eAAM,OAAN,CAAc,CAAC,OAAD,EAAU,QAAV,CAAd,EAAmC,MAAM,IAAzC,CAAxB,EAAwE;AAC7E;AACA;AACA,qBAAe,MAAM,MAAN,CAAa,KAAb,GAAqB,MAAM,MAAN,CAAa,GAAnC,GAA0C,QAAxD;AACD;AACD,UAAI,aAAa,CAAjB,EAAoB;AAClB,qBAAa,CAAb;AACD,OAFD,MAEO,IAAI,aAAa,QAAjB,EAA2B;AAChC,qBAAa,QAAb;AACD;AACD,WAAK,kBAAL,CAAwB,UAAxB;AACA,UAAI;AACF,cAAM,WAAN,GAAoB,WAAW,OAAX,CAAmB,CAAnB,CAApB;AACD,OAFD,CAGA,OAAO,CAAP,EAAU,CAAG;AACd;;;+BACU,M,EAAQ;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKC,MALD,CAKT,KALS;;AAMjB,UAAM,MAAM,OAAO,SAAnB;AAAA,UACE,MAAM,OAAO,SADf;;AAGA;AACA,UAAI,SAAG,SAAH,CAAa,MAAb,CAAJ,EAA0B;AACxB,iBAAS,QAAQ,MAAjB;AACD;;AAED;AACA,UAAI,WAAW,IAAX,IAAmB,MAAM,MAAN,CAAvB,EAAsC;AACpC,iBAAS,OAAO,MAAhB;AACD;;AAED;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,iBAAS,GAAT;AACD;AACD;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,iBAAS,GAAT;AACD;AACD;AACA,YAAM,MAAN,GAAe,WAAW,SAAS,GAApB,CAAf;;AAEA;AACA,UAAI,OAAO,MAAP,CAAc,OAAlB,EAA2B;AACzB,eAAO,MAAP,CAAc,OAAd,CAAsB,KAAtB,GAA8B,MAA9B;AACD;AACD;AACA,UAAI,WAAW,CAAf,EAAkB;AAChB,cAAM,KAAN,GAAc,IAAd;AACD,OAFD,MAEO,IAAI,MAAM,KAAN,IAAe,SAAS,CAA5B,EAA+B;AACpC,aAAK,WAAL;AACD;AACF;;;gCACW,K,EAAO;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKC,MALD,CAKT,KALS;;AAMjB,UAAI,CAAC,SAAG,OAAH,CAAW,KAAX,CAAL,EAAwB;AACtB,gBAAQ,CAAC,MAAM,KAAf;AACD;;AAED;AACA,WAAK,YAAL,CAAkB,OAAO,OAAP,CAAe,IAAjC,EAAuC,KAAvC;;AAEA;AACA,YAAM,KAAN,GAAc,KAAd;;AAEA;AACA,UAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAK,UAAL,CAAgB,OAAO,MAAvB;AACD;AAEF;;;iCACY,M,EAAQ,K,EAAO;AAC1B;AACA,UAAI,CAAC,MAAL,EAAa;AACX;AACD;AACD;AACA,cAAS,SAAG,OAAH,CAAW,KAAX,IAAoB,KAApB,GAA4B,CAAC,OAAO,YAAP,CAAoB,cAApB,CAAtC;;AAEA;AACA,aAAO,YAAP,CAAoB,cAApB,EAAoC,KAApC;AACA,aAAO,KAAP;AACD;;;gCACW,K,EAAO;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFiB,UAGT,KAHS,GAGC,MAHD,CAGT,KAHS;AAIjB;;AACA,WAAK,kBAAL,CAAwB,MAAM,WAA9B,EAA2C,OAAO,WAAlD;;AAEA;AACA,UAAI,SAAS,MAAM,IAAN,KAAe,YAAxB,IAAwC,MAAM,OAAlD,EAA2D;AACzD;AACD;AACD;AACA,WAAK,eAAL,CAAqB,KAArB;AACD;;;oCACe,K,EAAO;AAAA;;AACrB,UAAM,SAAS,KAAK,OAApB;AADqB,UAEb,KAFa,GAEqC,MAFrC,CAEb,KAFa;AAAA,UAEN,QAFM,GAEqC,MAFrC,CAEN,QAFM;AAAA,UAEI,QAFJ,GAEqC,MAFrC,CAEI,QAFJ;AAAA,UAEc,OAFd,GAEqC,MAFrC,CAEc,OAFd;AAAA,UAEuB,SAFvB,GAEqC,MAFrC,CAEuB,SAFvB;;AAGrB,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED,UAAI,aAAa,SAAS,MAA1B;AAAA,UACE,UAAU,CADZ;AAAA,UAEE,WAAW,KAAK,YAAL,EAFb;AAGA,UAAI,KAAJ,EAAW;AACT,gBAAQ,MAAM,IAAd;AACE,eAAK,YAAL;AACA,eAAK,SAAL;AACE,gBAAI,SAAS,OAAb,EAAsB;AACpB;AACD;;AAED,sBAAU,KAAK,cAAL,CAAoB,MAAM,WAA1B,EAAuC,QAAvC,CAAV;;AAEA;AACA,gBAAI,MAAM,IAAN,KAAe,YAAf,IAA+B,QAAQ,IAA3C,EAAiD;AAC/C,sBAAQ,IAAR,CAAa,KAAb,GAAqB,OAArB;AACD;;AAED;AACF;AACA,eAAK,SAAL;AACA,eAAK,UAAL;AACE,yBAAa,SAAS,MAAtB;AACA,sBAAW,YAAM;AACf,kBAAI,WAAW,MAAM,QAArB;;AAEA,kBAAI,YAAY,SAAS,MAAzB,EAAiC;AAC/B;AACA,uBAAO,OAAK,cAAL,CAAoB,SAAS,GAAT,CAAa,CAAb,CAApB,EAAqC,QAArC,CAAP;AACD;AACD,qBAAO,CAAP;AACD,aARS,EAAV;AASA;AA5BJ;AA8BD;AACD,WAAK,YAAL,CAAkB,UAAlB,EAA8B,OAA9B;AACD;;;iCACY,Q,EAAU,K,EAAO;AAC5B,UAAM,SAAS,KAAK,OAApB;AAD4B,UAEpB,SAFoB,GAEN,MAFM,CAEpB,SAFoB;;AAG5B,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,SAAG,SAAH,CAAa,KAAb,CAAJ,EAAyB;AACvB,gBAAQ,CAAR;AACD;AACD;AACA,UAAI,SAAG,SAAH,CAAa,QAAb,CAAJ,EAA4B;AAC1B,YAAI,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,MAAvC,EAA+C;AAC7C,qBAAW,OAAO,QAAP,CAAgB,MAA3B;AACD,SAFD,MAEO;AACL;AACD;AACF;;AAED;AACA,UAAI,SAAG,WAAH,CAAe,QAAf,CAAJ,EAA8B;AAC5B,iBAAS,KAAT,GAAiB,KAAjB;AACD,OAFD,MAEO,IAAI,QAAJ,EAAc;AACnB;AACA,YAAI,SAAS,GAAb,EAAkB;AAChB,mBAAS,GAAT,CAAa,KAAb,GAAqB,KAArB;AACD;AACD,YAAI,SAAS,IAAb,EAAmB;AACjB,mBAAS,IAAT,CAAc,SAAd,GAA0B,KAA1B;AACD;AACF;AACF;;;uCACkB,I,EAAM,O,EAAS;AAChC,UAAM,SAAS,KAAK,OAApB;;AAEA;AACA,UAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED;AACA,UAAI,MAAM,IAAN,CAAJ,EAAiB;AACf,eAAO,CAAP;AACD;;AAED,aAAO,IAAP,GAAc,SAAS,OAAO,EAAhB,CAAd;AACA,aAAO,IAAP,GAAc,SAAU,OAAO,EAAR,GAAc,EAAvB,CAAd;AACA,aAAO,KAAP,GAAe,SAAW,OAAO,EAAR,GAAc,EAAf,GAAqB,EAA9B,CAAf;;AAEA;AACA,UAAI,eAAgB,SAAW,KAAK,YAAL,KAAsB,EAAvB,GAA6B,EAA9B,GAAoC,EAA7C,IAAmD,CAAvE;;AAEA;AACA,aAAO,IAAP,GAAc,CAAC,MAAM,OAAO,IAAd,EAAoB,KAApB,CAA0B,CAAC,CAA3B,CAAd;AACA,aAAO,IAAP,GAAc,CAAC,MAAM,OAAO,IAAd,EAAoB,KAApB,CAA0B,CAAC,CAA3B,CAAd;;AAEA;AACA,cAAQ,SAAR,GAAoB,CAAC,eAAe,OAAO,KAAP,GAAe,GAA9B,GAAoC,EAArC,IAA2C,OAAO,IAAlD,GAAyD,GAAzD,GAA+D,OAAO,IAA1F;AACD;;;uCACkB,I,EAAM;AACvB;AACA,UAAI,CAAC,SAAG,MAAH,CAAU,IAAV,CAAL,EAAsB;AACpB,eAAO,CAAP;AACD;AACD,UAAM,SAAS,KAAK,OAApB;;AALuB,UAOf,QAPe,GAOO,MAPP,CAOf,QAPe;AAAA,UAOL,OAPK,GAOO,MAPP,CAOL,OAPK;;AAQvB,UAAI,WAAW,KAAK,YAAL,EAAf;AAAA,UACE,QAAQ,KAAK,cAAL,CAAoB,IAApB,EAA0B,QAA1B,CADV;;AAGA;AACA,UAAI,YAAY,SAAS,MAAzB,EAAiC;AAC/B,iBAAS,MAAT,CAAgB,KAAhB,GAAwB,KAAxB;AACD;;AAED;AACA,UAAI,WAAW,QAAQ,IAAvB,EAA6B;AAC3B,gBAAQ,IAAR,CAAa,KAAb,GAAqB,KAArB;AACD;AACF;;;uCACkB;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,UAAU,KAAK,QAArB;;AAHiB,UAKT,KALS,GAKmC,MALnC,CAKT,KALS;AAAA,UAKF,SALE,GAKmC,MALnC,CAKF,SALE;AAAA,UAKS,QALT,GAKmC,MALnC,CAKS,QALT;AAAA,UAKmB,WALnB,GAKmC,MALnC,CAKmB,WALnB;AAAA,UAMT,eANS,GAMW,MANX,CAMT,eANS;;AAOjB,UAAI,CAAC,UAAU,IAAf,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,aAAa,KAAK,YAAL,MAAuB,CAAxC;;AAEA;AACA,UAAI,CAAC,QAAD,IAAa,eAAb,IAAgC,MAAM,MAA1C,EAAkD;AAChD,aAAK,kBAAL,CAAwB,UAAxB,EAAoC,WAApC;AACD;;AAED;AACA,UAAI,QAAJ,EAAc;AACZ,aAAK,kBAAL,CAAwB,UAAxB,EAAoC,QAApC;AACD;AAEF;;;wCACmB;AAAA;;AAClB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,aAAa,KAAK,WAAxB;;AAHkB,UAKV,OALU,GAKwC,MALxC,CAKV,OALU;AAAA,UAKD,OALC,GAKwC,MALxC,CAKD,OALC;AAAA,UAKQ,MALR,GAKwC,MALxC,CAKQ,MALR;AAAA,UAKgB,SALhB,GAKwC,MALxC,CAKgB,SALhB;AAAA,UAK2B,QAL3B,GAKwC,MALxC,CAK2B,QAL3B;AAAA,UAMV,OANU,GAM2B,MAN3B,CAMV,OANU;AAAA,UAMD,SANC,GAM2B,MAN3B,CAMD,SANC;AAAA,UAMU,YANV,GAM2B,MAN3B,CAMU,YANV;;AAOlB,UAAM,aAAc,QAAQ,IAAR,GAAe,QAAf,GAA0B,OAA9C;AACA,UAAM,aAAa,SAAb,UAAa,GAAM;AACvB,YAAM,OAAO,OAAK,WAAL,EAAb;AACA,YAAI,UAAU,QAAQ,OAAO,MAAP,GAAgB,OAAxB,CAAd;AAAA,YACE,SAAS,QAAQ,OAAO,OAAP,GAAiB,MAAzB,CADX;;AAGA;AACA,YAAI,UAAU,OAAO,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,mBAAS,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAT;AACD,SAFD,MAEO;AACL,mBAAS,OAAO,CAAP,CAAT;AACD;AACD,YAAI,MAAJ,EAAY;AACV,cAAM,cAAc,cAAE,QAAF,CAAW,OAAX,EAAoB,QAAQ,QAA5B,CAApB;;AAEA,qBAAW,YAAY;AACrB,mBAAO,KAAP;AACA,gBAAI,WAAJ,EAAiB;AACf,4BAAE,WAAF,CAAc,OAAd,EAAuB,QAAQ,QAA/B,EAAyC,KAAzC;AACA,4BAAE,WAAF,CAAc,MAAd,EAAsB,QAAQ,QAA9B,EAAwC,IAAxC;AACD;AACF,WAND,EAMG,GANH;AAOD;AACF,OAtBD;AAuBA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,OAAlC,EAA2C,UAAU,IAArD,EAA2D,UAA3D;AACA;AACA,uBAAM,aAAN,CAAoB,QAAQ,KAA5B,EAAmC,OAAnC,EAA4C,UAAU,KAAtD,EAA6D,UAA7D;AACA;AACA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,UAAlC,EAA8C,UAAU,IAAxD,EAA8D,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAA9D;;AAEA,uBAAM,aAAN,CAAoB,OAAO,KAA3B,EAAkC,UAAlC,EAA8C,UAAU,MAAxD,EAAgE,YAAM;AACpE,eAAK,UAAL,CAAgB,OAAO,KAAP,CAAa,KAA7B;AACD,OAFD;AAGA,uBAAM,aAAN,CAAoB,QAAQ,IAA5B,EAAkC,OAAlC,EAA2C,UAAU,IAArD,EAA2D,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAA3D;;AAEA,uBAAM,aAAN,CAAoB,QAAQ,UAA5B,EAAwC,OAAxC,EAAiD,UAAU,UAA3D,EAAuE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAvE;;AAEA;AACA,UAAI,WAAW,kBAAf,EAAmC;AACjC,yBAAM,OAAN,CAAc,QAAd,EAAwB,WAAW,mBAAnC,EAAwD,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAxD;AACD;AACD,UAAI,YAAJ,EAAkB;AAChB;AACA,yBAAM,OAAN,CAAc,SAAd,EAAyB,2FAAzB,EAAsH,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAtH;;AAEA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,uBAAxB,EAAiD,UAAC,KAAD,EAAW;AAC1D,iBAAO,QAAP,CAAgB,KAAhB,GAAwB,MAAM,IAAN,KAAe,YAAvC;AACD,SAFD;;AAIA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,mDAAxB,EAA6E,UAAC,KAAD,EAAW;AACtF,iBAAO,QAAP,CAAgB,OAAhB,GAA0B,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,YAAd,CAAd,EAA2C,MAAM,IAAjD,CAA1B;AACD,SAFD;AAGA;AACA,yBAAM,OAAN,CAAc,QAAd,EAAwB,YAAxB,EAAsC,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAAtC,EAAuE,IAAvE;AACD;AACF;;;sCACiB;AAChB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFgB,UAIV,IAJU,GAIU,MAJV,CAIV,IAJU;AAAA,UAIJ,SAJI,GAIU,MAJV,CAIJ,SAJI;AAAA,UAMR,SANQ,GAMM,MANN,CAMR,SANQ;;AAOhB,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,6BAAc,MAAd,CAAP;AACD;AACD,UAAM,SAAS,KAAK,KAAL,CAAW,KAAK,MAAL,KAAiB,OAA5B,CAAf;AACA,gBAAU,YAAV,CAAuB,IAAvB,YAAqC,MAArC;AACA,aAAO,eAAM,UAAN,CAAiB,IAAjB,EAAuB,MAAvB,EAA+B,MAA/B,CAAP;AACA,UAAI,eAAJ;AACA,UAAI,SAAG,MAAH,CAAU,UAAU,QAAV,CAAmB,SAA7B,CAAJ,EAA6C;AAC3C,iBAAS,SAAS,aAAT,CAAuB,UAAU,QAAV,CAAmB,SAA1C,CAAT;AACD;AACD;AACA,UAAI,CAAC,SAAG,WAAH,CAAe,MAAf,CAAL,EAA6B;AAC3B,iBAAS,SAAT;AACD;AACD,aAAO,kBAAP,CAA0B,WAA1B,EAAuC,IAAvC;AACD;;;oCACe;AACd,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAFc,UAIN,SAJM,GAIQ,MAJR,CAIN,SAJM;AAAA,UAKN,SALM,GAKQ,MALR,CAKN,SALM;AAAA,UAMN,QANM,GAMmE,SANnE,CAMN,QANM;AAAA,UAMI,OANJ,GAMmE,SANnE,CAMI,OANJ;AAAA,UAMa,QANb,GAMmE,SANnE,CAMa,QANb;AAAA,UAMuB,MANvB,GAMmE,SANnE,CAMuB,MANvB;AAAA,UAM+B,QAN/B,GAMmE,SANnE,CAM+B,QAN/B;AAAA,UAMyC,WANzC,GAMmE,SANnE,CAMyC,WANzC;AAAA,UAMsD,QANtD,GAMmE,SANnE,CAMsD,QANtD;;AAOd,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,UAAU,gBAAV,CAA2B,QAA3B,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA,UAAI;AACF,eAAO,QAAP,GAAkB,YAAY,SAAS,OAArB,CAAlB;;AAEA;AACA,eAAO,OAAP,GAAiB,EAAjB;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,YAAY,QAAQ,IAApB,CAAtB;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,aAAa,QAAQ,IAArB,CAAtB;AACA,eAAO,OAAP,CAAe,KAAf,GAAuB,YAAY,QAAQ,KAApB,CAAvB;AACA,eAAO,OAAP,CAAe,UAAf,GAA4B,YAAY,QAAQ,UAApB,CAA5B;;AAEA;AACA,eAAO,OAAP,CAAe,IAAf,GAAsB,YAAY,QAAQ,IAApB,CAAtB;;AAEA;AACA,eAAO,QAAP,GAAkB,EAAlB;AACA,eAAO,QAAP,CAAgB,SAAhB,GAA4B,YAAY,SAAS,SAArB,CAA5B;;AAEA;AACA,eAAO,QAAP,CAAgB,MAAhB,GAAyB,EAAzB;AACA,eAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,GAA6B,YAAY,SAAS,MAArB,CAA7B;AACA,eAAO,QAAP,CAAgB,MAAhB,CAAuB,IAAvB,GAA8B,OAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,IAA8B,OAAO,QAAP,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,oBAA3B,CAAgD,MAAhD,EAAwD,CAAxD,CAA5D;;AAEA;AACA,eAAO,QAAP,CAAgB,MAAhB,GAAyB,YAAY,SAAS,MAArB,CAAzB;;AAEA;AACA,eAAO,MAAP,GAAgB,EAAhB;AACA,eAAO,MAAP,CAAc,KAAd,GAAsB,YAAY,OAAO,KAAnB,CAAtB;AACA,eAAO,MAAP,CAAc,OAAd,GAAwB,YAAY,OAAO,OAAnB,CAAxB;;AAEA;AACA,eAAO,QAAP,GAAkB,YAAY,QAAZ,CAAlB;AACA,eAAO,WAAP,GAAqB,YAAY,WAAZ,CAArB;AACA,eAAO,QAAP,GAAkB,aAAa,QAAb,CAAlB;;AAEA,eAAO,IAAP;AACD,OApCD,CAqCA,OAAO,CAAP,EAAU;AACR,aAAK,KAAL,CAAW,0DAAX;AACA;AACA,aAAK,qBAAL,CAA2B,IAA3B;;AAEA,eAAO,KAAP;AACD;AACF;;;0CACqB,M,EAAQ;AAC5B,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAF4B,UAGpB,KAHoB,GAGV,MAHU,CAGpB,KAHoB;;AAI5B,UAAI,UAAU,eAAM,OAAN,CAAc,OAAO,KAAP,CAAa,KAA3B,EAAkC,OAAO,IAAzC,CAAd,EAA8D;AAC5D,cAAM,YAAN,CAAmB,UAAnB,EAA+B,EAA/B;AACD,OAFD,MAEO;AACL,cAAM,eAAN,CAAsB,UAAtB;AACD;AACF;;;sCACiB,K,EAAO;AACvB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,aAAa,KAAK,WAAxB;;AAJuB,UAMf,SANe,GAMQ,MANR,CAMf,SANe;AAAA,UAMJ,OANI,GAMQ,MANR,CAMJ,OANI;;AAOvB,UAAI,gBAAgB,WAAW,kBAA/B;;AAEA,UAAI,aAAJ,EAAmB;AACjB;AACA,YAAI,SAAS,MAAM,IAAN,KAAe,WAAW,mBAAvC,EAA4D;AAC1D,iBAAO,YAAP,GAAsB,WAAW,YAAX,CAAwB,SAAxB,CAAtB;AACD,SAFD,MAEO;AACL;AACA,cAAI,CAAC,WAAW,YAAX,CAAwB,SAAxB,CAAL,EAAyC;AACvC;AACA,iBAAK,mBAAL;;AAEA;AACA,uBAAW,iBAAX,CAA6B,SAA7B;AACD,WAND,MAMO;AACL;AACA,uBAAW,gBAAX;AACD;;AAED;AACA,iBAAO,YAAP,GAAsB,WAAW,YAAX,CAAwB,SAAxB,CAAtB;;AAEA;AACD;AACF,OAtBD,MAsBO;AACL;AACA,eAAO,YAAP,GAAsB,CAAC,OAAO,YAA9B;;AAEA;AACA,iBAAS,IAAT,CAAc,KAAd,CAAoB,QAApB,GAA+B,OAAO,YAAP,GAAsB,QAAtB,GAAiC,EAAhE;AACD;;AAED;AACA,oBAAE,WAAF,CAAc,SAAd,EAAyB,OAAO,OAAP,CAAe,UAAf,CAA0B,MAAnD,EAA2D,OAAO,YAAlE;;AAEA;AACA,WAAK,UAAL,CAAgB,OAAO,YAAvB;;AAEA;AACA,UAAI,WAAW,QAAQ,UAAvB,EAAmC;AACjC,aAAK,YAAL,CAAkB,QAAQ,UAA1B,EAAsC,OAAO,YAA7C;AACD;;AAED;AACA,WAAK,aAAL,CAAmB,SAAnB,EAA8B,OAAO,YAAP,GAAsB,iBAAtB,GAA0C,gBAAxE,EAA0F,IAA1F;;AAEA;AACA,UAAI,CAAC,OAAO,YAAR,IAAwB,aAA5B,EAA2C;AACzC,aAAK,sBAAL;AACD;AACF;;;iCACY;AACX,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AAFW,UAGH,SAHG,GAGW,MAHX,CAGH,SAHG;;AAIX,UAAM,eAAe,SAAf,YAAe,CAAC,QAAD,EAAc;AACjC,eAAO,UAAU,gBAAV,CAA2B,QAA3B,CAAP;AACD,OAFD;AAGA,UAAM,cAAc,SAAd,WAAc,CAAC,QAAD,EAAc;AAChC,eAAO,aAAa,QAAb,EAAuB,CAAvB,CAAP;AACD,OAFD;AAGA,UAAI,YAAY,aAAa,+CAAb,CAAhB;AAAA,UACE,QAAQ,UAAU,CAAV,CADV;AAAA,UAEE,OAAO,UAAU,UAAU,MAAV,GAAmB,CAA7B,CAFT;;AAIA,eAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B;AACA,YAAI,MAAM,KAAN,KAAgB,CAAhB,IAAqB,YAAzB,EAAuC;AACrC,cAAI,MAAM,MAAN,KAAiB,IAAjB,IAAyB,CAAC,MAAM,QAApC,EAA8C;AAC5C;AACA,kBAAM,cAAN;AACA,kBAAM,KAAN;AACD,WAJD,MAIO,IAAI,MAAM,MAAN,KAAiB,KAAjB,IAA0B,MAAM,QAApC,EAA8C;AACnD;AACA,kBAAM,cAAN;AACA,iBAAK,KAAL;AACD;AACF;AACF;;AAED;AACA,uBAAM,OAAN,CAAc,SAAd,EAAyB,SAAzB,EAAoC,WAApC;AACD;;;0CACqB;AACpB,eAAS;AACP,WAAG,OAAO,WAAP,IAAsB,CADlB;AAEP,WAAG,OAAO,WAAP,IAAsB;AAFlB,OAAT;AAID;;;6CACwB;AACvB,aAAO,QAAP,CAAgB,OAAO,CAAvB,EAA0B,OAAO,CAAjC;AACD;;;oCACe,M,EAAQ;AACtB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;;AAHsB,UAKd,YALc,GAKY,MALZ,CAKd,YALc;AAAA,UAKA,OALA,GAKY,MALZ,CAKA,OALA;AAAA,UAMd,IANc,GAMgC,MANhC,CAMd,IANc;AAAA,UAMR,SANQ,GAMgC,MANhC,CAMR,SANQ;AAAA,UAMG,OANH,GAMgC,MANhC,CAMG,OANH;AAAA,UAMY,QANZ,GAMgC,MANhC,CAMY,QANZ;AAAA,UAMsB,KANtB,GAMgC,MANhC,CAMsB,KANtB;AAAA,UAOd,MAPc,GAOH,KAPG,CAOd,MAPc;AAQtB;;AACA,UAAI,CAAC,YAAD,IAAiB,SAAS,OAA9B,EAAuC;AACrC;AACD;;AAED,UAAI,QAAQ,CAAZ;AAAA,UACE,oBAAoB,KADtB;AAAA,UAEE,OAAO,MAFT;AAAA,UAGE,UAAU,cAAE,QAAF,CAAW,SAAX,EAAsB,QAAQ,OAA9B,CAHZ;;AAKA;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,MAAX,CAAL,EAAyB;AACvB,YAAI,UAAU,OAAO,IAArB,EAA2B;AACzB;AACA,8BAAqB,OAAO,IAAP,KAAgB,iBAArC;;AAEA;AACA,iBAAO,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,YAAd,EAA4B,YAA5B,EAA0C,OAA1C,CAAd,EAAkE,OAAO,IAAzE,CAAP;;AAEA;AACA,cAAI,eAAM,OAAN,CAAc,CAAC,WAAD,EAAc,WAAd,CAAd,EAA0C,OAAO,IAAjD,CAAJ,EAA4D;AAC1D,oBAAQ,IAAR;AACD;;AAED;AACA,cAAI,OAAO,IAAP,KAAgB,OAApB,EAA6B;AAC3B,oBAAQ,IAAR;AACD;AACF,SAhBD,MAgBO;AACL,iBAAO,cAAE,QAAF,CAAW,SAAX,EAAsB,QAAQ,YAA9B,CAAP;AACD;AACF;;AAED;AACA,aAAO,YAAP,CAAoB,OAAO,KAA3B;;AAEA;AACA,UAAI,QAAQ,MAAR,IAAkB,OAAtB,EAA+B;AAC7B,sBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,YAAjC,EAA+C,KAA/C;;AAEA;AACA,YAAI,UAAU,OAAd,EAAuB;AACrB;AACD;;AAED;AACA,YAAI,QAAQ,OAAZ,EAAqB;AACnB,kBAAQ,IAAR;AACD;AACF;;AAED;AACA;AACA,UAAI,CAAC,IAAD,IAAS,CAAC,MAAd,EAAsB;AACpB,eAAO,KAAP,GAAe,OAAO,UAAP,CAAkB,YAAM;AACrC;AACA,cAAI,CAAC,SAAS,OAAT,IAAoB,SAAS,KAA9B,KAAwC,CAAC,iBAA7C,EAAgE;AAC9D;AACD;;AAED,wBAAE,WAAF,CAAc,SAAd,EAAyB,QAAQ,YAAjC,EAA+C,IAA/C;AACD,SAPc,EAOZ,KAPY,CAAf;AAQD;AACF;;;kCACa,O,EAAS,I,EAAM,O,EAAS,U,EAAY;AAChD,uBAAM,WAAN,CAAkB,OAAlB,EAA2B,IAA3B,EAAiC,OAAjC,EAA0C,eAAM,MAAN,CAAa,EAAb,EAAiB,UAAjB,EAA6B;AACrE,eAAO;AAD8D,OAA7B,CAA1C;AAGD;;;mCACc,O,EAAS,G,EAAK;AAC3B,UAAI,YAAY,CAAZ,IAAiB,QAAQ,CAAzB,IAA8B,MAAM,OAAN,CAA9B,IAAgD,MAAM,GAAN,CAApD,EAAgE;AAC9D,eAAO,CAAP;AACD;AACD,aAAO,CAAE,UAAU,GAAX,GAAkB,GAAnB,EAAwB,OAAxB,CAAgC,CAAhC,CAAP;AACD;;;uCACkB;AACjB,UAAM,SAAS,KAAK,OAApB;AACA,UAAM,SAAS,KAAK,OAApB;AACA,oBAAE,WAAF,CAAc,OAAO,SAArB,EAAgC,OAAO,SAAP,CAAiB,SAAjB,CAA2B,OAA3B,CAAmC,GAAnC,EAAwC,EAAxC,CAAhC,EAA6E,OAAO,SAAP,CAAiB,IAA9F;AACD;;;;;;kBAEY,M;;;;;;;;;;ACz/Bf;;;;;;AACO,IAAM,wCAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAA4B;AACvD,MAAI,yBAAmB,CAAC,OAAO,OAAP,CAAe,OAAvC,EAAgD;AAC9C;AACD;AACD,iBAAM,MAAN,CAAa,OAAb,EAAsB,KAAtB;AACA,SAAO,YAAP,CAAoB,OAApB,CAA4B,OAAO,OAAP,CAAe,GAA3C,EAAgD,KAAK,SAAL,CAAe,OAAf,CAAhD;AACD,CANM;AAOA,IAAM,sCAAe,SAAf,YAAe,CAAC,MAAD,EAAS,OAAT,EAAqB;AAC/C,MAAI,QAAQ,IAAZ;AACA,MAAI,yBAAmB,CAAC,OAAO,OAAP,CAAe,OAAvC,EAAgD;AAC9C;AACD;;AAED,SAAO,YAAP,CAAoB,UAApB,CAA+B,cAA/B;;AAEA;AACA,UAAQ,OAAO,YAAP,CAAoB,OAApB,CAA4B,OAAO,OAAP,CAAe,GAA3C,CAAR;;AAEA,MAAI,CAAC,KAAL,EAAY;AACV;AACD,GAFD,MAEO,IAAI,gBAAgB,IAAhB,CAAqB,KAArB,CAAJ,EAAiC;AACtC,kBAAc,EAAE,QAAQ,WAAW,KAAX,CAAV,EAAd,EAA6C,MAA7C,EAAqD,OAArD;AACD,GAFM,MAEA;AACL;AACA,cAAU,KAAK,KAAL,CAAW,KAAX,CAAV;AACD;AACF,CAnBM;;;;;;;;;;;ACRP;;;;;;;;IAEM,G;;;;;;;yBACQ,Q,EAAU,O,EAAS;AAC7B;AACA,UAAI,CAAC,SAAS,MAAd,EAAsB;AACpB,mBAAW,CAAC,QAAD,CAAX;AACD;;AAED;AACA;AACA,WAAK,IAAI,IAAI,SAAS,MAAT,GAAkB,CAA/B,EAAkC,KAAK,CAAvC,EAA0C,GAA1C,EAA+C;AAC7C,YAAI,QAAS,IAAI,CAAL,GAAU,QAAQ,SAAR,CAAkB,IAAlB,CAAV,GAAoC,OAAhD;AACA,YAAI,UAAU,SAAS,CAAT,CAAd;;AAEA;AACA,YAAI,SAAS,QAAQ,UAArB;AACA,YAAI,UAAU,QAAQ,WAAtB;;AAEA;AACA;AACA,cAAM,WAAN,CAAkB,OAAlB;;AAEA;AACA;AACA;AACA,YAAI,OAAJ,EAAa;AACX,iBAAO,YAAP,CAAoB,KAApB,EAA2B,OAA3B;AACD,SAFD,MAEO;AACL,iBAAO,WAAP,CAAmB,KAAnB;AACD;AACD,eAAO,KAAP;AACD;AACF;;;iCACmB,Q,EAAU;AAC5B,aAAO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAP;AACD;;;kCACoB,I,EAAM,M,EAAQ,U,EAAY;AAC7C;AACA,UAAI,UAAU,SAAS,aAAT,CAAuB,IAAvB,CAAd;;AAEA;AACA,UAAI,aAAJ,CAAkB,OAAlB,EAA2B,UAA3B;;AAEA;AACA,UAAI,YAAJ,CAAiB,MAAjB,EAAyB,OAAzB;AACD;;;kCACoB,O,EAAS,U,EAAY;AACxC,WAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,gBAAQ,YAAR,CAAqB,GAArB,EAA2B,IAAI,OAAJ,CAAY,WAAW,GAAX,CAAZ,KAAgC,WAAW,GAAX,CAAjC,GAAoD,EAApD,GAAyD,WAAW,GAAX,CAAnF;AACD;AACF;;;iCACmB,M,EAAQ,O,EAAS;AACnC,aAAO,YAAP,CAAoB,OAApB,EAA6B,OAAO,UAApC;AACD;;;iCACmB,M,EAAQ;AAC1B,UAAI,SAAS,gBAAT,CAA0B,iBAAiB,MAAjB,GAA0B,IAApD,EAA0D,MAA9D,EAAsE;AAClE;AACH;;AAED,UAAI,MAAM,SAAS,aAAT,CAAuB,QAAvB,CAAV;AACA,UAAI,GAAJ,GAAU,MAAV;AACA,UAAI,iBAAiB,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAArB;AACA,qBAAe,UAAf,CAA0B,YAA1B,CAAuC,GAAvC,EAA4C,cAA5C;AACD;;;6BACe,O,EAAS,S,EAAW;AAClC,UAAI,OAAJ,EAAa;AACX,YAAI,QAAQ,SAAZ,EAAuB;AACnB,iBAAO,QAAQ,SAAR,CAAkB,QAAlB,CAA2B,SAA3B,CAAP;AACH,SAFD,MAEO;AACH,iBAAO,IAAI,MAAJ,CAAW,YAAY,SAAZ,GAAwB,SAAnC,EAA8C,IAA9C,CAAmD,QAAQ,SAA3D,CAAP;AACH;AACF;AACD,aAAO,KAAP;AACD;;;kCACoB,O,EAAQ;AAC3B,UAAI,CAAC,OAAL,EAAc;AACV;AACH;AACD,cAAQ,UAAR,CAAmB,WAAnB,CAA+B,OAA/B;AACD;AACD;;;;gCACmB,O,EAAS,S,EAAW,K,EAAM;AAC3C,UAAI,OAAJ,EAAa;AACX,YAAI,QAAQ,SAAZ,EAAuB;AACrB,kBAAQ,SAAR,CAAkB,QAAQ,KAAR,GAAgB,QAAlC,EAA4C,SAA5C;AACD,SAFD,MAEO;AACL,cAAI,OAAO,CAAC,MAAM,QAAQ,SAAd,GAA0B,GAA3B,EAAgC,OAAhC,CAAwC,MAAxC,EAAgD,GAAhD,EAAqD,OAArD,CAA6D,MAAM,SAAN,GAAkB,GAA/E,EAAoF,EAApF,CAAX;AACA,kBAAQ,SAAR,GAAoB,QAAQ,QAAQ,MAAM,SAAd,GAA0B,EAAlC,CAApB;AACD;AACF;AACF;;;iCACmB;AAClB,UAAI,aAAa;AACT,4BAAoB,KADX;AAET,sBAAc,wBAAW;AAAE,iBAAO,KAAP;AAAe,SAFjC;AAGT,2BAAmB,6BAAW,CAAE,CAHvB;AAIT,0BAAkB,4BAAW,CAAE,CAJtB;AAKT,6BAAqB,EALZ;AAMT,iBAAS,IANA;AAOT,gBAAQ;AAPC,OAAjB;AAAA,UASI,kBAAkB,wBAAwB,KAAxB,CAA8B,GAA9B,CATtB;;AAWA;AACA,UAAI,CAAC,SAAG,SAAH,CAAa,SAAS,gBAAtB,CAAL,EAA8C;AAC1C,mBAAW,kBAAX,GAAgC,IAAhC;AACH,OAFD,MAEO;AACL;AACA,aAAK,IAAI,IAAI,CAAR,EAAW,KAAK,gBAAgB,MAArC,EAA6C,IAAI,EAAjD,EAAqD,GAArD,EAA2D;AACzD,qBAAW,MAAX,GAAoB,gBAAgB,CAAhB,CAApB;;AAEA,cAAI,CAAC,SAAG,SAAH,CAAa,SAAS,WAAW,MAAX,GAAoB,kBAA7B,CAAb,CAAL,EAAqE;AACnE,uBAAW,kBAAX,GAAgC,IAAhC;AACA;AACD,WAHD,MAGO,IAAI,CAAC,SAAG,SAAH,CAAa,SAAS,gBAAtB,CAAD,IAA4C,SAAS,mBAAzD,EAA8E;AACnF;AACA,uBAAW,MAAX,GAAoB,IAApB;AACA,uBAAW,kBAAX,GAAgC,IAAhC;AACA;AACD;AACF;AACF;;AAED;AACA,UAAI,WAAW,kBAAf,EAAmC;AACjC;AACA;AACA,mBAAW,mBAAX,GAAkC,WAAW,MAAX,KAAsB,IAAtB,GAA6B,oBAA7B,GAAoD,WAAW,MAAX,GAAoB,kBAA1G;;AAEA,mBAAW,YAAX,GAA0B,UAAS,OAAT,EAAkB;AAC1C,cAAI,SAAG,SAAH,CAAa,OAAb,CAAJ,EAA2B;AACvB,sBAAU,SAAS,IAAnB;AACH;AACD,kBAAQ,KAAK,MAAb;AACE,iBAAK,EAAL;AACE,qBAAO,SAAS,iBAAT,KAA+B,OAAtC;AACF,iBAAK,KAAL;AACE,qBAAO,SAAS,oBAAT,KAAkC,OAAzC;AACF;AACE,qBAAO,SAAS,KAAK,MAAL,GAAc,mBAAvB,MAAgD,OAAvD;AANJ;AAQD,SAZD;AAaA,mBAAW,iBAAX,GAA+B,UAAS,OAAT,EAAkB;AAC/C,cAAI,SAAG,SAAH,CAAa,OAAb,CAAJ,EAA2B;AACzB,sBAAU,SAAS,IAAnB;AACD;AACD,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,QAAQ,iBAAR,EAAvB,GAAqD,QAAQ,KAAK,MAAL,IAAe,KAAK,MAAL,KAAgB,IAAhB,GAAuB,mBAAvB,GAA6C,mBAA5D,CAAR,GAA5D;AACD,SALD;AAMA,mBAAW,gBAAX,GAA8B,YAAW;AACvC,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,SAAS,gBAAT,EAAvB,GAAqD,SAAS,KAAK,MAAL,IAAe,KAAK,MAAL,KAAgB,IAAhB,GAAuB,gBAAvB,GAA0C,kBAAzD,CAAT,GAA5D;AACD,SAFD;AAGA,mBAAW,OAAX,GAAqB,YAAW;AAC9B,iBAAQ,KAAK,MAAL,KAAgB,EAAjB,GAAuB,SAAS,iBAAhC,GAAoD,SAAS,KAAK,MAAL,GAAc,mBAAvB,CAA3D;AACD,SAFD;AAGD;;AAED,aAAO,UAAP;AACD;;;;;;kBAEY,G;;;;;;;;;;;AChKf;;;;;;;;IAEM,K;;;;;;;gCACe,O,EAAS,I,EAAM,O,EAAS,U,EAAY;AACrD;AACA,UAAI,CAAC,OAAD,IAAY,CAAC,IAAjB,EAAuB;AACrB;AACD;;AAED;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,OAAX,CAAL,EAA0B;AACxB,kBAAU,KAAV;AACD;;AAED;AACA,UAAI,QAAQ,IAAI,WAAJ,CAAgB,IAAhB,EAAsB;AAChC,iBAAS,OADuB;AAEhC,gBAAQ;AAFwB,OAAtB,CAAZ;;AAKA;AACA,cAAQ,aAAR,CAAsB,KAAtB;AACD;;;4BACc,O,EAAS,M,EAAQ,Q,EAAU,U,EAAY;AACpD,UAAI,OAAJ,EAAa;AACX,cAAM,cAAN,CAAqB,OAArB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,IAAhD,EAAsD,UAAtD;AACD;AACF;;;mCAEqB,O,EAAS,M,EAAQ,Q,EAAU,M,EAAQ,U,EAAY;AACnE,UAAI,YAAY,OAAO,KAAP,CAAa,GAAb,CAAhB;AACA;AACA;AACA,UAAI,CAAC,SAAG,OAAH,CAAW,UAAX,CAAL,EAA6B;AAC3B,qBAAa,KAAb;AACD;AACD;AACA,UAAI,mBAAmB,QAAvB,EAAiC;AAC/B,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,cAAI,QAAQ,CAAR,aAAsB,IAA1B,EAAgC;AAC9B,kBAAM,cAAN,CAAqB,QAAQ,CAAR,CAArB,EAAiC,UAAU,CAAV,CAAjC,EAA+C,UAAU,CAAV,CAA/C,EAA6D,UAAU,CAAV,CAA7D;AACD;AACF;AACD;AACD;;AAED;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,gBAAQ,SAAS,kBAAT,GAA8B,qBAAtC,EAA6D,UAAU,CAAV,CAA7D,EAA2E,QAA3E,EAAqF,UAArF;AACD;AACF;;;kCACoB,O,EAAS,S,EAAW,Y,EAAc,e,EAAiB,U,EAAY;AAClF,YAAM,OAAN,CAAc,OAAd,EAAuB,SAAvB,EAAkC,UAAU,KAAV,EAAiB;AACjD,YAAI,YAAJ,EAAkB;AAChB,uBAAa,KAAb,CAAmB,OAAnB,EAA4B,CAAC,KAAD,CAA5B;AACD;AACD,wBAAgB,KAAhB,CAAsB,OAAtB,EAA+B,CAAC,KAAD,CAA/B;AACD,OALD,EAKG,UALH;AAMD;;;;;;kBAEY,K;;;;;;;;;;;;;IC3DT,G;;;;;;;sBAEK,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,YAAT,EAAuB;AACrB;AACD;AACD,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;AACF,UAAI,YAAU,GAAV,YAAoB,GAAxB;AACA,UAAI,QAAQ,KAAZ,EAAmB;AACjB,gBAAQ,KAAR,CAAc,GAAd;AACD,OAFD,MAEO,IAAI,QAAQ,IAAZ,EAAkB;AACvB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFM,MAEA;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,WAAT,EAAsB;AACpB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,WAAT,EAAsB;AACpB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,IAAZ,EAAkB;AAChB,gBAAQ,IAAR,CAAa,GAAb;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,YAAT,EAAuB;AACrB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;;AAEF,UAAI,YAAU,GAAV,YAAoB,GAAxB;;AAEA,UAAI,QAAQ,KAAZ,EAAmB;AACjB,gBAAQ,KAAR,CAAc,GAAd;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,GAAZ;AACD;AACF;;;sBAEQ,G,EAAK,G,EAAK;AACjB,UAAI,CAAC,IAAI,cAAT,EAAyB;AACvB;AACD;;AAED,UAAI,CAAC,GAAD,IAAQ,IAAI,gBAAhB,EACE,MAAM,IAAI,UAAV;AACF,cAAQ,GAAR,OAAgB,GAAhB,YAA0B,GAA1B;AACD;;;;;;AAIH,IAAI,UAAJ,GAAiB,OAAjB;AACA,IAAI,gBAAJ,GAAuB,KAAvB;AACA,IAAI,YAAJ,GAAmB,IAAnB;AACA,IAAI,WAAJ,GAAkB,IAAlB;AACA,IAAI,WAAJ,GAAkB,IAAlB;AACA,IAAI,YAAJ,GAAmB,IAAnB;AACA,IAAI,cAAJ,GAAqB,IAArB;;kBAEe,G;;;;;;;;;;;;;;;IC1FT,K;;;;;;;qCAEmB;AACrB,UAAI,EAAE,kBAAkB,MAApB,CAAJ,EAAiC;AAC/B,eAAO,KAAP;AACD;;AAED;AACA;AACA,UAAI;AACF;AACA,eAAO,YAAP,CAAoB,OAApB,CAA4B,SAA5B,EAAuC,IAAvC;;AAEA;AACA,YAAI,SAAS,OAAO,YAAP,CAAoB,OAApB,CAA4B,SAA5B,CAAb;;AAEA;AACA,eAAO,YAAP,CAAoB,UAApB,CAA+B,SAA/B;;AAEA;AACA,eAAQ,WAAW,IAAnB;AACD,OAZD,CAaA,OAAO,CAAP,EAAU;AACR,eAAO,KAAP;AACD;;AAED,aAAO,KAAP;AACD;;;+BACiB,M,EAAQ,I,EAAM,O,EAAS;AACvC,aAAO,OAAO,OAAP,CAAe,IAAI,MAAJ,CAAW,KAAK,OAAL,CAAa,8BAAb,EAA6C,MAA7C,CAAX,EAAiE,GAAjE,CAAf,EAAsF,OAAtF,CAAP;AACD;;;6BACe;AACd;AACA,UAAI,UAAU,SAAd;;AAEA;AACA,UAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB;AACD;;AAED;AACA,UAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAO,QAAQ,CAAR,CAAP;AACD;;AAED;AACA,UAAI,cAAc,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,OAA3B,CAAlB;AAAA,UACE,SAAS,QAAQ,MADnB;;AAGA;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,YAAI,SAAS,QAAQ,CAAR,CAAb;;AAEA,aAAK,IAAI,QAAT,IAAqB,MAArB,EAA6B;AAC3B,cAAI,OAAO,QAAP,KACF,OAAO,QAAP,EAAiB,WADf,IAEF,OAAO,QAAP,EAAiB,WAAjB,KAAiC,MAFnC,EAGE;AACA,wBAAY,QAAZ,IAAwB,YAAY,QAAZ,KAAyB,EAAjD;AACA,kBAAM,MAAN,CAAa,YAAY,QAAZ,CAAb,EAAoC,OAAO,QAAP,CAApC;AACD,WAND,MAMO;AACL,wBAAY,QAAZ,IAAwB,OAAO,QAAP,CAAxB;AACD;AACF;AACF;;AAED,aAAO,WAAP;AACD;;;yBACU;AACT,aAAO;AACL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,IAAkB,QAAO,KAAP,yCAAO,KAAP,OAAkB,QAA3C;AACD,SAHI;AAIL,eAAO,eAAS,KAAT,EAAgB;AACrB,iBAAO,UAAU,IAAV,IAAmB,QAAO,KAAP,yCAAO,KAAP,OAAkB,QAAlB,IAA8B,MAAM,WAAN,KAAsB,KAA9E;AACD,SANI;AAOL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,KAAmB,OAAO,KAAP,KAAkB,QAAlB,IAA8B,CAAC,MAAM,QAAQ,CAAd,CAA/B,IAAoD,QAAO,KAAP,yCAAO,KAAP,OAAiB,QAAjB,IAA6B,MAAM,WAAN,KAAsB,MAA1H,CAAP;AACD,SATI;AAUL,gBAAQ,gBAAS,KAAT,EAAgB;AACtB,iBAAO,UAAU,IAAV,KAAmB,OAAO,KAAP,KAAiB,QAAjB,IAA8B,QAAO,KAAP,yCAAO,KAAP,OAAiB,QAAjB,IAA6B,MAAM,WAAN,KAAsB,MAApG,CAAP;AACD,SAZI;AAaL,iBAAS,iBAAS,KAAT,EAAgB;AACvB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,SAA1C;AACD,SAfI;AAgBL,kBAAU,kBAAS,KAAT,EAAgB;AACxB,iBAAO,UAAU,IAAV,IAAkB,iBAAiB,QAA1C;AACD,SAlBI;AAmBL,qBAAa,qBAAS,KAAT,EAAgB;AAC3B,iBAAO,UAAU,IAAV,IAAkB,iBAAiB,WAA1C;AACD,SArBI;AAsBL,kBAAU,mBAAS,KAAT,EAAgB;AACxB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,UAA1C;AACD,SAxBI;AAyBL,mBAAW,mBAAS,KAAT,EAAgB;AACzB,iBAAO,UAAU,IAAV,IAAkB,OAAO,KAAP,KAAiB,WAA1C;AACD;AA3BI,OAAP;AA6BD;;;kCACmB;AAClB,UAAI,KAAK,UAAU,SAAnB;AAAA,UACE,OAAO,UAAU,OADnB;AAAA,UAEE,cAAc,KAAK,WAAW,UAAU,UAArB,CAFrB;AAAA,UAGE,eAAe,SAAS,UAAU,UAAnB,EAA+B,EAA/B,CAHjB;AAAA,UAIE,mBAJF;AAAA,UAKE,kBALF;AAAA,UAME,WANF;AAAA,UAOE,OAAO,KAPT;AAAA,UAQE,YAAY,KARd;AAAA,UASE,WAAW,KATb;AAAA,UAUE,WAAW,KAVb;AAAA,UAWE,WAAW,KAXb;;AAaA,UAAK,UAAU,UAAV,CAAqB,OAArB,CAA6B,YAA7B,MAA+C,CAAC,CAAjD,IAAwD,UAAU,UAAV,CAAqB,OAArB,CAA6B,OAA7B,MAA0C,CAAC,CAAvG,EAA2G;AACzG;AACA,eAAO,IAAP;AACA,eAAO,IAAP;AACA,sBAAc,IAAd;AACD,OALD,MAKO,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,MAAX,CAAb,MAAqC,CAAC,CAA1C,EAA6C;AAClD;AACA,eAAO,IAAP;AACA,eAAO,IAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALM,MAKD,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,gBAAX,CAAb,MAA+C,CAAC,CAApD,EAAuD;AAC3D;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,EAAzB,CAAd;AACD,OALK,MAKA,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,QAAX,CAAb,MAAuC,CAAC,CAA5C,EAA+C;AACnD;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALK,MAKC,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,QAAX,CAAb,MAAuC,CAAC,CAA5C,EAA+C;AACpD;AACA,mBAAW,IAAX;AACA,eAAO,QAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACA,YAAI,CAAC,YAAY,GAAG,OAAH,CAAW,SAAX,CAAb,MAAwC,CAAC,CAA7C,EAAgD;AAC5C,wBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACH;AACF,OARM,MAQA,IAAI,CAAC,YAAY,GAAG,OAAH,CAAW,SAAX,CAAb,MAAwC,CAAC,CAA7C,EAAgD;AACrD;AACA,oBAAY,IAAZ;AACA,eAAO,SAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;AACD,OALM,MAKA,IAAI,CAAC,aAAa,GAAG,WAAH,CAAe,GAAf,IAAsB,CAApC,KAA0C,YAAY,GAAG,WAAH,CAAe,GAAf,CAAtD,CAAJ,EAAgF;AACrF;AACA,eAAO,GAAG,SAAH,CAAa,UAAb,EAAwB,SAAxB,CAAP;AACA,sBAAc,GAAG,SAAH,CAAa,YAAY,CAAzB,CAAd;;AAEA,YAAI,KAAK,WAAL,OAAuB,KAAK,WAAL,EAA3B,EAA+C;AAC3C,iBAAO,UAAU,OAAjB;AACH;AACF;;AAED;AACA,UAAI,CAAC,KAAK,YAAY,OAAZ,CAAoB,GAApB,CAAN,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,sBAAc,YAAY,SAAZ,CAAsB,CAAtB,EAAyB,EAAzB,CAAd;AACD;AACD,UAAI,CAAC,KAAK,YAAY,OAAZ,CAAoB,GAApB,CAAN,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,sBAAc,YAAY,SAAZ,CAAsB,CAAtB,EAAyB,EAAzB,CAAd;AACD;;AAED;AACA,qBAAe,SAAS,KAAK,WAAd,EAA2B,EAA3B,CAAf;AACA,UAAI,MAAM,YAAN,CAAJ,EAAyB;AACvB,sBAAc,KAAK,WAAW,UAAU,UAArB,CAAnB;AACA,uBAAe,SAAS,UAAU,UAAnB,EAA+B,EAA/B,CAAf;AACD;;AAED;AACA,aAAO;AACL,cAAY,IADP;AAEL,iBAAY,YAFP;AAGL,cAAY,IAHP;AAIL,mBAAY,SAJP;AAKL,kBAAY,QALP;AAML,kBAAY,QANP;AAOL,kBAAY,QAPP;AAQL,eAAY,sBAAsB,IAAtB,CAA2B,UAAU,QAArC,CARP;AASL,kBAAY,iBAAiB,IAAjB,CAAsB,UAAU,SAAhC,CATP;AAUL,iBAAY,kBAAkB,SAAS;AAVlC,OAAP;AAYD;;;4BACc,Q,EAAU,M,EAAQ;AAC/B,aAAO,MAAM,SAAN,CAAgB,OAAhB,IAA4B,SAAS,OAAT,CAAiB,MAAjB,MAA6B,CAAC,CAAjE;AACD;;;4BACc,I,EAAK;AAClB,UAAM,UAAc,MAAM,YAAN,EAApB;AAAA,UACI,UAAe,QAAQ,IAAR,IAAgB,QAAQ,OAAR,IAAmB,CADtD;AAAA,UAEI,QAAc,QAAQ,KAF1B;AAAA,UAGI,WAAc,QAAQ,QAH1B;AAAA,UAII,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WAJrD;AAAA,UAKI,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WALrD;AAMA,UAAI,QAAc,KAAlB;AAAA,UACI,OAAc,KADlB;;AAGA,cAAQ,IAAR;AACI,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAU,CAAC,OAApB;AACA;;AAEJ,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAS,CAAC,OAAnB;AACA;;AAEJ;AACI,kBAAS,gBAAgB,YAAzB;AACA,iBAAS,SAAS,CAAC,OAAnB;AAbR;;AAgBA,aAAO;AACH,eAAQ,KADL;AAEH,cAAQ;AAFL,OAAP;AAID;;;8BACgB,I,EAAK;AACpB,UAAM,UAAc,MAAM,WAAN,EAApB;AAAA,UACI,UAAe,QAAQ,IAAR,IAAgB,QAAQ,OAAR,IAAmB,CADtD;AAAA,UAEI,QAAc,QAAQ,KAF1B;AAAA,UAGI,WAAc,QAAQ,QAH1B;AAAA,UAII,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WAJrD;AAAA,UAKI,eAAe,CAAC,CAAC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,WALrD;AAMA,UAAI,QAAc,KAAlB;AAAA,UACI,OAAc,KADlB;;AAGA,cAAQ,IAAR;AACI,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAU,CAAC,OAApB;AACA;;AAEJ,aAAK,OAAL;AACI,kBAAQ,YAAR;AACA,iBAAS,SAAS,CAAC,OAAnB;AACA;;AAEJ;AACI,kBAAS,gBAAgB,YAAzB;AACA,iBAAS,SAAS,CAAC,OAAnB;AAbR;;AAgBA,aAAO;AACH,eAAQ,KADL;AAEH,cAAQ;AAFL,OAAP;AAID;;;;;;kBAEY,K;AACR,IAAM,kBAAK,MAAM,EAAN,EAAX;AACA,IAAM,0CAAiB,MAAM,cAAN,EAAvB;;;;;;;;;AC7PP;;;;;;AACA,SAAS,OAAT,GAAmB;AACjB,MAAI,OAAO,OAAO,WAAd,KAA8B,UAAlC,EAA8C;AAC5C;AACD;;AAED,WAAS,WAAT,CAAqB,KAArB,EAA4B,MAA5B,EAAoC;AAClC,aAAS,UAAU,EAAE,SAAS,KAAX,EAAkB,YAAY,KAA9B,EAAqC,QAAQ,SAA7C,EAAnB;AACA,QAAI,MAAM,SAAS,WAAT,CAAqB,aAArB,CAAV;AACA,QAAI,eAAJ,CAAoB,KAApB,EAA2B,OAAO,OAAlC,EAA2C,OAAO,UAAlD,EAA8D,OAAO,MAArE;AACA,WAAO,GAAP;AACD;;AAED,cAAY,SAAZ,GAAwB,OAAO,KAAP,CAAa,SAArC;AACA,SAAO,WAAP,GAAqB,WAArB;AAED;AACD;AACA,IAAI,yBAAJ;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,SAA/B,EAA0C;AACxC,cAAY,IAD4B;AAExC,OAAK,eAAY;AACf;AACA,WAAO,aAAP;AACD;AALuC,CAA1C;kBAOe,O","file":"vplyr.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.flvjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.0\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = _dereq_;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        _resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      _reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      _reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    _reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return _resolve(promise, value);\n    }, function (reason) {\n      return _reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      _reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction _resolve(promise, value) {\n  if (promise === value) {\n    _reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction _reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      _reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      _resolve(promise, value);\n    } else if (failed) {\n      _reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      _reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      _resolve(promise, value);\n    }, function rejectPromise(reason) {\n      _reject(promise, reason);\n    });\n  } catch (e) {\n    _reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    _reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var _input = this._input;\n\n  for (var i = 0; this._state === PENDING && i < length; i++) {\n    this._eachEntry(_input[i], i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$ = c.resolve;\n\n  if (resolve$$ === resolve) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$) {\n        return resolve$$(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$(entry), i);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      _reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve;\nPromise.reject = reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\nfunction polyfill() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}\n\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\n\nreturn Promise;\n\n})));\n\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":3}],2:[function(_dereq_,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(_dereq_,module,exports){\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            Function(['require','module','exports'], '(' + fn + ')(self)'),\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        Function(['require'], (\n            // try to call default if defined to also support babel esmodule\n            // exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);'\n        )),\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n\n},{}],5:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createDefaultConfig = createDefaultConfig;\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar defaultConfig = exports.defaultConfig = {\n    enableWorker: false,\n    enableStashBuffer: true,\n    stashInitialSize: undefined,\n\n    isLive: false,\n\n    lazyLoad: true,\n    lazyLoadMaxDuration: 3 * 60,\n    lazyLoadRecoverDuration: 30,\n    deferLoadAfterSourceOpen: true,\n\n    statisticsInfoReportInterval: 600,\n\n    accurateSeek: false,\n    seekType: 'range', // [range, param, custom]\n    seekParamStart: 'bstart',\n    seekParamEnd: 'bend',\n    rangeLoadZeroStart: false,\n    customSeekHandler: undefined,\n    reuseRedirectedURL: false\n};\n\nfunction createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}\n\n},{}],6:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (C) 2016 Bilibili. All Rights Reserved.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _config = _dereq_('../config.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Features = function () {\n    function Features() {\n        _classCallCheck(this, Features);\n    }\n\n    _createClass(Features, null, [{\n        key: 'supportMSEH264Playback',\n        value: function supportMSEH264Playback() {\n            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n        }\n    }, {\n        key: 'supportNetworkStreamIO',\n        value: function supportNetworkStreamIO() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n        }\n    }, {\n        key: 'getNetworkLoaderTypeName',\n        value: function getNetworkLoaderTypeName() {\n            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());\n            var loaderType = ioctl.loaderType;\n            ioctl.destroy();\n            return loaderType;\n        }\n    }, {\n        key: 'supportNativeMediaPlayback',\n        value: function supportNativeMediaPlayback(mimeType) {\n            if (Features.videoElement == undefined) {\n                Features.videoElement = window.document.createElement('video');\n            }\n            var canPlay = Features.videoElement.canPlayType(mimeType);\n            return canPlay === 'probably' || canPlay == 'maybe';\n        }\n    }, {\n        key: 'getFeatureList',\n        value: function getFeatureList() {\n            var features = {\n                mseFlvPlayback: false,\n                mseLiveFlvPlayback: false,\n                networkStreamIO: false,\n                networkLoaderName: '',\n                nativeMP4H264Playback: false,\n                nativeWebmVP8Playback: false,\n                nativeWebmVP9Playback: false\n            };\n\n            features.mseFlvPlayback = Features.supportMSEH264Playback();\n            features.networkStreamIO = Features.supportNetworkStreamIO();\n            features.networkLoaderName = Features.getNetworkLoaderTypeName();\n            features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n            features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n            features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n            features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n\n            return features;\n        }\n    }]);\n\n    return Features;\n}();\n\nexports.default = Features;\n\n},{\"../config.js\":5,\"../io/io-controller.js\":23}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MediaInfo = function () {\n    function MediaInfo() {\n        _classCallCheck(this, MediaInfo);\n\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    _createClass(MediaInfo, [{\n        key: \"isComplete\",\n        value: function isComplete() {\n            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;\n\n            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;\n\n            // keyframesIndex may not be present\n            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;\n        }\n    }, {\n        key: \"isSeekable\",\n        value: function isSeekable() {\n            return this.hasKeyframesIndex === true;\n        }\n    }, {\n        key: \"getNearestKeyframe\",\n        value: function getNearestKeyframe(milliseconds) {\n            if (this.keyframesIndex == null) {\n                return null;\n            }\n\n            var table = this.keyframesIndex;\n            var keyframeIdx = this._search(table.times, milliseconds);\n\n            return {\n                index: keyframeIdx,\n                milliseconds: table.times[keyframeIdx],\n                fileposition: table.filepositions[keyframeIdx]\n            };\n        }\n    }, {\n        key: \"_search\",\n        value: function _search(list, value) {\n            var idx = 0;\n\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (value < list[0]) {\n                idx = 0;\n                lbound = ubound + 1; // skip search\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || value >= list[mid] && value < list[mid + 1]) {\n                    idx = mid;\n                    break;\n                } else if (list[mid] < value) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n\n            return idx;\n        }\n    }]);\n\n    return MediaInfo;\n}();\n\nexports.default = MediaInfo;\n\n},{}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Represents an media sample (audio / video)\nvar SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {\n    _classCallCheck(this, SampleInfo);\n\n    this.dts = dts;\n    this.pts = pts;\n    this.duration = duration;\n    this.originalDts = originalDts;\n    this.isSyncPoint = isSync;\n    this.fileposition = null;\n};\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\n\n\nvar MediaSegmentInfo = exports.MediaSegmentInfo = function () {\n    function MediaSegmentInfo() {\n        _classCallCheck(this, MediaSegmentInfo);\n\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    _createClass(MediaSegmentInfo, [{\n        key: \"appendSyncPoint\",\n        value: function appendSyncPoint(sampleInfo) {\n            // also called Random Access Point\n            sampleInfo.isSyncPoint = true;\n            this.syncPoints.push(sampleInfo);\n        }\n    }]);\n\n    return MediaSegmentInfo;\n}();\n\n// Ordered list for recording video IDR frames, sorted by originalDts\n\n\nvar IDRSampleList = exports.IDRSampleList = function () {\n    function IDRSampleList() {\n        _classCallCheck(this, IDRSampleList);\n\n        this._list = [];\n    }\n\n    _createClass(IDRSampleList, [{\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n        }\n    }, {\n        key: \"appendArray\",\n        value: function appendArray(syncPoints) {\n            var list = this._list;\n\n            if (syncPoints.length === 0) {\n                return;\n            }\n\n            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n                this.clear();\n            }\n\n            Array.prototype.push.apply(list, syncPoints);\n        }\n    }, {\n        key: \"getLastSyncPointBeforeDts\",\n        value: function getLastSyncPointBeforeDts(dts) {\n            if (this._list.length == 0) {\n                return null;\n            }\n\n            var list = this._list;\n            var idx = 0;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (dts < list[0].dts) {\n                idx = 0;\n                lbound = ubound + 1;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].dts < dts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return this._list[idx];\n        }\n    }]);\n\n    return IDRSampleList;\n}();\n\n// Data structure for recording information of media segments in single track.\n\n\nvar MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {\n    function MediaSegmentInfoList(type) {\n        _classCallCheck(this, MediaSegmentInfoList);\n\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    _createClass(MediaSegmentInfoList, [{\n        key: \"isEmpty\",\n        value: function isEmpty() {\n            return this._list.length === 0;\n        }\n    }, {\n        key: \"clear\",\n        value: function clear() {\n            this._list = [];\n            this._lastAppendLocation = -1;\n        }\n    }, {\n        key: \"_searchNearestSegmentBefore\",\n        value: function _searchNearestSegmentBefore(originalBeginDts) {\n            var list = this._list;\n            if (list.length === 0) {\n                return -2;\n            }\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            var idx = 0;\n\n            if (originalBeginDts < list[0].originalBeginDts) {\n                idx = -1;\n                return idx;\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {\n                    idx = mid;\n                    break;\n                } else if (list[mid].originalBeginDts < originalBeginDts) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: \"_searchNearestSegmentAfter\",\n        value: function _searchNearestSegmentAfter(originalBeginDts) {\n            return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n        }\n    }, {\n        key: \"append\",\n        value: function append(mediaSegmentInfo) {\n            var list = this._list;\n            var msi = mediaSegmentInfo;\n            var lastAppendIdx = this._lastAppendLocation;\n            var insertIdx = 0;\n\n            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {\n                insertIdx = lastAppendIdx + 1; // use cached location idx\n            } else {\n                if (list.length > 0) {\n                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n                }\n            }\n\n            this._lastAppendLocation = insertIdx;\n            this._list.splice(insertIdx, 0, msi);\n        }\n    }, {\n        key: \"getLastSegmentBefore\",\n        value: function getLastSegmentBefore(originalBeginDts) {\n            var idx = this._searchNearestSegmentBefore(originalBeginDts);\n            if (idx >= 0) {\n                return this._list[idx];\n            } else {\n                // -1\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSampleBefore\",\n        value: function getLastSampleBefore(originalBeginDts) {\n            var segment = this.getLastSegmentBefore(originalBeginDts);\n            if (segment != null) {\n                return segment.lastSample;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"getLastSyncPointBefore\",\n        value: function getLastSyncPointBefore(originalBeginDts) {\n            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n            var syncPoints = this._list[segmentIdx].syncPoints;\n            while (syncPoints.length === 0 && segmentIdx > 0) {\n                segmentIdx--;\n                syncPoints = this._list[segmentIdx].syncPoints;\n            }\n            if (syncPoints.length > 0) {\n                return syncPoints[syncPoints.length - 1];\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: \"length\",\n        get: function get() {\n            return this._list.length;\n        }\n    }]);\n\n    return MediaSegmentInfoList;\n}();\n\n},{}],9:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mseEvents = _dereq_('./mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _mediaSegmentInfo = _dereq_('./media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Media Source Extensions controller\nvar MSEController = function () {\n    function MSEController() {\n        _classCallCheck(this, MSEController);\n\n        this.TAG = 'MSEController';\n\n        this._emitter = new _events2.default();\n\n        this.e = {\n            onSourceOpen: this._onSourceOpen.bind(this),\n            onSourceEnded: this._onSourceEnded.bind(this),\n            onSourceClose: this._onSourceClose.bind(this),\n            onSourceBufferError: this._onSourceBufferError.bind(this),\n            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\n        };\n\n        this._mediaSource = null;\n        this._mediaSourceObjectURL = null;\n        this._mediaElement = null;\n\n        this._isBufferFull = false;\n        this._hasPendingEos = false;\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n\n        this._pendingSourceBufferInit = [];\n        this._mimeTypes = {\n            video: null,\n            audio: null\n        };\n        this._sourceBuffers = {\n            video: null,\n            audio: null\n        };\n        this._lastInitSegments = {\n            video: null,\n            audio: null\n        };\n        this._pendingSegments = {\n            video: [],\n            audio: []\n        };\n        this._pendingRemoveRanges = {\n            video: [],\n            audio: []\n        };\n        this._idrList = new _mediaSegmentInfo.IDRSampleList();\n    }\n\n    _createClass(MSEController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement || this._mediaSource) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            if (this._mediaSource) {\n                throw new _exception.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\n            }\n            var ms = this._mediaSource = new window.MediaSource();\n            ms.addEventListener('sourceopen', this.e.onSourceOpen);\n            ms.addEventListener('sourceended', this.e.onSourceEnded);\n            ms.addEventListener('sourceclose', this.e.onSourceClose);\n\n            this._mediaElement = mediaElement;\n            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\n            mediaElement.src = this._mediaSourceObjectURL;\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaSource) {\n                var ms = this._mediaSource;\n                for (var type in this._sourceBuffers) {\n                    // pending segments should be discard\n                    var ps = this._pendingSegments[type];\n                    ps.splice(0, ps.length);\n                    this._pendingSegments[type] = null;\n                    this._pendingRemoveRanges[type] = null;\n                    this._lastInitSegments[type] = null;\n\n                    // remove all sourcebuffers\n                    var sb = this._sourceBuffers[type];\n                    if (sb) {\n                        if (ms.readyState !== 'closed') {\n                            ms.removeSourceBuffer(sb);\n                            sb.removeEventListener('error', this.e.onSourceBufferError);\n                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                        }\n                        this._mimeTypes[type] = null;\n                        this._sourceBuffers[type] = null;\n                    }\n                }\n                if (ms.readyState === 'open') {\n                    try {\n                        ms.endOfStream();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n                ms.removeEventListener('sourceopen', this.e.onSourceOpen);\n                ms.removeEventListener('sourceended', this.e.onSourceEnded);\n                ms.removeEventListener('sourceclose', this.e.onSourceClose);\n                this._pendingSourceBufferInit = [];\n                this._isBufferFull = false;\n                this._idrList.clear();\n                this._mediaSource = null;\n            }\n\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement = null;\n            }\n            if (this._mediaSourceObjectURL) {\n                window.URL.revokeObjectURL(this._mediaSourceObjectURL);\n                this._mediaSourceObjectURL = null;\n            }\n        }\n    }, {\n        key: 'appendInitSegment',\n        value: function appendInitSegment(initSegment, deferred) {\n            if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\n                // sourcebuffer creation requires mediaSource.readyState === 'open'\n                // so we defer the sourcebuffer creation, until sourceopen event triggered\n                this._pendingSourceBufferInit.push(initSegment);\n                // make sure that this InitSegment is in the front of pending segments queue\n                this._pendingSegments[initSegment.type].push(initSegment);\n                return;\n            }\n\n            var is = initSegment;\n            var mimeType = '' + is.container;\n            if (is.codec && is.codec.length > 0) {\n                mimeType += ';codecs=' + is.codec;\n            }\n\n            var firstInitSegment = false;\n\n            _logger2.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);\n            this._lastInitSegments[is.type] = is;\n\n            if (mimeType !== this._mimeTypes[is.type]) {\n                if (!this._mimeTypes[is.type]) {\n                    // empty, first chance create sourcebuffer\n                    firstInitSegment = true;\n                    try {\n                        var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);\n                        sb.addEventListener('error', this.e.onSourceBufferError);\n                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                        this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        return;\n                    }\n                } else {\n                    _logger2.default.v(this.TAG, 'Notice: ' + is.type + ' mimeType changed, origin: ' + this._mimeTypes[is.type] + ', target: ' + mimeType);\n                }\n                this._mimeTypes[is.type] = mimeType;\n            }\n\n            if (!deferred) {\n                // deferred means this InitSegment has been pushed to pendingSegments queue\n                this._pendingSegments[is.type].push(is);\n            }\n            if (!firstInitSegment) {\n                // append immediately only if init segment in subsequence\n                if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {\n                    this._doAppendSegments();\n                }\n            }\n            if (_browser2.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\n                // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\n                // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\n                this._requireSetMediaDuration = true;\n                this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds\n                this._updateMediaSourceDuration();\n            }\n        }\n    }, {\n        key: 'appendMediaSegment',\n        value: function appendMediaSegment(mediaSegment) {\n            var ms = mediaSegment;\n            this._pendingSegments[ms.type].push(ms);\n\n            var sb = this._sourceBuffers[ms.type];\n            if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\n                this._doAppendSegments();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(seconds) {\n            // remove all appended buffers\n            for (var type in this._sourceBuffers) {\n                if (!this._sourceBuffers[type]) {\n                    continue;\n                }\n\n                // abort current buffer append algorithm\n                var sb = this._sourceBuffers[type];\n                if (this._mediaSource.readyState === 'open') {\n                    try {\n                        // If range removal algorithm is running, InvalidStateError will be throwed\n                        // Ignore it.\n                        sb.abort();\n                    } catch (error) {\n                        _logger2.default.e(this.TAG, error.message);\n                    }\n                }\n\n                // IDRList should be clear\n                this._idrList.clear();\n\n                // pending segments should be discard\n                var ps = this._pendingSegments[type];\n                ps.splice(0, ps.length);\n\n                if (this._mediaSource.readyState === 'closed') {\n                    // Parent MediaSource object has been detached from HTMLMediaElement\n                    continue;\n                }\n\n                // record ranges to be remove from SourceBuffer\n                for (var i = 0; i < sb.buffered.length; i++) {\n                    var start = sb.buffered.start(i);\n                    var end = sb.buffered.end(i);\n                    this._pendingRemoveRanges[type].push({ start: start, end: end });\n                }\n\n                // if sb is not updating, let's remove ranges now!\n                if (!sb.updating) {\n                    this._doRemoveRanges();\n                }\n\n                // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\n                // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\n                // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\n                if (_browser2.default.safari) {\n                    var lastInitSegment = this._lastInitSegments[type];\n                    if (lastInitSegment) {\n                        this._pendingSegments[type].push(lastInitSegment);\n                        if (!sb.updating) {\n                            this._doAppendSegments();\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'endOfStream',\n        value: function endOfStream() {\n            var ms = this._mediaSource;\n            var sb = this._sourceBuffers;\n            if (!ms || ms.readyState !== 'open') {\n                if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\n                    // If MediaSource hasn't turned into open state, and there're pending segments\n                    // Mark pending endOfStream, defer call until all pending segments appended complete\n                    this._hasPendingEos = true;\n                }\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                // If any sourcebuffer is updating, defer endOfStream operation\n                // See _onSourceBufferUpdateEnd()\n                this._hasPendingEos = true;\n            } else {\n                this._hasPendingEos = false;\n                // Notify media data loading complete\n                // This is helpful for correcting total duration to match last media segment\n                // Otherwise MediaElement's ended event may not be triggered\n                ms.endOfStream();\n            }\n        }\n    }, {\n        key: 'getNearestKeyframe',\n        value: function getNearestKeyframe(dts) {\n            return this._idrList.getLastSyncPointBeforeDts(dts);\n        }\n    }, {\n        key: '_updateMediaSourceDuration',\n        value: function _updateMediaSourceDuration() {\n            var sb = this._sourceBuffers;\n            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {\n                return;\n            }\n            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n                return;\n            }\n\n            var current = this._mediaSource.duration;\n            var target = this._pendingMediaDuration;\n\n            if (target > 0 && (isNaN(current) || target > current)) {\n                _logger2.default.v(this.TAG, 'Update MediaSource duration from ' + current + ' to ' + target);\n                this._mediaSource.duration = target;\n            }\n\n            this._requireSetMediaDuration = false;\n            this._pendingMediaDuration = 0;\n        }\n    }, {\n        key: '_doRemoveRanges',\n        value: function _doRemoveRanges() {\n            for (var type in this._pendingRemoveRanges) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n                var sb = this._sourceBuffers[type];\n                var ranges = this._pendingRemoveRanges[type];\n                while (ranges.length && !sb.updating) {\n                    var range = ranges.shift();\n                    sb.remove(range.start, range.end);\n                }\n            }\n        }\n    }, {\n        key: '_doAppendSegments',\n        value: function _doAppendSegments() {\n            var pendingSegments = this._pendingSegments;\n\n            for (var type in pendingSegments) {\n                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                    continue;\n                }\n\n                if (pendingSegments[type].length > 0) {\n                    var segment = pendingSegments[type].shift();\n\n                    if (segment.timestampOffset) {\n                        // For MPEG audio stream in MSE, if unbuffered-seeking occurred\n                        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                        var currentOffset = this._sourceBuffers[type].timestampOffset;\n                        var targetOffset = segment.timestampOffset / 1000; // in seconds\n\n                        var delta = Math.abs(currentOffset - targetOffset);\n                        if (delta > 0.1) {\n                            // If time delta > 100ms\n                            _logger2.default.v(this.TAG, 'Update MPEG audio timestampOffset from ' + currentOffset + ' to ' + targetOffset);\n                            this._sourceBuffers[type].timestampOffset = targetOffset;\n                        }\n                        delete segment.timestampOffset;\n                    }\n\n                    if (!segment.data || segment.data.byteLength === 0) {\n                        // Ignore empty buffer\n                        continue;\n                    }\n\n                    try {\n                        this._sourceBuffers[type].appendBuffer(segment.data);\n                        this._isBufferFull = false;\n                        if (type === 'video' && segment.hasOwnProperty('info')) {\n                            this._idrList.appendArray(segment.info.syncPoints);\n                        }\n                    } catch (error) {\n                        this._pendingSegments[type].unshift(segment);\n                        if (error.code === 22) {\n                            // QuotaExceededError\n                            /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\n                             * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\n                             * SourceBuffer eviction policy may be changed in future version of FireFox.\n                             *\n                             * Related issues:\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\n                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\n                             */\n\n                            // report buffer full, abort network IO\n                            if (!this._isBufferFull) {\n                                this._emitter.emit(_mseEvents2.default.BUFFER_FULL);\n                            }\n                            this._isBufferFull = true;\n                        } else {\n                            _logger2.default.e(this.TAG, error.message);\n                            this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onSourceOpen',\n        value: function _onSourceOpen() {\n            _logger2.default.v(this.TAG, 'MediaSource onSourceOpen');\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n            // deferred sourcebuffer creation / initialization\n            if (this._pendingSourceBufferInit.length > 0) {\n                var pendings = this._pendingSourceBufferInit;\n                while (pendings.length) {\n                    var segment = pendings.shift();\n                    this.appendInitSegment(segment, true);\n                }\n            }\n            // there may be some pending media segments, append them\n            if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            }\n            this._emitter.emit(_mseEvents2.default.SOURCE_OPEN);\n        }\n    }, {\n        key: '_onSourceEnded',\n        value: function _onSourceEnded() {\n            // fired on endOfStream\n            _logger2.default.v(this.TAG, 'MediaSource onSourceEnded');\n        }\n    }, {\n        key: '_onSourceClose',\n        value: function _onSourceClose() {\n            // fired on detaching from media element\n            _logger2.default.v(this.TAG, 'MediaSource onSourceClose');\n            if (this._mediaSource && this.e != null) {\n                this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n                this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\n                this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\n            }\n        }\n    }, {\n        key: '_hasPendingSegments',\n        value: function _hasPendingSegments() {\n            var ps = this._pendingSegments;\n            return ps.video.length > 0 || ps.audio.length > 0;\n        }\n    }, {\n        key: '_hasPendingRemoveRanges',\n        value: function _hasPendingRemoveRanges() {\n            var prr = this._pendingRemoveRanges;\n            return prr.video.length > 0 || prr.audio.length > 0;\n        }\n    }, {\n        key: '_onSourceBufferUpdateEnd',\n        value: function _onSourceBufferUpdateEnd() {\n            if (this._requireSetMediaDuration) {\n                this._updateMediaSourceDuration();\n            } else if (this._hasPendingRemoveRanges()) {\n                this._doRemoveRanges();\n            } else if (this._hasPendingSegments()) {\n                this._doAppendSegments();\n            } else if (this._hasPendingEos) {\n                this.endOfStream();\n            }\n            this._emitter.emit(_mseEvents2.default.UPDATE_END);\n        }\n    }, {\n        key: '_onSourceBufferError',\n        value: function _onSourceBufferError(e) {\n            _logger2.default.e(this.TAG, 'SourceBuffer Error: ' + e);\n            // this error might not always be fatal, just ignore it\n        }\n    }]);\n\n    return MSEController;\n}();\n\nexports.default = MSEController;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./media-segment-info.js\":8,\"./mse-events.js\":10,\"events\":2}],10:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MSEEvents = {\n  ERROR: 'error',\n  SOURCE_OPEN: 'source_open',\n  UPDATE_END: 'update_end',\n  BUFFER_FULL: 'buffer_full'\n};\n\nexports.default = MSEEvents;\n\n},{}],11:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _transmuxingWorker = _dereq_('./transmuxing-worker.js');\n\nvar _transmuxingWorker2 = _interopRequireDefault(_transmuxingWorker);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Transmuxer = function () {\n    function Transmuxer(mediaDataSource, config) {\n        _classCallCheck(this, Transmuxer);\n\n        this.TAG = 'Transmuxer';\n        this._emitter = new _events2.default();\n\n        if (config.enableWorker && typeof Worker !== 'undefined') {\n            try {\n                var work = _dereq_('webworkify');\n                this._worker = work(_transmuxingWorker2.default);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                _loggingControl2.default.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({ cmd: 'logging_config', param: _loggingControl2.default.getConfig() });\n            } catch (error) {\n                _logger2.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new _transmuxingController2.default(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new _transmuxingController2.default(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            var ctl = this._controller;\n            ctl.on(_transmuxingEvents2.default.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(_transmuxingEvents2.default.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(_transmuxingEvents2.default.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(_transmuxingEvents2.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(_transmuxingEvents2.default.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n        }\n    }\n\n    _createClass(Transmuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._worker) {\n                if (!this._workerDestroying) {\n                    this._workerDestroying = true;\n                    this._worker.postMessage({ cmd: 'destroy' });\n                    _loggingControl2.default.removeListener(this.e.onLoggingConfigChanged);\n                    this.e = null;\n                }\n            } else {\n                this._controller.destroy();\n                this._controller = null;\n            }\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'hasWorker',\n        value: function hasWorker() {\n            return this._worker != null;\n        }\n    }, {\n        key: 'open',\n        value: function open() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'start' });\n            } else {\n                this._controller.start();\n            }\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'stop' });\n            } else {\n                this._controller.stop();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'seek', param: milliseconds });\n            } else {\n                this._controller.seek(milliseconds);\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'pause' });\n            } else {\n                this._controller.pause();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'resume' });\n            } else {\n                this._controller.resume();\n            }\n        }\n    }, {\n        key: '_onInitSegment',\n        value: function _onInitSegment(type, initSegment) {\n            var _this = this;\n\n            // do async invoke\n            Promise.resolve().then(function () {\n                _this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n            });\n        }\n    }, {\n        key: '_onMediaSegment',\n        value: function _onMediaSegment(type, mediaSegment) {\n            var _this2 = this;\n\n            Promise.resolve().then(function () {\n                _this2._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n            });\n        }\n    }, {\n        key: '_onLoadingComplete',\n        value: function _onLoadingComplete() {\n            var _this3 = this;\n\n            Promise.resolve().then(function () {\n                _this3._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n            });\n        }\n    }, {\n        key: '_onRecoveredEarlyEof',\n        value: function _onRecoveredEarlyEof() {\n            var _this4 = this;\n\n            Promise.resolve().then(function () {\n                _this4._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n            });\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this5 = this;\n\n            Promise.resolve().then(function () {\n                _this5._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, mediaInfo);\n            });\n        }\n    }, {\n        key: '_onStatisticsInfo',\n        value: function _onStatisticsInfo(statisticsInfo) {\n            var _this6 = this;\n\n            Promise.resolve().then(function () {\n                _this6._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, statisticsInfo);\n            });\n        }\n    }, {\n        key: '_onIOError',\n        value: function _onIOError(type, info) {\n            var _this7 = this;\n\n            Promise.resolve().then(function () {\n                _this7._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onDemuxError',\n        value: function _onDemuxError(type, info) {\n            var _this8 = this;\n\n            Promise.resolve().then(function () {\n                _this8._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n            });\n        }\n    }, {\n        key: '_onRecommendSeekpoint',\n        value: function _onRecommendSeekpoint(milliseconds) {\n            var _this9 = this;\n\n            Promise.resolve().then(function () {\n                _this9._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, milliseconds);\n            });\n        }\n    }, {\n        key: '_onLoggingConfigChanged',\n        value: function _onLoggingConfigChanged(config) {\n            if (this._worker) {\n                this._worker.postMessage({ cmd: 'logging_config', param: config });\n            }\n        }\n    }, {\n        key: '_onWorkerMessage',\n        value: function _onWorkerMessage(e) {\n            var message = e.data;\n            var data = message.data;\n\n            if (message.msg === 'destroyed' || this._workerDestroying) {\n                this._workerDestroying = false;\n                this._worker.terminate();\n                this._worker = null;\n                return;\n            }\n\n            switch (message.msg) {\n                case _transmuxingEvents2.default.INIT_SEGMENT:\n                case _transmuxingEvents2.default.MEDIA_SEGMENT:\n                    this._emitter.emit(message.msg, data.type, data.data);\n                    break;\n                case _transmuxingEvents2.default.LOADING_COMPLETE:\n                case _transmuxingEvents2.default.RECOVERED_EARLY_EOF:\n                    this._emitter.emit(message.msg);\n                    break;\n                case _transmuxingEvents2.default.MEDIA_INFO:\n                    Object.setPrototypeOf(data, _mediaInfo2.default.prototype);\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.STATISTICS_INFO:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                case _transmuxingEvents2.default.IO_ERROR:\n                case _transmuxingEvents2.default.DEMUX_ERROR:\n                    this._emitter.emit(message.msg, data.type, data.info);\n                    break;\n                case _transmuxingEvents2.default.RECOMMEND_SEEKPOINT:\n                    this._emitter.emit(message.msg, data);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }]);\n\n    return Transmuxer;\n}();\n\nexports.default = Transmuxer;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"./media-info.js\":7,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13,\"./transmuxing-worker.js\":14,\"events\":2,\"webworkify\":4}],12:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaInfo = _dereq_('./media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _flvDemuxer = _dereq_('../demux/flv-demuxer.js');\n\nvar _flvDemuxer2 = _interopRequireDefault(_flvDemuxer);\n\nvar _mp4Remuxer = _dereq_('../remux/mp4-remuxer.js');\n\nvar _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _ioController = _dereq_('../io/io-controller.js');\n\nvar _ioController2 = _interopRequireDefault(_ioController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _loader = _dereq_('../io/loader.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\nvar TransmuxingController = function () {\n    function TransmuxingController(mediaDataSource, config) {\n        _classCallCheck(this, TransmuxingController);\n\n        this.TAG = 'TransmuxingController';\n        this._emitter = new _events2.default();\n\n        this._config = config;\n\n        // treat single part media as multipart media, which has only one segment\n        if (!mediaDataSource.segments) {\n            mediaDataSource.segments = [{\n                duration: mediaDataSource.duration,\n                filesize: mediaDataSource.filesize,\n                url: mediaDataSource.url\n            }];\n        }\n\n        // fill in default IO params if not exists\n        if (typeof mediaDataSource.cors !== 'boolean') {\n            mediaDataSource.cors = true;\n        }\n        if (typeof mediaDataSource.withCredentials !== 'boolean') {\n            mediaDataSource.withCredentials = false;\n        }\n\n        this._mediaDataSource = mediaDataSource;\n        this._currentSegmentIndex = 0;\n        var totalDuration = 0;\n\n        this._mediaDataSource.segments.forEach(function (segment) {\n            // timestampBase for each segment, and calculate total duration\n            segment.timestampBase = totalDuration;\n            totalDuration += segment.duration;\n            // params needed by IOController\n            segment.cors = mediaDataSource.cors;\n            segment.withCredentials = mediaDataSource.withCredentials;\n        });\n\n        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\n            this._mediaDataSource.duration = totalDuration;\n        }\n\n        this._mediaInfo = null;\n        this._demuxer = null;\n        this._remuxer = null;\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReporter = null;\n    }\n\n    _createClass(TransmuxingController, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._mediaDataSource = null;\n\n            if (this._statisticsReporter) {\n                this._disableStatisticsReporter();\n            }\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n            if (this._demuxer) {\n                this._demuxer.destroy();\n                this._demuxer = null;\n            }\n            if (this._remuxer) {\n                this._remuxer.destroy();\n                this._remuxer = null;\n            }\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            this._loadSegment(0);\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_loadSegment',\n        value: function _loadSegment(segmentIndex, optionalFrom) {\n            this._currentSegmentIndex = segmentIndex;\n            var dataSource = this._mediaDataSource.segments[segmentIndex];\n\n            var ioctl = this._ioctl = new _ioController2.default(dataSource, this._config, segmentIndex);\n            ioctl.onError = this._onIOException.bind(this);\n            ioctl.onSeeked = this._onIOSeeked.bind(this);\n            ioctl.onComplete = this._onIOComplete.bind(this);\n            ioctl.onRedirect = this._onIORedirect.bind(this);\n            ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\n\n            if (optionalFrom) {\n                this._demuxer.bindDataSource(this._ioctl);\n            } else {\n                ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\n            }\n\n            ioctl.open(optionalFrom);\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this._internalAbort();\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._ioctl) {\n                this._ioctl.destroy();\n                this._ioctl = null;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            // take a rest\n            if (this._ioctl && this._ioctl.isWorking()) {\n                this._ioctl.pause();\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._ioctl && this._ioctl.isPaused()) {\n                this._ioctl.resume();\n                this._enableStatisticsReporter();\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(milliseconds) {\n            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\n                return;\n            }\n\n            var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\n\n            if (targetSegmentIndex === this._currentSegmentIndex) {\n                // intra-segment seeking\n                var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (segmentInfo == undefined) {\n                    // current segment loading started, but mediainfo hasn't received yet\n                    // wait for the metadata loaded, then seek to expected position\n                    this._pendingSeekTime = milliseconds;\n                } else {\n                    var keyframe = segmentInfo.getNearestKeyframe(milliseconds);\n                    this._remuxer.seek(keyframe.milliseconds);\n                    this._ioctl.seek(keyframe.fileposition);\n                    // Will be resolved in _onRemuxerMediaSegmentArrival()\n                    this._pendingResolveSeekPoint = keyframe.milliseconds;\n                }\n            } else {\n                // cross-segment seeking\n                var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n                if (targetSegmentInfo == undefined) {\n                    // target segment hasn't been loaded. We need metadata then seek to expected time\n                    this._pendingSeekTime = milliseconds;\n                    this._internalAbort();\n                    this._remuxer.seek();\n                    this._remuxer.insertDiscontinuity();\n                    this._loadSegment(targetSegmentIndex);\n                    // Here we wait for the metadata loaded, then seek to expected position\n                } else {\n                    // We have target segment's metadata, direct seek to target position\n                    var _keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\n                    this._internalAbort();\n                    this._remuxer.seek(milliseconds);\n                    this._remuxer.insertDiscontinuity();\n                    this._demuxer.resetMediaInfo();\n                    this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;\n                    this._loadSegment(targetSegmentIndex, _keyframe.fileposition);\n                    this._pendingResolveSeekPoint = _keyframe.milliseconds;\n                    this._reportSegmentMediaInfo(targetSegmentIndex);\n                }\n            }\n\n            this._enableStatisticsReporter();\n        }\n    }, {\n        key: '_searchSegmentIndexContains',\n        value: function _searchSegmentIndexContains(milliseconds) {\n            var segments = this._mediaDataSource.segments;\n            var idx = segments.length - 1;\n\n            for (var i = 0; i < segments.length; i++) {\n                if (milliseconds < segments[i].timestampBase) {\n                    idx = i - 1;\n                    break;\n                }\n            }\n            return idx;\n        }\n    }, {\n        key: '_onInitChunkArrival',\n        value: function _onInitChunkArrival(data, byteStart) {\n            var _this = this;\n\n            var probeData = null;\n            var consumed = 0;\n\n            if (byteStart > 0) {\n                // IOController seeked immediately after opened, byteStart > 0 callback may received\n                this._demuxer.bindDataSource(this._ioctl);\n                this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else if ((probeData = _flvDemuxer2.default.probe(data)).match) {\n                // Always create new FLVDemuxer\n                this._demuxer = new _flvDemuxer2.default(probeData, this._config);\n\n                if (!this._remuxer) {\n                    this._remuxer = new _mp4Remuxer2.default(this._config);\n                }\n\n                var mds = this._mediaDataSource;\n                if (mds.duration != undefined && !isNaN(mds.duration)) {\n                    this._demuxer.overridedDuration = mds.duration;\n                }\n                this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;\n\n                this._demuxer.onError = this._onDemuxException.bind(this);\n                this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);\n\n                this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl));\n\n                this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\n                this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\n\n                consumed = this._demuxer.parseChunks(data, byteStart);\n            } else {\n                probeData = null;\n                _logger2.default.e(this.TAG, 'Non-FLV, Unsupported media type!');\n                Promise.resolve().then(function () {\n                    _this._internalAbort();\n                });\n                this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, _demuxErrors2.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');\n\n                consumed = 0;\n            }\n\n            return consumed;\n        }\n    }, {\n        key: '_onMediaInfo',\n        value: function _onMediaInfo(mediaInfo) {\n            var _this2 = this;\n\n            if (this._mediaInfo == null) {\n                // Store first segment's mediainfo as global mediaInfo\n                this._mediaInfo = Object.assign({}, mediaInfo);\n                this._mediaInfo.keyframesIndex = null;\n                this._mediaInfo.segments = [];\n                this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\n                Object.setPrototypeOf(this._mediaInfo, _mediaInfo2.default.prototype);\n            }\n\n            var segmentInfo = Object.assign({}, mediaInfo);\n            Object.setPrototypeOf(segmentInfo, _mediaInfo2.default.prototype);\n            this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\n\n            // notify mediaInfo update\n            this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n            if (this._pendingSeekTime != null) {\n                Promise.resolve().then(function () {\n                    var target = _this2._pendingSeekTime;\n                    _this2._pendingSeekTime = null;\n                    _this2.seek(target);\n                });\n            }\n        }\n    }, {\n        key: '_onIOSeeked',\n        value: function _onIOSeeked() {\n            this._remuxer.insertDiscontinuity();\n        }\n    }, {\n        key: '_onIOComplete',\n        value: function _onIOComplete(extraData) {\n            var segmentIndex = extraData;\n            var nextSegmentIndex = segmentIndex + 1;\n\n            if (nextSegmentIndex < this._mediaDataSource.segments.length) {\n                this._internalAbort();\n                this._loadSegment(nextSegmentIndex);\n            } else {\n                this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);\n                this._disableStatisticsReporter();\n            }\n        }\n    }, {\n        key: '_onIORedirect',\n        value: function _onIORedirect(redirectedURL) {\n            var segmentIndex = this._ioctl.extraData;\n            this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;\n        }\n    }, {\n        key: '_onIORecoveredEarlyEof',\n        value: function _onIORecoveredEarlyEof() {\n            this._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);\n        }\n    }, {\n        key: '_onIOException',\n        value: function _onIOException(type, info) {\n            _logger2.default.e(this.TAG, 'IOException: type = ' + type + ', code = ' + info.code + ', msg = ' + info.msg);\n            this._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);\n            this._disableStatisticsReporter();\n        }\n    }, {\n        key: '_onDemuxException',\n        value: function _onDemuxException(type, info) {\n            _logger2.default.e(this.TAG, 'DemuxException: type = ' + type + ', info = ' + info);\n            this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);\n        }\n    }, {\n        key: '_onRemuxerInitSegmentArrival',\n        value: function _onRemuxerInitSegmentArrival(type, initSegment) {\n            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);\n        }\n    }, {\n        key: '_onRemuxerMediaSegmentArrival',\n        value: function _onRemuxerMediaSegmentArrival(type, mediaSegment) {\n            if (this._pendingSeekTime != null) {\n                // Media segments after new-segment cross-seeking should be dropped.\n                return;\n            }\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);\n\n            // Resolve pending seekPoint\n            if (this._pendingResolveSeekPoint != null && type === 'video') {\n                var syncPoints = mediaSegment.info.syncPoints;\n                var seekpoint = this._pendingResolveSeekPoint;\n                this._pendingResolveSeekPoint = null;\n\n                // Safari: Pass PTS for recommend_seekpoint\n                if (_browser2.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\n                    seekpoint = syncPoints[0].pts;\n                }\n                // else: use original DTS (keyframe.milliseconds)\n\n                this._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, seekpoint);\n            }\n        }\n    }, {\n        key: '_enableStatisticsReporter',\n        value: function _enableStatisticsReporter() {\n            if (this._statisticsReporter == null) {\n                this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n            }\n        }\n    }, {\n        key: '_disableStatisticsReporter',\n        value: function _disableStatisticsReporter() {\n            if (this._statisticsReporter) {\n                self.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: '_reportSegmentMediaInfo',\n        value: function _reportSegmentMediaInfo(segmentIndex) {\n            var segmentInfo = this._mediaInfo.segments[segmentIndex];\n            var exportInfo = Object.assign({}, segmentInfo);\n\n            exportInfo.duration = this._mediaInfo.duration;\n            exportInfo.segmentCount = this._mediaInfo.segmentCount;\n            delete exportInfo.segments;\n            delete exportInfo.keyframesIndex;\n\n            this._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, exportInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            var info = {};\n\n            info.url = this._ioctl.currentURL;\n            info.hasRedirect = this._ioctl.hasRedirect;\n            if (info.hasRedirect) {\n                info.redirectedURL = this._ioctl.currentRedirectedURL;\n            }\n\n            info.speed = this._ioctl.currentSpeed;\n            info.loaderType = this._ioctl.loaderType;\n            info.currentSegmentIndex = this._currentSegmentIndex;\n            info.totalSegmentCount = this._mediaDataSource.segments.length;\n\n            this._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, info);\n        }\n    }]);\n\n    return TransmuxingController;\n}();\n\nexports.default = TransmuxingController;\n\n},{\"../demux/demux-errors.js\":16,\"../demux/flv-demuxer.js\":18,\"../io/io-controller.js\":23,\"../io/loader.js\":24,\"../remux/mp4-remuxer.js\":38,\"../utils/browser.js\":39,\"../utils/logger.js\":41,\"./media-info.js\":7,\"./transmuxing-events.js\":13,\"events\":2}],13:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar TransmuxingEvents = {\n  IO_ERROR: 'io_error',\n  DEMUX_ERROR: 'demux_error',\n  INIT_SEGMENT: 'init_segment',\n  MEDIA_SEGMENT: 'media_segment',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  STATISTICS_INFO: 'statistics_info',\n  RECOMMEND_SEEKPOINT: 'recommend_seekpoint'\n};\n\nexports.default = TransmuxingEvents;\n\n},{}],14:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loggingControl = _dereq_('../utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _polyfill = _dereq_('../utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _transmuxingController = _dereq_('./transmuxing-controller.js');\n\nvar _transmuxingController2 = _interopRequireDefault(_transmuxingController);\n\nvar _transmuxingEvents = _dereq_('./transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n\nvar TransmuxingWorker = function TransmuxingWorker(self) {\n\n    var TAG = 'TransmuxingWorker';\n    var controller = null;\n\n    _polyfill2.default.install();\n\n    self.addEventListener('message', function (e) {\n        switch (e.data.cmd) {\n            case 'init':\n                controller = new _transmuxingController2.default(e.data.param[0], e.data.param[1]);\n                controller.on(_transmuxingEvents2.default.IO_ERROR, onIOError.bind(this));\n                controller.on(_transmuxingEvents2.default.DEMUX_ERROR, onDemuxError.bind(this));\n                controller.on(_transmuxingEvents2.default.INIT_SEGMENT, onInitSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_SEGMENT, onMediaSegment.bind(this));\n                controller.on(_transmuxingEvents2.default.LOADING_COMPLETE, onLoadingComplete.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n                controller.on(_transmuxingEvents2.default.MEDIA_INFO, onMediaInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.STATISTICS_INFO, onStatisticsInfo.bind(this));\n                controller.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n                break;\n            case 'destroy':\n                if (controller) {\n                    controller.destroy();\n                    controller = null;\n                }\n                self.postMessage({ msg: 'destroyed' });\n                break;\n            case 'start':\n                controller.start();\n                break;\n            case 'stop':\n                controller.stop();\n                break;\n            case 'seek':\n                controller.seek(e.data.param);\n                break;\n            case 'pause':\n                controller.pause();\n                break;\n            case 'resume':\n                controller.resume();\n                break;\n            case 'logging_config':\n                _loggingControl2.default.applyConfig(e.data.param);\n                break;\n        }\n    });\n\n    function onInitSegment(type, initSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.INIT_SEGMENT,\n            data: {\n                type: type,\n                data: initSegment\n            }\n        };\n        self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer\n    }\n\n    function onMediaSegment(type, mediaSegment) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_SEGMENT,\n            data: {\n                type: type,\n                data: mediaSegment\n            }\n        };\n        self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        var obj = {\n            msg: _transmuxingEvents2.default.LOADING_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        var obj = {\n            msg: _transmuxingEvents2.default.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo) {\n        var obj = {\n            msg: _transmuxingEvents2.default.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.IO_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onDemuxError(type, info) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.DEMUX_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds) {\n        self.postMessage({\n            msg: _transmuxingEvents2.default.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n}; /*\n    * Copyright (C) 2016 Bilibili. All Rights Reserved.\n    *\n    * @author zheng qian <xqq@xqq.im>\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *     http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n\nexports.default = TransmuxingWorker;\n\n},{\"../utils/logger.js\":41,\"../utils/logging-control.js\":42,\"../utils/polyfill.js\":43,\"./transmuxing-controller.js\":12,\"./transmuxing-events.js\":13}],15:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _utf8Conv = _dereq_('../utils/utf8-conv.js');\n\nvar _utf8Conv2 = _interopRequireDefault(_utf8Conv);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar le = function () {\n    var buf = new ArrayBuffer(2);\n    new DataView(buf).setInt16(0, 256, true); // little-endian write\n    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n}();\n\nvar AMF = function () {\n    function AMF() {\n        _classCallCheck(this, AMF);\n    }\n\n    _createClass(AMF, null, [{\n        key: 'parseScriptData',\n        value: function parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var data = {};\n\n            try {\n                var name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\n                var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n\n                data[name.data] = value.data;\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return data;\n        }\n    }, {\n        key: 'parseObject',\n        value: function parseObject(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 3) {\n                throw new _exception.IllegalStateException('Data not enough when parse ScriptDataObject');\n            }\n            var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\n            var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n            var isObjectEnd = value.objectEnd;\n\n            return {\n                data: {\n                    name: name.data,\n                    value: value.data\n                },\n                size: name.size + value.size,\n                objectEnd: isObjectEnd\n            };\n        }\n    }, {\n        key: 'parseVariable',\n        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {\n            return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\n        }\n    }, {\n        key: 'parseString',\n        value: function parseString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 2) {\n                throw new _exception.IllegalStateException('Data not enough when parse String');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint16(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 2 + length\n            };\n        }\n    }, {\n        key: 'parseLongString',\n        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 4) {\n                throw new _exception.IllegalStateException('Data not enough when parse LongString');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var length = v.getUint32(0, !le);\n\n            var str = void 0;\n            if (length > 0) {\n                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n            } else {\n                str = '';\n            }\n\n            return {\n                data: str,\n                size: 4 + length\n            };\n        }\n    }, {\n        key: 'parseDate',\n        value: function parseDate(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 10) {\n                throw new _exception.IllegalStateException('Data size invalid when parse Date');\n            }\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n            var timestamp = v.getFloat64(0, !le);\n            var localTimeOffset = v.getInt16(8, !le);\n            timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n            return {\n                data: new Date(timestamp),\n                size: 8 + 2\n            };\n        }\n    }, {\n        key: 'parseValue',\n        value: function parseValue(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 1) {\n                throw new _exception.IllegalStateException('Data not enough when parse Value');\n            }\n\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var offset = 1;\n            var type = v.getUint8(0);\n            var value = void 0;\n            var objectEnd = false;\n\n            try {\n                switch (type) {\n                    case 0:\n                        // Number(Double) type\n                        value = v.getFloat64(1, !le);\n                        offset += 8;\n                        break;\n                    case 1:\n                        {\n                            // Boolean type\n                            var b = v.getUint8(1);\n                            value = b ? true : false;\n                            offset += 1;\n                            break;\n                        }\n                    case 2:\n                        {\n                            // String type\n                            var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfstr.data;\n                            offset += amfstr.size;\n                            break;\n                        }\n                    case 3:\n                        {\n                            // Object(s) type\n                            value = {};\n                            var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                terminal = 3;\n                            }\n                            while (offset < dataSize - 4) {\n                                // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                                var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\n                                if (amfobj.objectEnd) break;\n                                value[amfobj.data.name] = amfobj.data.value;\n                                offset += amfobj.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 8:\n                        {\n                            // ECMA array type (Mixed array)\n                            value = {};\n                            offset += 4; // ECMAArrayLength(UI32)\n                            var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                                _terminal = 3;\n                            }\n                            while (offset < dataSize - 8) {\n                                // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                                var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - _terminal);\n                                if (amfvar.objectEnd) break;\n                                value[amfvar.data.name] = amfvar.data.value;\n                                offset += amfvar.size;\n                            }\n                            if (offset <= dataSize - 3) {\n                                var _marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                                if (_marker === 9) {\n                                    offset += 3;\n                                }\n                            }\n                            break;\n                        }\n                    case 9:\n                        // ScriptDataObjectEnd\n                        value = undefined;\n                        offset = 1;\n                        objectEnd = true;\n                        break;\n                    case 10:\n                        {\n                            // Strict array type\n                            // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                            value = [];\n                            var strictArrayLength = v.getUint32(1, !le);\n                            offset += 4;\n                            for (var i = 0; i < strictArrayLength; i++) {\n                                var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);\n                                value.push(val.data);\n                                offset += val.size;\n                            }\n                            break;\n                        }\n                    case 11:\n                        {\n                            // Date type\n                            var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = date.data;\n                            offset += date.size;\n                            break;\n                        }\n                    case 12:\n                        {\n                            // Long string type\n                            var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                            value = amfLongStr.data;\n                            offset += amfLongStr.size;\n                            break;\n                        }\n                    default:\n                        // ignore and skip\n                        offset = dataSize;\n                        _logger2.default.w('AMF', 'Unsupported AMF value type ' + type);\n                }\n            } catch (e) {\n                _logger2.default.e('AMF', e.toString());\n            }\n\n            return {\n                data: value,\n                size: offset,\n                objectEnd: objectEnd\n            };\n        }\n    }]);\n\n    return AMF;\n}();\n\nexports.default = AMF;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"../utils/utf8-conv.js\":44}],16:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar DemuxErrors = {\n  OK: 'OK',\n  FORMAT_ERROR: 'FormatError',\n  FORMAT_UNSUPPORTED: 'FormatUnsupported',\n  CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n\nexports.default = DemuxErrors;\n\n},{}],17:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Exponential-Golomb buffer decoder\nvar ExpGolomb = function () {\n    function ExpGolomb(uint8array) {\n        _classCallCheck(this, ExpGolomb);\n\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    _createClass(ExpGolomb, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._buffer = null;\n        }\n    }, {\n        key: '_fillCurrentWord',\n        value: function _fillCurrentWord() {\n            var buffer_bytes_left = this._total_bytes - this._buffer_index;\n            if (buffer_bytes_left <= 0) throw new _exception.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n            var bytes_read = Math.min(4, buffer_bytes_left);\n            var word = new Uint8Array(4);\n            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n            this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n            this._buffer_index += bytes_read;\n            this._current_word_bits_left = bytes_read * 8;\n        }\n    }, {\n        key: 'readBits',\n        value: function readBits(bits) {\n            if (bits > 32) throw new _exception.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n            if (bits <= this._current_word_bits_left) {\n                var _result = this._current_word >>> 32 - bits;\n                this._current_word <<= bits;\n                this._current_word_bits_left -= bits;\n                return _result;\n            }\n\n            var result = this._current_word_bits_left ? this._current_word : 0;\n            result = result >>> 32 - this._current_word_bits_left;\n            var bits_need_left = bits - this._current_word_bits_left;\n\n            this._fillCurrentWord();\n            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n            var result2 = this._current_word >>> 32 - bits_read_next;\n            this._current_word <<= bits_read_next;\n            this._current_word_bits_left -= bits_read_next;\n\n            result = result << bits_read_next | result2;\n            return result;\n        }\n    }, {\n        key: 'readBool',\n        value: function readBool() {\n            return this.readBits(1) === 1;\n        }\n    }, {\n        key: 'readByte',\n        value: function readByte() {\n            return this.readBits(8);\n        }\n    }, {\n        key: '_skipLeadingZero',\n        value: function _skipLeadingZero() {\n            var zero_count = void 0;\n            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n                    this._current_word <<= zero_count;\n                    this._current_word_bits_left -= zero_count;\n                    return zero_count;\n                }\n            }\n            this._fillCurrentWord();\n            return zero_count + this._skipLeadingZero();\n        }\n    }, {\n        key: 'readUEG',\n        value: function readUEG() {\n            // unsigned exponential golomb\n            var leading_zeros = this._skipLeadingZero();\n            return this.readBits(leading_zeros + 1) - 1;\n        }\n    }, {\n        key: 'readSEG',\n        value: function readSEG() {\n            // signed exponential golomb\n            var value = this.readUEG();\n            if (value & 0x01) {\n                return value + 1 >>> 1;\n            } else {\n                return -1 * (value >>> 1);\n            }\n        }\n    }]);\n\n    return ExpGolomb;\n}();\n\nexports.default = ExpGolomb;\n\n},{\"../utils/exception.js\":40}],18:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _amfParser = _dereq_('./amf-parser.js');\n\nvar _amfParser2 = _interopRequireDefault(_amfParser);\n\nvar _spsParser = _dereq_('./sps-parser.js');\n\nvar _spsParser2 = _interopRequireDefault(_spsParser);\n\nvar _demuxErrors = _dereq_('./demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nvar _mediaInfo = _dereq_('../core/media-info.js');\n\nvar _mediaInfo2 = _interopRequireDefault(_mediaInfo);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction Swap16(src) {\n    return src >>> 8 & 0xFF | (src & 0xFF) << 8;\n}\n\nfunction Swap32(src) {\n    return (src & 0xFF000000) >>> 24 | (src & 0x00FF0000) >>> 8 | (src & 0x0000FF00) << 8 | (src & 0x000000FF) << 24;\n}\n\nfunction ReadBig32(array, index) {\n    return array[index] << 24 | array[index + 1] << 16 | array[index + 2] << 8 | array[index + 3];\n}\n\nvar FLVDemuxer = function () {\n    function FLVDemuxer(probeData, config) {\n        _classCallCheck(this, FLVDemuxer);\n\n        this.TAG = 'FLVDemuxer';\n\n        this._config = config;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = probeData.dataOffset;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = probeData.hasAudioTrack;\n        this._hasVideo = probeData.hasVideoTrack;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new _mediaInfo2.default();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];\n\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];\n\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };\n\n        this._littleEndian = function () {\n            var buf = new ArrayBuffer(2);\n            new DataView(buf).setInt16(0, 256, true); // little-endian write\n            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n        }();\n    }\n\n    _createClass(FLVDemuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._mediaInfo = null;\n            this._metadata = null;\n            this._audioMetadata = null;\n            this._videoMetadata = null;\n            this._videoTrack = null;\n            this._audioTrack = null;\n\n            this._onError = null;\n            this._onMediaInfo = null;\n            this._onTrackMetadata = null;\n            this._onDataAvailable = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(loader) {\n            loader.onDataArrival = this.parseChunks.bind(this);\n            return this;\n        }\n\n        // prototype: function(type: string, metadata: any): void\n\n    }, {\n        key: 'resetMediaInfo',\n        value: function resetMediaInfo() {\n            this._mediaInfo = new _mediaInfo2.default();\n        }\n    }, {\n        key: '_isInitialMetadataDispatched',\n        value: function _isInitialMetadataDispatched() {\n            if (this._hasAudio && this._hasVideo) {\n                // both audio & video\n                return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n            }\n            if (this._hasAudio && !this._hasVideo) {\n                // audio only\n                return this._audioInitialMetadataDispatched;\n            }\n            if (!this._hasAudio && this._hasVideo) {\n                // video only\n                return this._videoInitialMetadataDispatched;\n            }\n            return false;\n        }\n\n        // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;\n\n    }, {\n        key: 'parseChunks',\n        value: function parseChunks(chunk, byteStart) {\n            if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\n                throw new _exception.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\n            }\n\n            var offset = 0;\n            var le = this._littleEndian;\n\n            if (byteStart === 0) {\n                // buffer with FLV header\n                if (chunk.byteLength > 13) {\n                    var probeData = FLVDemuxer.probe(chunk);\n                    offset = probeData.dataOffset;\n                    byteStart = probeData.dataOffset;\n                } else {\n                    return 0;\n                }\n            }\n\n            if (this._firstParse) {\n                // handle PreviousTagSize0 before Tag1\n                this._firstParse = false;\n                if (byteStart !== this._dataOffset) {\n                    _logger2.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');\n                }\n\n                var v = new DataView(chunk, offset);\n                var prevTagSize0 = v.getUint32(0, !le);\n                if (prevTagSize0 !== 0) {\n                    _logger2.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');\n                }\n                offset += 4;\n            }\n\n            while (offset < chunk.byteLength) {\n                this._dispatch = true;\n\n                var _v = new DataView(chunk, offset);\n\n                if (offset + 11 + 4 > chunk.byteLength) {\n                    // data not enough for parsing an flv tag\n                    break;\n                }\n\n                var tagType = _v.getUint8(0);\n                var dataSize = _v.getUint32(0, !le) & 0x00FFFFFF;\n\n                if (offset + 11 + dataSize + 4 > chunk.byteLength) {\n                    // data not enough for parsing actual data body\n                    break;\n                }\n\n                if (tagType !== 8 && tagType !== 9 && tagType !== 18) {\n                    _logger2.default.w(this.TAG, 'Unsupported tag type ' + tagType + ', skipped');\n                    // consume the whole tag (skip it)\n                    offset += 11 + dataSize + 4;\n                    continue;\n                }\n\n                var ts2 = _v.getUint8(4);\n                var ts1 = _v.getUint8(5);\n                var ts0 = _v.getUint8(6);\n                var ts3 = _v.getUint8(7);\n\n                var timestamp = ts0 | ts1 << 8 | ts2 << 16 | ts3 << 24;\n\n                var streamId = _v.getUint32(7, !le) & 0x00FFFFFF;\n                if (streamId !== 0) {\n                    _logger2.default.w(this.TAG, 'Meet tag which has StreamID != 0!');\n                }\n\n                var dataOffset = offset + 11;\n\n                switch (tagType) {\n                    case 8:\n                        // Audio\n                        this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\n                        break;\n                    case 9:\n                        // Video\n                        this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\n                        break;\n                    case 18:\n                        // ScriptDataObject\n                        this._parseScriptData(chunk, dataOffset, dataSize);\n                        break;\n                }\n\n                var prevTagSize = _v.getUint32(11 + dataSize, !le);\n                if (prevTagSize !== 11 + dataSize) {\n                    _logger2.default.w(this.TAG, 'Invalid PrevTagSize ' + prevTagSize);\n                }\n\n                offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize\n            }\n\n            // dispatch parsed frames to consumer (typically, the remuxer)\n            if (this._isInitialMetadataDispatched()) {\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            }\n\n            return offset; // consumed bytes, just equals latest offset index\n        }\n    }, {\n        key: '_parseScriptData',\n        value: function _parseScriptData(arrayBuffer, dataOffset, dataSize) {\n            var scriptData = _amfParser2.default.parseScriptData(arrayBuffer, dataOffset, dataSize);\n\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                if (this._metadata) {\n                    _logger2.default.w(this.TAG, 'Found another onMetaData tag!');\n                }\n                this._metadata = scriptData;\n                var onMetaData = this._metadata.onMetaData;\n\n                if (typeof onMetaData.hasAudio === 'boolean') {\n                    // hasAudio\n                    this._hasAudio = onMetaData.hasAudio;\n                    this._mediaInfo.hasAudio = this._hasAudio;\n                }\n                if (typeof onMetaData.hasVideo === 'boolean') {\n                    // hasVideo\n                    this._hasVideo = onMetaData.hasVideo;\n                    this._mediaInfo.hasVideo = this._hasVideo;\n                }\n                if (typeof onMetaData.audiodatarate === 'number') {\n                    // audiodatarate\n                    this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n                }\n                if (typeof onMetaData.videodatarate === 'number') {\n                    // videodatarate\n                    this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n                }\n                if (typeof onMetaData.width === 'number') {\n                    // width\n                    this._mediaInfo.width = onMetaData.width;\n                }\n                if (typeof onMetaData.height === 'number') {\n                    // height\n                    this._mediaInfo.height = onMetaData.height;\n                }\n                if (typeof onMetaData.duration === 'number') {\n                    // duration\n                    if (!this._durationOverrided) {\n                        var duration = Math.floor(onMetaData.duration * this._timescale);\n                        this._duration = duration;\n                        this._mediaInfo.duration = duration;\n                    }\n                } else {\n                    this._mediaInfo.duration = 0;\n                }\n                if (typeof onMetaData.framerate === 'number') {\n                    // framerate\n                    var fps_num = Math.floor(onMetaData.framerate * 1000);\n                    if (fps_num > 0) {\n                        var fps = fps_num / 1000;\n                        this._referenceFrameRate.fixed = true;\n                        this._referenceFrameRate.fps = fps;\n                        this._referenceFrameRate.fps_num = fps_num;\n                        this._referenceFrameRate.fps_den = 1000;\n                        this._mediaInfo.fps = fps;\n                    }\n                }\n                if (_typeof(onMetaData.keyframes) === 'object') {\n                    // keyframes\n                    this._mediaInfo.hasKeyframesIndex = true;\n                    var keyframes = onMetaData.keyframes;\n                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                    onMetaData.keyframes = null; // keyframes has been extracted, remove it\n                } else {\n                    this._mediaInfo.hasKeyframesIndex = false;\n                }\n                this._dispatch = false;\n                this._mediaInfo.metadata = onMetaData;\n                _logger2.default.v(this.TAG, 'Parsed onMetaData');\n                if (this._mediaInfo.isComplete()) {\n                    this._onMediaInfo(this._mediaInfo);\n                }\n            }\n        }\n    }, {\n        key: '_parseKeyframesIndex',\n        value: function _parseKeyframesIndex(keyframes) {\n            var times = [];\n            var filepositions = [];\n\n            // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n            for (var i = 1; i < keyframes.times.length; i++) {\n                var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n                times.push(time);\n                filepositions.push(keyframes.filepositions[i]);\n            }\n\n            return {\n                times: times,\n                filepositions: filepositions\n            };\n        }\n    }, {\n        key: '_parseAudioData',\n        value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var soundSpec = v.getUint8(0);\n\n            var soundFormat = soundSpec >>> 4;\n            if (soundFormat !== 2 && soundFormat !== 10) {\n                // MP3 or AAC\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n                return;\n            }\n\n            var soundRate = 0;\n            var soundRateIndex = (soundSpec & 12) >>> 2;\n            if (soundRateIndex >= 0 && soundRateIndex <= 4) {\n                soundRate = this._flvSoundRateTable[soundRateIndex];\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n                return;\n            }\n\n            var soundSize = (soundSpec & 2) >>> 1; // unused\n            var soundType = soundSpec & 1;\n\n            var meta = this._audioMetadata;\n            var track = this._audioTrack;\n\n            if (!meta) {\n                if (this._hasAudio === false) {\n                    this._hasAudio = true;\n                    this._mediaInfo.hasAudio = true;\n                }\n\n                // initial metadata\n                meta = this._audioMetadata = {};\n                meta.type = 'audio';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n                meta.audioSampleRate = soundRate;\n                meta.channelCount = soundType === 0 ? 1 : 2;\n            }\n\n            if (soundFormat === 10) {\n                // AAC\n                var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n                if (aacData == undefined) {\n                    return;\n                }\n\n                if (aacData.packetType === 0) {\n                    // AAC sequence header (AudioSpecificConfig)\n                    if (meta.config) {\n                        _logger2.default.w(this.TAG, 'Found another AudioSpecificConfig!');\n                    }\n                    var misc = aacData.data;\n                    meta.audioSampleRate = misc.samplingRate;\n                    meta.channelCount = misc.channelCount;\n                    meta.codec = misc.codec;\n                    meta.config = misc.config;\n                    // The decode result of an aac sample is 1024 PCM samples\n                    meta.refSampleDuration = Math.floor(1024 / meta.audioSampleRate * meta.timescale);\n                    _logger2.default.v(this.TAG, 'Parsed AudioSpecificConfig');\n\n                    if (this._isInitialMetadataDispatched()) {\n                        // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                            this._onDataAvailable(this._audioTrack, this._videoTrack);\n                        }\n                    } else {\n                        this._audioInitialMetadataDispatched = true;\n                    }\n                    // then notify new metadata\n                    this._dispatch = false;\n                    this._onTrackMetadata('audio', meta);\n\n                    var mi = this._mediaInfo;\n                    mi.audioCodec = 'mp4a.40.' + misc.originalAudioObjectType;\n                    mi.audioSampleRate = meta.audioSampleRate;\n                    mi.audioChannelCount = meta.channelCount;\n                    if (mi.hasVideo) {\n                        if (mi.videoCodec != null) {\n                            mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                        }\n                    } else {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                    }\n                    if (mi.isComplete()) {\n                        this._onMediaInfo(mi);\n                    }\n                } else if (aacData.packetType === 1) {\n                    // AAC raw frame data\n                    var dts = this._timestampBase + tagTimestamp;\n                    var aacSample = { unit: aacData.data, dts: dts, pts: dts };\n                    track.samples.push(aacSample);\n                    track.length += aacData.data.length;\n                } else {\n                    _logger2.default.e(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);\n                }\n            } else if (soundFormat === 2) {\n                // MP3\n                if (!meta.codec) {\n                    // We need metadata for mp3 audio track, extract info from frame header\n                    var _misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);\n                    if (_misc == undefined) {\n                        return;\n                    }\n                    meta.audioSampleRate = _misc.samplingRate;\n                    meta.channelConfig = _misc.channelCount;\n                    meta.codec = _misc.codec;\n                    // The decode result of an mp3 sample is 1152 PCM samples\n                    meta.refSampleDuration = Math.floor(1152 / meta.audioSampleRate * meta.timescale);\n                    _logger2.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');\n\n                    this._audioInitialMetadataDispatched = true;\n                    this._onTrackMetadata('audio', meta);\n\n                    var _mi = this._mediaInfo;\n                    _mi.audioCodec = meta.codec;\n                    _mi.audioSampleRate = meta.audioSampleRate;\n                    _mi.audioChannelCount = meta.channelCount;\n                    _mi.audioDataRate = _misc.bitRate;\n                    if (_mi.hasVideo) {\n                        if (_mi.videoCodec != null) {\n                            _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.videoCodec + ',' + _mi.audioCodec + '\"';\n                        }\n                    } else {\n                        _mi.mimeType = 'video/x-flv; codecs=\"' + _mi.audioCodec + '\"';\n                    }\n                    if (_mi.isComplete()) {\n                        this._onMediaInfo(_mi);\n                    }\n                }\n\n                // This packet is always a valid audio packet, extract it\n                var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);\n                if (data == undefined) {\n                    return;\n                }\n                var _dts = this._timestampBase + tagTimestamp;\n                var mp3Sample = { unit: data, dts: _dts, pts: _dts };\n                track.samples.push(mp3Sample);\n                track.length += data.length;\n            }\n        }\n    }, {\n        key: '_parseAACAudioData',\n        value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n                return;\n            }\n\n            var result = {};\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n            result.packetType = array[0];\n\n            if (array[0] === 0) {\n                result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n            } else {\n                result.data = array.subarray(1);\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseAACAudioSpecificConfig',\n        value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var config = null;\n\n            /* Audio Object Type:\n               0: Null\n               1: AAC Main\n               2: AAC LC\n               3: AAC SSR (Scalable Sample Rate)\n               4: AAC LTP (Long Term Prediction)\n               5: HE-AAC / SBR (Spectral Band Replication)\n               6: AAC Scalable\n            */\n\n            var audioObjectType = 0;\n            var originalAudioObjectType = 0;\n            var audioExtensionObjectType = null;\n            var samplingIndex = 0;\n            var extensionSamplingIndex = null;\n\n            // 5 bits\n            audioObjectType = originalAudioObjectType = array[0] >>> 3;\n            // 4 bits\n            samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;\n            if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n                return;\n            }\n\n            var samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n            // 4 bits\n            var channelConfig = (array[1] & 0x78) >>> 3;\n            if (channelConfig < 0 || channelConfig >= 8) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n                return;\n            }\n\n            if (audioObjectType === 5) {\n                // HE-AAC?\n                // 4 bits\n                extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;\n                // 5 bits\n                audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n            }\n\n            // workarounds for various browsers\n            var userAgent = self.navigator.userAgent.toLowerCase();\n\n            if (userAgent.indexOf('firefox') !== -1) {\n                // firefox: use SBR (HE-AAC) if freq less than 24kHz\n                if (samplingIndex >= 6) {\n                    audioObjectType = 5;\n                    config = new Array(4);\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else {\n                    // use LC-AAC\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            } else if (userAgent.indexOf('android') !== -1) {\n                // android: always use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            } else {\n                // for other browsers, e.g. chrome...\n                // Always use HE-AAC to make it easier to switch aac codec profile\n                audioObjectType = 5;\n                extensionSamplingIndex = samplingIndex;\n                config = new Array(4);\n\n                if (samplingIndex >= 6) {\n                    extensionSamplingIndex = samplingIndex - 3;\n                } else if (channelConfig === 1) {\n                    // Mono channel\n                    audioObjectType = 2;\n                    config = new Array(2);\n                    extensionSamplingIndex = samplingIndex;\n                }\n            }\n\n            config[0] = audioObjectType << 3;\n            config[0] |= (samplingIndex & 0x0F) >>> 1;\n            config[1] = (samplingIndex & 0x0F) << 7;\n            config[1] |= (channelConfig & 0x0F) << 3;\n            if (audioObjectType === 5) {\n                config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;\n                config[2] = (extensionSamplingIndex & 0x01) << 7;\n                // extended audio object type: force to 2 (LC-AAC)\n                config[2] |= 2 << 2;\n                config[3] = 0;\n            }\n\n            return {\n                config: config,\n                samplingRate: samplingFrequence,\n                channelCount: channelConfig,\n                codec: 'mp4a.40.' + audioObjectType,\n                originalAudioObjectType: originalAudioObjectType\n            };\n        }\n    }, {\n        key: '_parseMP3AudioData',\n        value: function _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n            var result = null;\n\n            if (requestHeader) {\n                if (array[0] !== 0xFF) {\n                    return;\n                }\n                var ver = array[1] >>> 3 & 0x03;\n                var layer = (array[1] & 0x06) >> 1;\n\n                var bitrate_index = (array[2] & 0xF0) >>> 4;\n                var sampling_freq_index = (array[2] & 0x0C) >>> 2;\n\n                var channel_mode = array[3] >>> 6 & 0x03;\n                var channel_count = channel_mode !== 3 ? 2 : 1;\n\n                var sample_rate = 0;\n                var bit_rate = 0;\n                var object_type = 34; // Layer-3, listed in MPEG-4 Audio Object Types\n\n                var codec = 'mp3';\n\n                switch (ver) {\n                    case 0:\n                        // MPEG 2.5\n                        sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\n                        break;\n                    case 2:\n                        // MPEG 2\n                        sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\n                        break;\n                    case 3:\n                        // MPEG 1\n                        sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\n                        break;\n                }\n\n                switch (layer) {\n                    case 1:\n                        // Layer 3\n                        object_type = 34;\n                        if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\n                            bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 2:\n                        // Layer 2\n                        object_type = 33;\n                        if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\n                            bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\n                        }\n                        break;\n                    case 3:\n                        // Layer 1\n                        object_type = 32;\n                        if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\n                            bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\n                        }\n                        break;\n                }\n\n                result = {\n                    bitRate: bit_rate,\n                    samplingRate: sample_rate,\n                    channelCount: channel_count,\n                    codec: codec\n                };\n            } else {\n                result = array;\n            }\n\n            return result;\n        }\n    }, {\n        key: '_parseVideoData',\n        value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n            if (dataSize <= 1) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n                return;\n            }\n\n            var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];\n\n            var frameType = (spec & 240) >>> 4;\n            var codecId = spec & 15;\n\n            if (codecId !== 7) {\n                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);\n                return;\n            }\n\n            this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n        }\n    }, {\n        key: '_parseAVCVideoPacket',\n        value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n            if (dataSize < 4) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n                return;\n            }\n\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var packetType = v.getUint8(0);\n            var cts = v.getUint32(0, !le) & 0x00FFFFFF;\n\n            if (packetType === 0) {\n                // AVCDecoderConfigurationRecord\n                this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n            } else if (packetType === 1) {\n                // One or more Nalus\n                this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n            } else if (packetType === 2) {\n                // empty, AVC end of sequence\n            } else {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);\n                return;\n            }\n        }\n    }, {\n        key: '_parseAVCDecoderConfigurationRecord',\n        value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n            if (dataSize < 7) {\n                _logger2.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n                return;\n            }\n\n            var meta = this._videoMetadata;\n            var track = this._videoTrack;\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            if (!meta) {\n                if (this._hasVideo === false) {\n                    this._hasVideo = true;\n                    this._mediaInfo.hasVideo = true;\n                }\n\n                meta = this._videoMetadata = {};\n                meta.type = 'video';\n                meta.id = track.id;\n                meta.timescale = this._timescale;\n                meta.duration = this._duration;\n            } else {\n                if (typeof meta.avcc !== 'undefined') {\n                    _logger2.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n                }\n            }\n\n            var version = v.getUint8(0); // configurationVersion\n            var avcProfile = v.getUint8(1); // avcProfileIndication\n            var profileCompatibility = v.getUint8(2); // profile_compatibility\n            var avcLevel = v.getUint8(3); // AVCLevelIndication\n\n            if (version !== 1 || avcProfile === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n                return;\n            }\n\n            this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n            if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n                // holy shit!!!\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));\n                return;\n            }\n\n            var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n            if (spsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n                return;\n            } else if (spsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ' + spsCount);\n            }\n\n            var offset = 6;\n\n            for (var i = 0; i < spsCount; i++) {\n                var len = v.getUint16(offset, !le); // sequenceParameterSetLength\n                offset += 2;\n\n                if (len === 0) {\n                    continue;\n                }\n\n                // Notice: Nalu without startcode header (00 00 00 01)\n                var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n                offset += len;\n\n                var config = _spsParser2.default.parseSPS(sps);\n                if (i !== 0) {\n                    // ignore other sps's config\n                    continue;\n                }\n\n                meta.codecWidth = config.codec_size.width;\n                meta.codecHeight = config.codec_size.height;\n                meta.presentWidth = config.present_size.width;\n                meta.presentHeight = config.present_size.height;\n\n                meta.profile = config.profile_string;\n                meta.level = config.level_string;\n                meta.bitDepth = config.bit_depth;\n                meta.chromaFormat = config.chroma_format;\n                meta.sarRatio = config.sar_ratio;\n                meta.frameRate = config.frame_rate;\n\n                if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {\n                    meta.frameRate = this._referenceFrameRate;\n                }\n\n                var fps_den = meta.frameRate.fps_den;\n                var fps_num = meta.frameRate.fps_num;\n                meta.refSampleDuration = Math.floor(meta.timescale * (fps_den / fps_num));\n\n                var codecArray = sps.subarray(1, 4);\n                var codecString = 'avc1.';\n                for (var j = 0; j < 3; j++) {\n                    var h = codecArray[j].toString(16);\n                    if (h.length < 2) {\n                        h = '0' + h;\n                    }\n                    codecString += h;\n                }\n                meta.codec = codecString;\n\n                var mi = this._mediaInfo;\n                mi.width = meta.codecWidth;\n                mi.height = meta.codecHeight;\n                mi.fps = meta.frameRate.fps;\n                mi.profile = meta.profile;\n                mi.level = meta.level;\n                mi.chromaFormat = config.chroma_format_string;\n                mi.sarNum = meta.sarRatio.width;\n                mi.sarDen = meta.sarRatio.height;\n                mi.videoCodec = codecString;\n\n                if (mi.hasAudio) {\n                    if (mi.audioCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            var ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n            if (ppsCount === 0) {\n                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n                return;\n            } else if (ppsCount > 1) {\n                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ' + ppsCount);\n            }\n\n            offset++;\n\n            for (var _i = 0; _i < ppsCount; _i++) {\n                var _len = v.getUint16(offset, !le); // pictureParameterSetLength\n                offset += 2;\n\n                if (_len === 0) {\n                    continue;\n                }\n\n                // pps is useless for extracting video information\n                offset += _len;\n            }\n\n            meta.avcc = new Uint8Array(dataSize);\n            meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n            _logger2.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n            if (this._isInitialMetadataDispatched()) {\n                // flush parsed frames\n                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                    this._onDataAvailable(this._audioTrack, this._videoTrack);\n                }\n            } else {\n                this._videoInitialMetadataDispatched = true;\n            }\n            // notify new metadata\n            this._dispatch = false;\n            this._onTrackMetadata('video', meta);\n        }\n    }, {\n        key: '_parseAVCVideoData',\n        value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n            var le = this._littleEndian;\n            var v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n            var units = [],\n                length = 0;\n\n            var offset = 0;\n            var lengthSize = this._naluLengthSize;\n            var dts = this._timestampBase + tagTimestamp;\n            var keyframe = frameType === 1; // from FLV Frame Type constants\n\n            while (offset < dataSize) {\n                if (offset + 4 >= dataSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);\n                    break; // data not enough for next Nalu\n                }\n                // Nalu with length-header (AVC1)\n                var naluSize = v.getUint32(offset, !le); // Big-Endian read\n                if (lengthSize === 3) {\n                    naluSize >>>= 8;\n                }\n                if (naluSize > dataSize - lengthSize) {\n                    _logger2.default.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');\n                    return;\n                }\n\n                var unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n                if (unitType === 5) {\n                    // IDR\n                    keyframe = true;\n                }\n\n                var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n                var unit = { type: unitType, data: data };\n                units.push(unit);\n                length += data.byteLength;\n\n                offset += lengthSize + naluSize;\n            }\n\n            if (units.length) {\n                var track = this._videoTrack;\n                var avcSample = {\n                    units: units,\n                    length: length,\n                    isKeyframe: keyframe,\n                    dts: dts,\n                    cts: cts,\n                    pts: dts + cts\n                };\n                if (keyframe) {\n                    avcSample.fileposition = tagPosition;\n                }\n                track.samples.push(avcSample);\n                track.length += length;\n            }\n        }\n    }, {\n        key: 'onTrackMetadata',\n        get: function get() {\n            return this._onTrackMetadata;\n        },\n        set: function set(callback) {\n            this._onTrackMetadata = callback;\n        }\n\n        // prototype: function(mediaInfo: MediaInfo): void\n\n    }, {\n        key: 'onMediaInfo',\n        get: function get() {\n            return this._onMediaInfo;\n        },\n        set: function set(callback) {\n            this._onMediaInfo = callback;\n        }\n\n        // prototype: function(type: number, info: string): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n\n        // prototype: function(videoTrack: any, audioTrack: any): void\n\n    }, {\n        key: 'onDataAvailable',\n        get: function get() {\n            return this._onDataAvailable;\n        },\n        set: function set(callback) {\n            this._onDataAvailable = callback;\n        }\n\n        // timestamp base for output samples, must be in milliseconds\n\n    }, {\n        key: 'timestampBase',\n        get: function get() {\n            return this._timestampBase;\n        },\n        set: function set(base) {\n            this._timestampBase = base;\n        }\n    }, {\n        key: 'overridedDuration',\n        get: function get() {\n            return this._duration;\n        }\n\n        // Force-override media duration. Must be in milliseconds, int32\n        ,\n        set: function set(duration) {\n            this._durationOverrided = true;\n            this._duration = duration;\n            this._mediaInfo.duration = duration;\n        }\n    }], [{\n        key: 'probe',\n        value: function probe(buffer) {\n            var data = new Uint8Array(buffer);\n            var mismatch = { match: false };\n\n            if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n                return mismatch;\n            }\n\n            var hasAudio = (data[4] & 4) >>> 2 !== 0;\n            var hasVideo = (data[4] & 1) !== 0;\n\n            var offset = ReadBig32(data, 5);\n\n            if (offset < 9) {\n                return mismatch;\n            }\n\n            return {\n                match: true,\n                consumed: offset,\n                dataOffset: offset,\n                hasAudioTrack: hasAudio,\n                hasVideoTrack: hasVideo\n            };\n        }\n    }]);\n\n    return FLVDemuxer;\n}();\n\nexports.default = FLVDemuxer;\n\n},{\"../core/media-info.js\":7,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./amf-parser.js\":15,\"./demux-errors.js\":16,\"./sps-parser.js\":19}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _expGolomb = _dereq_('./exp-golomb.js');\n\nvar _expGolomb2 = _interopRequireDefault(_expGolomb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SPSParser = function () {\n    function SPSParser() {\n        _classCallCheck(this, SPSParser);\n    }\n\n    _createClass(SPSParser, null, [{\n        key: '_ebsp2rbsp',\n        value: function _ebsp2rbsp(uint8array) {\n            var src = uint8array;\n            var src_length = src.byteLength;\n            var dst = new Uint8Array(src_length);\n            var dst_idx = 0;\n\n            for (var i = 0; i < src_length; i++) {\n                if (i >= 2) {\n                    // Unescape: Skip 0x03 after 00 00\n                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                        continue;\n                    }\n                }\n                dst[dst_idx] = src[i];\n                dst_idx++;\n            }\n\n            return new Uint8Array(dst.buffer, 0, dst_idx);\n        }\n    }, {\n        key: 'parseSPS',\n        value: function parseSPS(uint8array) {\n            var rbsp = SPSParser._ebsp2rbsp(uint8array);\n            var gb = new _expGolomb2.default(rbsp);\n\n            gb.readByte();\n            var profile_idc = gb.readByte(); // profile_idc\n            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]\n            var level_idc = gb.readByte(); // level_idc\n            gb.readUEG(); // seq_parameter_set_id\n\n            var profile_string = SPSParser.getProfileString(profile_idc);\n            var level_string = SPSParser.getLevelString(level_idc);\n            var chroma_format_idc = 1;\n            var chroma_format = 420;\n            var chroma_format_table = [0, 420, 422, 444];\n            var bit_depth = 8;\n\n            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {\n\n                chroma_format_idc = gb.readUEG();\n                if (chroma_format_idc === 3) {\n                    gb.readBits(1); // separate_colour_plane_flag\n                }\n                if (chroma_format_idc <= 3) {\n                    chroma_format = chroma_format_table[chroma_format_idc];\n                }\n\n                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8\n                gb.readUEG(); // bit_depth_chroma_minus8\n                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n                if (gb.readBool()) {\n                    // seq_scaling_matrix_present_flag\n                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;\n                    for (var i = 0; i < scaling_list_count; i++) {\n                        if (gb.readBool()) {\n                            // seq_scaling_list_present_flag\n                            if (i < 6) {\n                                SPSParser._skipScalingList(gb, 16);\n                            } else {\n                                SPSParser._skipScalingList(gb, 64);\n                            }\n                        }\n                    }\n                }\n            }\n            gb.readUEG(); // log2_max_frame_num_minus4\n            var pic_order_cnt_type = gb.readUEG();\n            if (pic_order_cnt_type === 0) {\n                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n            } else if (pic_order_cnt_type === 1) {\n                gb.readBits(1); // delta_pic_order_always_zero_flag\n                gb.readSEG(); // offset_for_non_ref_pic\n                gb.readSEG(); // offset_for_top_to_bottom_field\n                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {\n                    gb.readSEG(); // offset_for_ref_frame\n                }\n            }\n            gb.readUEG(); // max_num_ref_frames\n            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n            var pic_width_in_mbs_minus1 = gb.readUEG();\n            var pic_height_in_map_units_minus1 = gb.readUEG();\n\n            var frame_mbs_only_flag = gb.readBits(1);\n            if (frame_mbs_only_flag === 0) {\n                gb.readBits(1); // mb_adaptive_frame_field_flag\n            }\n            gb.readBits(1); // direct_8x8_inference_flag\n\n            var frame_crop_left_offset = 0;\n            var frame_crop_right_offset = 0;\n            var frame_crop_top_offset = 0;\n            var frame_crop_bottom_offset = 0;\n\n            var frame_cropping_flag = gb.readBool();\n            if (frame_cropping_flag) {\n                frame_crop_left_offset = gb.readUEG();\n                frame_crop_right_offset = gb.readUEG();\n                frame_crop_top_offset = gb.readUEG();\n                frame_crop_bottom_offset = gb.readUEG();\n            }\n\n            var sar_width = 1,\n                sar_height = 1;\n            var fps = 0,\n                fps_fixed = true,\n                fps_num = 0,\n                fps_den = 0;\n\n            var vui_parameters_present_flag = gb.readBool();\n            if (vui_parameters_present_flag) {\n                if (gb.readBool()) {\n                    // aspect_ratio_info_present_flag\n                    var aspect_ratio_idc = gb.readByte();\n                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                        sar_width = sar_w_table[aspect_ratio_idc - 1];\n                        sar_height = sar_h_table[aspect_ratio_idc - 1];\n                    } else if (aspect_ratio_idc === 255) {\n                        sar_width = gb.readByte() << 8 | gb.readByte();\n                        sar_height = gb.readByte() << 8 | gb.readByte();\n                    }\n                }\n\n                if (gb.readBool()) {\n                    // overscan_info_present_flag\n                    gb.readBool(); // overscan_appropriate_flag\n                }\n                if (gb.readBool()) {\n                    // video_signal_type_present_flag\n                    gb.readBits(4); // video_format & video_full_range_flag\n                    if (gb.readBool()) {\n                        // colour_description_present_flag\n                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                    }\n                }\n                if (gb.readBool()) {\n                    // chroma_loc_info_present_flag\n                    gb.readUEG(); // chroma_sample_loc_type_top_field\n                    gb.readUEG(); // chroma_sample_loc_type_bottom_field\n                }\n                if (gb.readBool()) {\n                    // timing_info_present_flag\n                    var num_units_in_tick = gb.readBits(32);\n                    var time_scale = gb.readBits(32);\n                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag\n\n                    fps_num = time_scale;\n                    fps_den = num_units_in_tick * 2;\n                    fps = fps_num / fps_den;\n                }\n            }\n\n            var sarScale = 1;\n            if (sar_width !== 1 || sar_height !== 1) {\n                sarScale = sar_width / sar_height;\n            }\n\n            var crop_unit_x = 0,\n                crop_unit_y = 0;\n            if (chroma_format_idc === 0) {\n                crop_unit_x = 1;\n                crop_unit_y = 2 - frame_mbs_only_flag;\n            } else {\n                var sub_wc = chroma_format_idc === 3 ? 1 : 2;\n                var sub_hc = chroma_format_idc === 1 ? 2 : 1;\n                crop_unit_x = sub_wc;\n                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n            }\n\n            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n            var present_width = Math.ceil(codec_width * sarScale);\n\n            gb.destroy();\n            gb = null;\n\n            return {\n                profile_string: profile_string, // baseline, high, high10, ...\n                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n                bit_depth: bit_depth, // 8bit, 10bit, ...\n                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...\n                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n                frame_rate: {\n                    fixed: fps_fixed,\n                    fps: fps,\n                    fps_den: fps_den,\n                    fps_num: fps_num\n                },\n\n                sar_ratio: {\n                    width: sar_width,\n                    height: sar_height\n                },\n\n                codec_size: {\n                    width: codec_width,\n                    height: codec_height\n                },\n\n                present_size: {\n                    width: present_width,\n                    height: codec_height\n                }\n            };\n        }\n    }, {\n        key: '_skipScalingList',\n        value: function _skipScalingList(gb, count) {\n            var last_scale = 8,\n                next_scale = 8;\n            var delta_scale = 0;\n            for (var i = 0; i < count; i++) {\n                if (next_scale !== 0) {\n                    delta_scale = gb.readSEG();\n                    next_scale = (last_scale + delta_scale + 256) % 256;\n                }\n                last_scale = next_scale === 0 ? last_scale : next_scale;\n            }\n        }\n    }, {\n        key: 'getProfileString',\n        value: function getProfileString(profile_idc) {\n            switch (profile_idc) {\n                case 66:\n                    return 'Baseline';\n                case 77:\n                    return 'Main';\n                case 88:\n                    return 'Extended';\n                case 100:\n                    return 'High';\n                case 110:\n                    return 'High10';\n                case 122:\n                    return 'High422';\n                case 244:\n                    return 'High444';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }, {\n        key: 'getLevelString',\n        value: function getLevelString(level_idc) {\n            return (level_idc / 10).toFixed(1);\n        }\n    }, {\n        key: 'getChromaFormatString',\n        value: function getChromaFormatString(chroma) {\n            switch (chroma) {\n                case 420:\n                    return '4:2:0';\n                case 422:\n                    return '4:2:2';\n                case 444:\n                    return '4:4:4';\n                default:\n                    return 'Unknown';\n            }\n        }\n    }]);\n\n    return SPSParser;\n}();\n\nexports.default = SPSParser;\n\n},{\"./exp-golomb.js\":17}],20:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*\n                                                                                                                                                                                                                                                                               * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                               * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *     http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                               * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                               * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                                                                                                                                                                                                                                                               * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                               * limitations under the License.\n                                                                                                                                                                                                                                                                               */\n\nvar _polyfill = _dereq_('./utils/polyfill.js');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _features = _dereq_('./core/features.js');\n\nvar _features2 = _interopRequireDefault(_features);\n\nvar _flvPlayer = _dereq_('./player/flv-player.js');\n\nvar _flvPlayer2 = _interopRequireDefault(_flvPlayer);\n\nvar _nativePlayer = _dereq_('./player/native-player.js');\n\nvar _nativePlayer2 = _interopRequireDefault(_nativePlayer);\n\nvar _playerEvents = _dereq_('./player/player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _playerErrors = _dereq_('./player/player-errors.js');\n\nvar _loggingControl = _dereq_('./utils/logging-control.js');\n\nvar _loggingControl2 = _interopRequireDefault(_loggingControl);\n\nvar _exception = _dereq_('./utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// here are all the interfaces\n\n// install polyfills\n_polyfill2.default.install();\n\n// factory method\nfunction createPlayer(mediaDataSource, optionalConfig) {\n    var mds = mediaDataSource;\n    if (mds == null || (typeof mds === 'undefined' ? 'undefined' : _typeof(mds)) !== 'object') {\n        throw new _exception.InvalidArgumentException('MediaDataSource must be an javascript object!');\n    }\n\n    if (!mds.hasOwnProperty('type')) {\n        throw new _exception.InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n    }\n\n    switch (mds.type) {\n        case 'flv':\n            return new _flvPlayer2.default(mds, optionalConfig);\n        default:\n            return new _nativePlayer2.default(mds, optionalConfig);\n    }\n}\n\n// feature detection\nfunction isSupported() {\n    return _features2.default.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n    return _features2.default.getFeatureList();\n}\n\n// interfaces\nvar flvjs = {};\n\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\n\nflvjs.Events = _playerEvents2.default;\nflvjs.ErrorTypes = _playerErrors.ErrorTypes;\nflvjs.ErrorDetails = _playerErrors.ErrorDetails;\n\nflvjs.FlvPlayer = _flvPlayer2.default;\nflvjs.NativePlayer = _nativePlayer2.default;\nflvjs.LoggingControl = _loggingControl2.default;\n\nObject.defineProperty(flvjs, 'version', {\n    enumerable: true,\n    get: function get() {\n        // replaced by browserify-versionify transform\n        return '1.2.0';\n    }\n});\n\nexports.default = flvjs;\n\n},{\"./core/features.js\":6,\"./player/flv-player.js\":32,\"./player/native-player.js\":33,\"./player/player-errors.js\":34,\"./player/player-events.js\":35,\"./utils/exception.js\":40,\"./utils/logging-control.js\":42,\"./utils/polyfill.js\":43}],21:[function(_dereq_,module,exports){\n'use strict';\n\n// entry/index file\n\n// make it compatible with browserify's umd wrapper\nmodule.exports = _dereq_('./flv.js').default;\n\n},{\"./flv.js\":20}],22:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* fetch + stream IO loader. Currently working on chrome 43+.\n * fetch provides a better alternative http API to XMLHttpRequest\n *\n * fetch spec   https://fetch.spec.whatwg.org/\n * stream spec  https://streams.spec.whatwg.org/\n */\nvar FetchStreamLoader = function (_BaseLoader) {\n    _inherits(FetchStreamLoader, _BaseLoader);\n\n    _createClass(FetchStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n                // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n                // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n                var isWorkWellEdge = _browser2.default.msedge && _browser2.default.version.minor >= 15048;\n                var browserNotBlacklisted = _browser2.default.msedge ? isWorkWellEdge : true;\n                return self.fetch && self.ReadableStream && browserNotBlacklisted;\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function FetchStreamLoader(seekHandler, config) {\n        _classCallCheck(this, FetchStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (FetchStreamLoader.__proto__ || Object.getPrototypeOf(FetchStreamLoader)).call(this, 'fetch-stream-loader'));\n\n        _this.TAG = 'FetchStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(FetchStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            _get(FetchStreamLoader.prototype.__proto__ || Object.getPrototypeOf(FetchStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            var _this2 = this;\n\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n            var headers = new self.Headers();\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var configHeaders = seekConfig.headers;\n                for (var key in configHeaders) {\n                    if (configHeaders.hasOwnProperty(key)) {\n                        headers.append(key, configHeaders[key]);\n                    }\n                }\n            }\n\n            var params = {\n                method: 'GET',\n                headers: headers,\n                mode: 'cors',\n                cache: 'default'\n            };\n\n            // cors is enabled by default\n            if (dataSource.cors === false) {\n                // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n                params.mode = 'same-origin';\n            }\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials) {\n                params.credentials = 'include';\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            self.fetch(seekConfig.url, params).then(function (res) {\n                if (_this2._requestAbort) {\n                    _this2._requestAbort = false;\n                    _this2._status = _loader.LoaderStatus.kIdle;\n                    return;\n                }\n                if (res.ok && res.status >= 200 && res.status <= 299) {\n                    if (res.url !== seekConfig.url) {\n                        if (_this2._onURLRedirect) {\n                            var redirectedURL = _this2._seekHandler.removeURLParameters(res.url);\n                            _this2._onURLRedirect(redirectedURL);\n                        }\n                    }\n\n                    var lengthHeader = res.headers.get('Content-Length');\n                    if (lengthHeader != null) {\n                        _this2._contentLength = parseInt(lengthHeader);\n                        if (_this2._contentLength !== 0) {\n                            if (_this2._onContentLengthKnown) {\n                                _this2._onContentLengthKnown(_this2._contentLength);\n                            }\n                        }\n                    }\n\n                    return _this2._pump.call(_this2, res.body.getReader());\n                } else {\n                    _this2._status = _loader.LoaderStatus.kError;\n                    if (_this2._onError) {\n                        _this2._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n                    }\n                }\n            }).catch(function (e) {\n                _this2._status = _loader.LoaderStatus.kError;\n                if (_this2._onError) {\n                    _this2._onError(_loader.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });\n                } else {\n                    throw e;\n                }\n            });\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n        }\n    }, {\n        key: '_pump',\n        value: function _pump(reader) {\n            var _this3 = this;\n\n            // ReadableStreamReader\n            return reader.read().then(function (result) {\n                if (result.done) {\n                    _this3._status = _loader.LoaderStatus.kComplete;\n                    if (_this3._onComplete) {\n                        _this3._onComplete(_this3._range.from, _this3._range.from + _this3._receivedLength - 1);\n                    }\n                } else {\n                    if (_this3._requestAbort === true) {\n                        _this3._requestAbort = false;\n                        _this3._status = _loader.LoaderStatus.kComplete;\n                        return reader.cancel();\n                    }\n\n                    _this3._status = _loader.LoaderStatus.kBuffering;\n\n                    var chunk = result.value.buffer;\n                    var byteStart = _this3._range.from + _this3._receivedLength;\n                    _this3._receivedLength += chunk.byteLength;\n\n                    if (_this3._onDataArrival) {\n                        _this3._onDataArrival(chunk, byteStart, _this3._receivedLength);\n                    }\n\n                    return _this3._pump(reader);\n                }\n            }).catch(function (e) {\n                if (e.code === 11 && _browser2.default.msedge) {\n                    // InvalidStateError on Microsoft Edge\n                    // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n                    // Ignore the unknown exception.\n                    // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n                    return;\n                }\n\n                _this3._status = _loader.LoaderStatus.kError;\n                var type = 0;\n                var info = null;\n\n                if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR\n                _this3._contentLength === null || _this3._contentLength !== null && _this3._receivedLength < _this3._contentLength)) {\n                    type = _loader.LoaderErrors.EARLY_EOF;\n                    info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };\n                } else {\n                    type = _loader.LoaderErrors.EXCEPTION;\n                    info = { code: e.code, msg: e.message };\n                }\n\n                if (_this3._onError) {\n                    _this3._onError(type, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            });\n        }\n    }]);\n\n    return FetchStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = FetchStreamLoader;\n\n},{\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],23:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _fetchStreamLoader = _dereq_('./fetch-stream-loader.js');\n\nvar _fetchStreamLoader2 = _interopRequireDefault(_fetchStreamLoader);\n\nvar _xhrMozChunkedLoader = _dereq_('./xhr-moz-chunked-loader.js');\n\nvar _xhrMozChunkedLoader2 = _interopRequireDefault(_xhrMozChunkedLoader);\n\nvar _xhrMsstreamLoader = _dereq_('./xhr-msstream-loader.js');\n\nvar _xhrMsstreamLoader2 = _interopRequireDefault(_xhrMsstreamLoader);\n\nvar _xhrRangeLoader = _dereq_('./xhr-range-loader.js');\n\nvar _xhrRangeLoader2 = _interopRequireDefault(_xhrRangeLoader);\n\nvar _websocketLoader = _dereq_('./websocket-loader.js');\n\nvar _websocketLoader2 = _interopRequireDefault(_websocketLoader);\n\nvar _rangeSeekHandler = _dereq_('./range-seek-handler.js');\n\nvar _rangeSeekHandler2 = _interopRequireDefault(_rangeSeekHandler);\n\nvar _paramSeekHandler = _dereq_('./param-seek-handler.js');\n\nvar _paramSeekHandler2 = _interopRequireDefault(_paramSeekHandler);\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * DataSource: {\n *     url: string,\n *     filesize: number,\n *     cors: boolean,\n *     withCredentials: boolean\n * }\n * \n */\n\n// Manage IO Loaders\nvar IOController = function () {\n    function IOController(dataSource, config, extraData) {\n        _classCallCheck(this, IOController);\n\n        this.TAG = 'IOController';\n\n        this._config = config;\n        this._extraData = extraData;\n\n        this._stashInitialSize = 1024 * 384; // default initial size: 384KB\n        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {\n            // apply from config\n            this._stashInitialSize = config.stashInitialSize;\n        }\n\n        this._stashUsed = 0;\n        this._stashSize = this._stashInitialSize;\n        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\n        this._stashByteStart = 0;\n        this._enableStash = true;\n        if (config.enableStashBuffer === false) {\n            this._enableStash = false;\n        }\n\n        this._loader = null;\n        this._loaderClass = null;\n        this._seekHandler = null;\n\n        this._dataSource = dataSource;\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\n        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;\n        this._totalLength = this._refTotalLength;\n        this._fullRequestFlag = false;\n        this._currentRange = null;\n        this._redirectedURL = null;\n\n        this._speedNormalized = 0;\n        this._speedSampler = new _speedSampler2.default();\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\n\n        this._isEarlyEofReconnecting = false;\n\n        this._paused = false;\n        this._resumeFrom = 0;\n\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n\n        this._selectSeekHandler();\n        this._selectLoader();\n        this._createLoader();\n    }\n\n    _createClass(IOController, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n            this._loader.destroy();\n            this._loader = null;\n            this._loaderClass = null;\n            this._dataSource = null;\n            this._stashBuffer = null;\n            this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;\n            this._currentRange = null;\n            this._speedSampler = null;\n\n            this._isEarlyEofReconnecting = false;\n\n            this._onDataArrival = null;\n            this._onSeeked = null;\n            this._onError = null;\n            this._onComplete = null;\n            this._onRedirect = null;\n            this._onRecoveredEarlyEof = null;\n\n            this._extraData = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._loader && this._loader.isWorking() && !this._paused;\n        }\n    }, {\n        key: 'isPaused',\n        value: function isPaused() {\n            return this._paused;\n        }\n    }, {\n        key: '_selectSeekHandler',\n        value: function _selectSeekHandler() {\n            var config = this._config;\n\n            if (config.seekType === 'range') {\n                this._seekHandler = new _rangeSeekHandler2.default(this._config.rangeLoadZeroStart);\n            } else if (config.seekType === 'param') {\n                var paramStart = config.seekParamStart || 'bstart';\n                var paramEnd = config.seekParamEnd || 'bend';\n\n                this._seekHandler = new _paramSeekHandler2.default(paramStart, paramEnd);\n            } else if (config.seekType === 'custom') {\n                if (typeof config.customSeekHandler !== 'function') {\n                    throw new _exception.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');\n                }\n                this._seekHandler = new config.customSeekHandler();\n            } else {\n                throw new _exception.InvalidArgumentException('Invalid seekType in config: ' + config.seekType);\n            }\n        }\n    }, {\n        key: '_selectLoader',\n        value: function _selectLoader() {\n            if (this._isWebSocketURL) {\n                this._loaderClass = _websocketLoader2.default;\n            } else if (_fetchStreamLoader2.default.isSupported()) {\n                this._loaderClass = _fetchStreamLoader2.default;\n            } else if (_xhrMozChunkedLoader2.default.isSupported()) {\n                this._loaderClass = _xhrMozChunkedLoader2.default;\n            } else if (_xhrRangeLoader2.default.isSupported()) {\n                this._loaderClass = _xhrRangeLoader2.default;\n            } else {\n                throw new _exception.RuntimeException('Your browser doesn\\'t support xhr with arraybuffer responseType!');\n            }\n        }\n    }, {\n        key: '_createLoader',\n        value: function _createLoader() {\n            this._loader = new this._loaderClass(this._seekHandler, this._config);\n            if (this._loader.needStashBuffer === false) {\n                this._enableStash = false;\n            }\n            this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\n            this._loader.onURLRedirect = this._onURLRedirect.bind(this);\n            this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\n            this._loader.onComplete = this._onLoaderComplete.bind(this);\n            this._loader.onError = this._onLoaderError.bind(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(optionalFrom) {\n            this._currentRange = { from: 0, to: -1 };\n            if (optionalFrom) {\n                this._currentRange.from = optionalFrom;\n            }\n\n            this._speedSampler.reset();\n            if (!optionalFrom) {\n                this._fullRequestFlag = true;\n            }\n\n            this._loader.open(this._dataSource, Object.assign({}, this._currentRange));\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._loader.abort();\n\n            if (this._paused) {\n                this._paused = false;\n                this._resumeFrom = 0;\n            }\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            if (this.isWorking()) {\n                this._loader.abort();\n\n                if (this._stashUsed !== 0) {\n                    this._resumeFrom = this._stashByteStart;\n                    this._currentRange.to = this._stashByteStart - 1;\n                } else {\n                    this._resumeFrom = this._currentRange.to + 1;\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                this._paused = true;\n            }\n        }\n    }, {\n        key: 'resume',\n        value: function resume() {\n            if (this._paused) {\n                this._paused = false;\n                var bytes = this._resumeFrom;\n                this._resumeFrom = 0;\n                this._internalSeek(bytes, true);\n            }\n        }\n    }, {\n        key: 'seek',\n        value: function seek(bytes) {\n            this._paused = false;\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            this._internalSeek(bytes, true);\n        }\n\n        /**\n         * When seeking request is from media seeking, unconsumed stash data should be dropped\n         * However, stash data shouldn't be dropped if seeking requested from http reconnection\n         *\n         * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\n         */\n\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(bytes, dropUnconsumed) {\n            if (this._loader.isWorking()) {\n                this._loader.abort();\n            }\n\n            // dispatch & flush stash buffer before seek\n            this._flushStashBuffer(dropUnconsumed);\n\n            this._loader.destroy();\n            this._loader = null;\n\n            var requestRange = { from: bytes, to: -1 };\n            this._currentRange = { from: requestRange.from, to: -1 };\n\n            this._speedSampler.reset();\n            this._stashSize = this._stashInitialSize;\n            this._createLoader();\n            this._loader.open(this._dataSource, requestRange);\n\n            if (this._onSeeked) {\n                this._onSeeked();\n            }\n        }\n    }, {\n        key: 'updateUrl',\n        value: function updateUrl(url) {\n            if (!url || typeof url !== 'string' || url.length === 0) {\n                throw new _exception.InvalidArgumentException('Url must be a non-empty string!');\n            }\n\n            this._dataSource.url = url;\n\n            // TODO: replace with new url\n        }\n    }, {\n        key: '_expandBuffer',\n        value: function _expandBuffer(expectedBytes) {\n            var bufferNewSize = this._stashSize;\n            while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\n                bufferNewSize *= 2;\n            }\n\n            bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB\n            if (bufferNewSize === this._bufferSize) {\n                return;\n            }\n\n            var newBuffer = new ArrayBuffer(bufferNewSize);\n\n            if (this._stashUsed > 0) {\n                // copy existing data into new buffer\n                var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\n                var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\n                stashNewArray.set(stashOldArray, 0);\n            }\n\n            this._stashBuffer = newBuffer;\n            this._bufferSize = bufferNewSize;\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._speedNormalizeList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            // binary search\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_adjustStashSize',\n        value: function _adjustStashSize(normalized) {\n            var stashSizeKB = 0;\n\n            if (this._config.isLive) {\n                // live stream: always use single normalized speed for size of stashSizeKB\n                stashSizeKB = normalized;\n            } else {\n                if (normalized < 512) {\n                    stashSizeKB = normalized;\n                } else if (normalized >= 512 && normalized <= 1024) {\n                    stashSizeKB = Math.floor(normalized * 1.5);\n                } else {\n                    stashSizeKB = normalized * 2;\n                }\n            }\n\n            if (stashSizeKB > 8192) {\n                stashSizeKB = 8192;\n            }\n\n            var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB\n            if (this._bufferSize < bufferSize) {\n                this._expandBuffer(bufferSize);\n            }\n            this._stashSize = stashSizeKB * 1024;\n        }\n    }, {\n        key: '_dispatchChunks',\n        value: function _dispatchChunks(chunks, byteStart) {\n            this._currentRange.to = byteStart + chunks.byteLength - 1;\n            return this._onDataArrival(chunks, byteStart);\n        }\n    }, {\n        key: '_onURLRedirect',\n        value: function _onURLRedirect(redirectedURL) {\n            this._redirectedURL = redirectedURL;\n            if (this._onRedirect) {\n                this._onRedirect(redirectedURL);\n            }\n        }\n    }, {\n        key: '_onContentLengthKnown',\n        value: function _onContentLengthKnown(contentLength) {\n            if (contentLength && this._fullRequestFlag) {\n                this._totalLength = contentLength;\n                this._fullRequestFlag = false;\n            }\n        }\n    }, {\n        key: '_onLoaderChunkArrival',\n        value: function _onLoaderChunkArrival(chunk, byteStart, receivedLength) {\n            if (!this._onDataArrival) {\n                throw new _exception.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');\n            }\n            if (this._paused) {\n                return;\n            }\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback\n                this._isEarlyEofReconnecting = false;\n                if (this._onRecoveredEarlyEof) {\n                    this._onRecoveredEarlyEof();\n                }\n            }\n\n            this._speedSampler.addBytes(chunk.byteLength);\n\n            // adjust stash buffer size according to network speed dynamically\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._speedNormalized !== normalized) {\n                    this._speedNormalized = normalized;\n                    this._adjustStashSize(normalized);\n                }\n            }\n\n            if (!this._enableStash) {\n                // disable stash\n                if (this._stashUsed === 0) {\n                    // dispatch chunk directly to consumer;\n                    // check ret value (consumed bytes) and stash unconsumed to stashBuffer\n                    var consumed = this._dispatchChunks(chunk, byteStart);\n                    if (consumed < chunk.byteLength) {\n                        // unconsumed data remain.\n                        var remain = chunk.byteLength - consumed;\n                        if (remain > this._bufferSize) {\n                            this._expandBuffer(remain);\n                        }\n                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\n                        this._stashUsed += remain;\n                        this._stashByteStart = byteStart + consumed;\n                    }\n                } else {\n                    // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\n                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\n                    }\n                    var _stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    _stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                    var _consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);\n                    if (_consumed < this._stashUsed && _consumed > 0) {\n                        // unconsumed data remain\n                        var remainArray = new Uint8Array(this._stashBuffer, _consumed);\n                        _stashArray.set(remainArray, 0);\n                    }\n                    this._stashUsed -= _consumed;\n                    this._stashByteStart += _consumed;\n                }\n            } else {\n                // enable stash\n                if (this._stashUsed === 0 && this._stashByteStart === 0) {\n                    // seeked? or init chunk?\n                    // This is the first chunk after seek action\n                    this._stashByteStart = byteStart;\n                }\n                if (this._stashUsed + chunk.byteLength <= this._stashSize) {\n                    // just stash\n                    var _stashArray2 = new Uint8Array(this._stashBuffer, 0, this._stashSize);\n                    _stashArray2.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                } else {\n                    // stashUsed + chunkSize > stashSize, size limit exceeded\n                    var _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    if (this._stashUsed > 0) {\n                        // There're stash datas in buffer\n                        // dispatch the whole stashBuffer, and stash remain data\n                        // then append chunk to stashBuffer (stash)\n                        var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                        var _consumed2 = this._dispatchChunks(buffer, this._stashByteStart);\n                        if (_consumed2 < buffer.byteLength) {\n                            if (_consumed2 > 0) {\n                                var _remainArray = new Uint8Array(buffer, _consumed2);\n                                _stashArray3.set(_remainArray, 0);\n                                this._stashUsed = _remainArray.byteLength;\n                                this._stashByteStart += _consumed2;\n                            }\n                        } else {\n                            this._stashUsed = 0;\n                            this._stashByteStart += _consumed2;\n                        }\n                        if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                            this._expandBuffer(this._stashUsed + chunk.byteLength);\n                            _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        }\n                        _stashArray3.set(new Uint8Array(chunk), this._stashUsed);\n                        this._stashUsed += chunk.byteLength;\n                    } else {\n                        // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\n                        // dispatch chunk directly and stash remain data\n                        var _consumed3 = this._dispatchChunks(chunk, byteStart);\n                        if (_consumed3 < chunk.byteLength) {\n                            var _remain = chunk.byteLength - _consumed3;\n                            if (_remain > this._bufferSize) {\n                                this._expandBuffer(_remain);\n                                _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            }\n                            _stashArray3.set(new Uint8Array(chunk, _consumed3), 0);\n                            this._stashUsed += _remain;\n                            this._stashByteStart = byteStart + _consumed3;\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_flushStashBuffer',\n        value: function _flushStashBuffer(dropUnconsumed) {\n            if (this._stashUsed > 0) {\n                var buffer = this._stashBuffer.slice(0, this._stashUsed);\n                var consumed = this._dispatchChunks(buffer, this._stashByteStart);\n                var remain = buffer.byteLength - consumed;\n\n                if (consumed < buffer.byteLength) {\n                    if (dropUnconsumed) {\n                        _logger2.default.w(this.TAG, remain + ' bytes unconsumed data remain when flush buffer, dropped');\n                    } else {\n                        if (consumed > 0) {\n                            var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                            var remainArray = new Uint8Array(buffer, consumed);\n                            stashArray.set(remainArray, 0);\n                            this._stashUsed = remainArray.byteLength;\n                            this._stashByteStart += consumed;\n                        }\n                        return 0;\n                    }\n                }\n                this._stashUsed = 0;\n                this._stashByteStart = 0;\n                return remain;\n            }\n            return 0;\n        }\n    }, {\n        key: '_onLoaderComplete',\n        value: function _onLoaderComplete(from, to) {\n            // Force-flush stash buffer, and drop unconsumed data\n            this._flushStashBuffer(true);\n\n            if (this._onComplete) {\n                this._onComplete(this._extraData);\n            }\n        }\n    }, {\n        key: '_onLoaderError',\n        value: function _onLoaderError(type, data) {\n            _logger2.default.e(this.TAG, 'Loader error, code = ' + data.code + ', msg = ' + data.msg);\n\n            this._flushStashBuffer(false);\n\n            if (this._isEarlyEofReconnecting) {\n                // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\n                this._isEarlyEofReconnecting = false;\n                type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n            }\n\n            switch (type) {\n                case _loader.LoaderErrors.EARLY_EOF:\n                    {\n                        if (!this._config.isLive) {\n                            // Do internal http reconnect if not live stream\n                            if (this._totalLength) {\n                                var nextFrom = this._currentRange.to + 1;\n                                if (nextFrom < this._totalLength) {\n                                    _logger2.default.w(this.TAG, 'Connection lost, trying reconnect...');\n                                    this._isEarlyEofReconnecting = true;\n                                    this._internalSeek(nextFrom, false);\n                                }\n                                return;\n                            }\n                            // else: We don't know totalLength, throw UnrecoverableEarlyEof\n                        }\n                        // live stream: throw UnrecoverableEarlyEof error to upper-layer\n                        type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n                        break;\n                    }\n                case _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF:\n                case _loader.LoaderErrors.CONNECTING_TIMEOUT:\n                case _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID:\n                case _loader.LoaderErrors.EXCEPTION:\n                    break;\n            }\n\n            if (this._onError) {\n                this._onError(type, data);\n            } else {\n                throw new _exception.RuntimeException('IOException: ' + data.msg);\n            }\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._loader.status;\n        }\n    }, {\n        key: 'extraData',\n        get: function get() {\n            return this._extraData;\n        },\n        set: function set(data) {\n            this._extraData = data;\n        }\n\n        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\n\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onSeeked',\n        get: function get() {\n            return this._onSeeked;\n        },\n        set: function set(callback) {\n            this._onSeeked = callback;\n        }\n\n        // prototype: function onError(type: number, info: {code: number, msg: string}): void\n\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }, {\n        key: 'onRedirect',\n        get: function get() {\n            return this._onRedirect;\n        },\n        set: function set(callback) {\n            this._onRedirect = callback;\n        }\n    }, {\n        key: 'onRecoveredEarlyEof',\n        get: function get() {\n            return this._onRecoveredEarlyEof;\n        },\n        set: function set(callback) {\n            this._onRecoveredEarlyEof = callback;\n        }\n    }, {\n        key: 'currentURL',\n        get: function get() {\n            return this._dataSource.url;\n        }\n    }, {\n        key: 'hasRedirect',\n        get: function get() {\n            return this._redirectedURL != null || this._dataSource.redirectedURL != undefined;\n        }\n    }, {\n        key: 'currentRedirectedURL',\n        get: function get() {\n            return this._redirectedURL || this._dataSource.redirectedURL;\n        }\n\n        // in KB/s\n\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            if (this._loaderClass === _xhrRangeLoader2.default) {\n                // SpeedSampler is inaccuracy if loader is RangeLoader\n                return this._loader.currentSpeed;\n            }\n            return this._speedSampler.lastSecondKBps;\n        }\n    }, {\n        key: 'loaderType',\n        get: function get() {\n            return this._loader.type;\n        }\n    }]);\n\n    return IOController;\n}();\n\nexports.default = IOController;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./fetch-stream-loader.js\":22,\"./loader.js\":24,\"./param-seek-handler.js\":25,\"./range-seek-handler.js\":26,\"./speed-sampler.js\":27,\"./websocket-loader.js\":28,\"./xhr-moz-chunked-loader.js\":29,\"./xhr-msstream-loader.js\":30,\"./xhr-range-loader.js\":31}],24:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BaseLoader = exports.LoaderErrors = exports.LoaderStatus = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoaderStatus = exports.LoaderStatus = {\n    kIdle: 0,\n    kConnecting: 1,\n    kBuffering: 2,\n    kError: 3,\n    kComplete: 4\n};\n\nvar LoaderErrors = exports.LoaderErrors = {\n    OK: 'OK',\n    EXCEPTION: 'Exception',\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\n    EARLY_EOF: 'EarlyEof',\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n\n/* Loader has callbacks which have following prototypes:\n *     function onContentLengthKnown(contentLength: number): void\n *     function onURLRedirect(url: string): void\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\n *     function onComplete(rangeFrom: number, rangeTo: number): void\n */\n\nvar BaseLoader = exports.BaseLoader = function () {\n    function BaseLoader(typeName) {\n        _classCallCheck(this, BaseLoader);\n\n        this._type = typeName || 'undefined';\n        this._status = LoaderStatus.kIdle;\n        this._needStash = false;\n        // callbacks\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    _createClass(BaseLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._status = LoaderStatus.kIdle;\n            this._onContentLengthKnown = null;\n            this._onURLRedirect = null;\n            this._onDataArrival = null;\n            this._onError = null;\n            this._onComplete = null;\n        }\n    }, {\n        key: 'isWorking',\n        value: function isWorking() {\n            return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n        }\n    }, {\n        key: 'open',\n\n\n        // pure virtual\n        value: function open(dataSource, range) {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            throw new _exception.NotImplementedException('Unimplemented abstract function!');\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'status',\n        get: function get() {\n            return this._status;\n        }\n    }, {\n        key: 'needStashBuffer',\n        get: function get() {\n            return this._needStash;\n        }\n    }, {\n        key: 'onContentLengthKnown',\n        get: function get() {\n            return this._onContentLengthKnown;\n        },\n        set: function set(callback) {\n            this._onContentLengthKnown = callback;\n        }\n    }, {\n        key: 'onURLRedirect',\n        get: function get() {\n            return this._onURLRedirect;\n        },\n        set: function set(callback) {\n            this._onURLRedirect = callback;\n        }\n    }, {\n        key: 'onDataArrival',\n        get: function get() {\n            return this._onDataArrival;\n        },\n        set: function set(callback) {\n            this._onDataArrival = callback;\n        }\n    }, {\n        key: 'onError',\n        get: function get() {\n            return this._onError;\n        },\n        set: function set(callback) {\n            this._onError = callback;\n        }\n    }, {\n        key: 'onComplete',\n        get: function get() {\n            return this._onComplete;\n        },\n        set: function set(callback) {\n            this._onComplete = callback;\n        }\n    }]);\n\n    return BaseLoader;\n}();\n\n},{\"../utils/exception.js\":40}],25:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar ParamSeekHandler = function () {\n    function ParamSeekHandler(paramStart, paramEnd) {\n        _classCallCheck(this, ParamSeekHandler);\n\n        this._startName = paramStart;\n        this._endName = paramEnd;\n    }\n\n    _createClass(ParamSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(baseUrl, range) {\n            var url = baseUrl;\n\n            if (range.from !== 0 || range.to !== -1) {\n                var needAnd = true;\n                if (url.indexOf('?') === -1) {\n                    url += '?';\n                    needAnd = false;\n                }\n\n                if (needAnd) {\n                    url += '&';\n                }\n\n                url += this._startName + '=' + range.from.toString();\n\n                if (range.to !== -1) {\n                    url += '&' + this._endName + '=' + range.to.toString();\n                }\n            }\n\n            return {\n                url: url,\n                headers: {}\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            var baseURL = seekedURL.split('?')[0];\n            var params = undefined;\n\n            var queryIndex = seekedURL.indexOf('?');\n            if (queryIndex !== -1) {\n                params = seekedURL.substring(queryIndex + 1);\n            }\n\n            var resultParams = '';\n\n            if (params != undefined && params.length > 0) {\n                var pairs = params.split('&');\n\n                for (var i = 0; i < pairs.length; i++) {\n                    var pair = pairs[i].split('=');\n                    var requireAnd = i > 0;\n\n                    if (pair[0] !== this._startName && pair[0] !== this._endName) {\n                        if (requireAnd) {\n                            resultParams += '&';\n                        }\n                        resultParams += pairs[i];\n                    }\n                }\n            }\n\n            return resultParams.length === 0 ? baseURL : baseURL + '?' + resultParams;\n        }\n    }]);\n\n    return ParamSeekHandler;\n}();\n\nexports.default = ParamSeekHandler;\n\n},{}],26:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar RangeSeekHandler = function () {\n    function RangeSeekHandler(zeroStart) {\n        _classCallCheck(this, RangeSeekHandler);\n\n        this._zeroStart = zeroStart || false;\n    }\n\n    _createClass(RangeSeekHandler, [{\n        key: 'getConfig',\n        value: function getConfig(url, range) {\n            var headers = {};\n\n            if (range.from !== 0 || range.to !== -1) {\n                var param = void 0;\n                if (range.to !== -1) {\n                    param = 'bytes=' + range.from.toString() + '-' + range.to.toString();\n                } else {\n                    param = 'bytes=' + range.from.toString() + '-';\n                }\n                headers['Range'] = param;\n            } else if (this._zeroStart) {\n                headers['Range'] = 'bytes=0-';\n            }\n\n            return {\n                url: url,\n                headers: headers\n            };\n        }\n    }, {\n        key: 'removeURLParameters',\n        value: function removeURLParameters(seekedURL) {\n            return seekedURL;\n        }\n    }]);\n\n    return RangeSeekHandler;\n}();\n\nexports.default = RangeSeekHandler;\n\n},{}],27:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Utility class to calculate realtime network I/O speed\nvar SpeedSampler = function () {\n    function SpeedSampler() {\n        _classCallCheck(this, SpeedSampler);\n\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        // compatibility detection\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    _createClass(SpeedSampler, [{\n        key: \"reset\",\n        value: function reset() {\n            this._firstCheckpoint = this._lastCheckpoint = 0;\n            this._totalBytes = this._intervalBytes = 0;\n            this._lastSecondBytes = 0;\n        }\n    }, {\n        key: \"addBytes\",\n        value: function addBytes(bytes) {\n            if (this._firstCheckpoint === 0) {\n                this._firstCheckpoint = this._now();\n                this._lastCheckpoint = this._firstCheckpoint;\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else if (this._now() - this._lastCheckpoint < 1000) {\n                this._intervalBytes += bytes;\n                this._totalBytes += bytes;\n            } else {\n                // duration >= 1000\n                this._lastSecondBytes = this._intervalBytes;\n                this._intervalBytes = bytes;\n                this._totalBytes += bytes;\n                this._lastCheckpoint = this._now();\n            }\n        }\n    }, {\n        key: \"currentKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n            if (durationSeconds == 0) durationSeconds = 1;\n            return this._intervalBytes / durationSeconds / 1024;\n        }\n    }, {\n        key: \"lastSecondKBps\",\n        get: function get() {\n            this.addBytes(0);\n\n            if (this._lastSecondBytes !== 0) {\n                return this._lastSecondBytes / 1024;\n            } else {\n                // lastSecondBytes === 0\n                if (this._now() - this._lastCheckpoint >= 500) {\n                    // if time interval since last checkpoint has exceeded 500ms\n                    // the speed is nearly accurate\n                    return this.currentKBps;\n                } else {\n                    // We don't know\n                    return 0;\n                }\n            }\n        }\n    }, {\n        key: \"averageKBps\",\n        get: function get() {\n            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n            return this._totalBytes / durationSeconds / 1024;\n        }\n    }]);\n\n    return SpeedSampler;\n}();\n\nexports.default = SpeedSampler;\n\n},{}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FLV over WebSocket live stream\nvar WebSocketLoader = function (_BaseLoader) {\n    _inherits(WebSocketLoader, _BaseLoader);\n\n    _createClass(WebSocketLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                return typeof self.WebSocket !== 'undefined';\n            } catch (e) {\n                return false;\n            }\n        }\n    }]);\n\n    function WebSocketLoader() {\n        _classCallCheck(this, WebSocketLoader);\n\n        var _this = _possibleConstructorReturn(this, (WebSocketLoader.__proto__ || Object.getPrototypeOf(WebSocketLoader)).call(this, 'websocket-loader'));\n\n        _this.TAG = 'WebSocketLoader';\n\n        _this._needStash = true;\n\n        _this._ws = null;\n        _this._requestAbort = false;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(WebSocketLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._ws) {\n                this.abort();\n            }\n            _get(WebSocketLoader.prototype.__proto__ || Object.getPrototypeOf(WebSocketLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource) {\n            try {\n                var ws = this._ws = new self.WebSocket(dataSource.url);\n                ws.binaryType = 'arraybuffer';\n                ws.onopen = this._onWebSocketOpen.bind(this);\n                ws.onclose = this._onWebSocketClose.bind(this);\n                ws.onmessage = this._onWebSocketMessage.bind(this);\n                ws.onerror = this._onWebSocketError.bind(this);\n\n                this._status = _loader.LoaderStatus.kConnecting;\n            } catch (e) {\n                this._status = _loader.LoaderStatus.kError;\n\n                var info = { code: e.code, msg: e.message };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            var ws = this._ws;\n            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {\n                // CONNECTING || OPEN\n                this._requestAbort = true;\n                ws.close();\n            }\n\n            this._ws = null;\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onWebSocketOpen',\n        value: function _onWebSocketOpen(e) {\n            this._status = _loader.LoaderStatus.kBuffering;\n        }\n    }, {\n        key: '_onWebSocketClose',\n        value: function _onWebSocketClose(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n\n            if (this._onComplete) {\n                this._onComplete(0, this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onWebSocketMessage',\n        value: function _onWebSocketMessage(e) {\n            var _this2 = this;\n\n            if (e.data instanceof ArrayBuffer) {\n                this._dispatchArrayBuffer(e.data);\n            } else if (e.data instanceof Blob) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    _this2._dispatchArrayBuffer(reader.result);\n                };\n                reader.readAsArrayBuffer(e.data);\n            } else {\n                this._status = _loader.LoaderStatus.kError;\n                var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };\n\n                if (this._onError) {\n                    this._onError(_loader.LoaderErrors.EXCEPTION, info);\n                } else {\n                    throw new _exception.RuntimeException(info.msg);\n                }\n            }\n        }\n    }, {\n        key: '_dispatchArrayBuffer',\n        value: function _dispatchArrayBuffer(arraybuffer) {\n            var chunk = arraybuffer;\n            var byteStart = this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onWebSocketError',\n        value: function _onWebSocketError(e) {\n            this._status = _loader.LoaderStatus.kError;\n\n            var info = {\n                code: e.code,\n                msg: e.message\n            };\n\n            if (this._onError) {\n                this._onError(_loader.LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return WebSocketLoader;\n}(_loader.BaseLoader);\n\nexports.default = WebSocketLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\nvar MozChunkedLoader = function (_BaseLoader) {\n    _inherits(MozChunkedLoader, _BaseLoader);\n\n    _createClass(MozChunkedLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                // Firefox 37- requires .open() to be called before setting responseType\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'moz-chunked-arraybuffer';\n                return xhr.responseType === 'moz-chunked-arraybuffer';\n            } catch (e) {\n                _logger2.default.w('MozChunkedLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MozChunkedLoader(seekHandler, config) {\n        _classCallCheck(this, MozChunkedLoader);\n\n        var _this = _possibleConstructorReturn(this, (MozChunkedLoader.__proto__ || Object.getPrototypeOf(MozChunkedLoader)).call(this, 'xhr-moz-chunked-loader'));\n\n        _this.TAG = 'MozChunkedLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._requestAbort = false;\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n        return _this;\n    }\n\n    _createClass(MozChunkedLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onloadend = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(MozChunkedLoader.prototype.__proto__ || Object.getPrototypeOf(MozChunkedLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._requestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'moz-chunked-arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onloadend = this._onLoadEnd.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            // cors is auto detected and enabled by xhr\n\n            // withCredentials is disabled by default\n            if (dataSource.withCredentials && xhr['withCredentials']) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            this._status = _loader.LoaderStatus.kConnecting;\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            if (this._xhr) {\n                this._xhr.abort();\n            }\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                    if (this._onURLRedirect) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n\n                if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kBuffering;\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._contentLength === null) {\n                if (e.total !== null && e.total !== 0) {\n                    this._contentLength = e.total;\n                    if (this._onContentLengthKnown) {\n                        this._onContentLengthKnown(this._contentLength);\n                    }\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n        }\n    }, {\n        key: '_onLoadEnd',\n        value: function _onLoadEnd(e) {\n            if (this._requestAbort === true) {\n                this._requestAbort = false;\n                return;\n            } else if (this._status === _loader.LoaderStatus.kError) {\n                return;\n            }\n\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && e.loaded < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MozChunkedLoader;\n}(_loader.BaseLoader);\n\nexports.default = MozChunkedLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],30:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!\n * The browser may crash in wininet.dll. Disable for now.\n *\n * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`\n * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.\n *\n * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.\n * in order to release previous ArrayBuffer to avoid memory leak\n *\n * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.\n */\nvar MSStreamLoader = function (_BaseLoader) {\n    _inherits(MSStreamLoader, _BaseLoader);\n\n    _createClass(MSStreamLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {\n                    return false;\n                }\n\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'ms-stream';\n                return xhr.responseType === 'ms-stream';\n            } catch (e) {\n                _logger2.default.w('MSStreamLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function MSStreamLoader(seekHandler, config) {\n        _classCallCheck(this, MSStreamLoader);\n\n        var _this = _possibleConstructorReturn(this, (MSStreamLoader.__proto__ || Object.getPrototypeOf(MSStreamLoader)).call(this, 'xhr-msstream-loader'));\n\n        _this.TAG = 'MSStreamLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = true;\n\n        _this._xhr = null;\n        _this._reader = null; // MSStreamReader\n\n        _this._totalRange = null;\n        _this._currentRange = null;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n\n        _this._contentLength = null;\n        _this._receivedLength = 0;\n\n        _this._bufferLimit = 16 * 1024 * 1024; // 16MB\n        _this._lastTimeBufferSize = 0;\n        _this._isReconnecting = false;\n        return _this;\n    }\n\n    _createClass(MSStreamLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._reader) {\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n            _get(MSStreamLoader.prototype.__proto__ || Object.getPrototypeOf(MSStreamLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._internalOpen(dataSource, range, false);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range, isSubrange) {\n            this._dataSource = dataSource;\n\n            if (!isSubrange) {\n                this._totalRange = range;\n            } else {\n                this._currentRange = range;\n            }\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var reader = this._reader = new self.MSStreamReader();\n            reader.onprogress = this._msrOnProgress.bind(this);\n            reader.onload = this._msrOnLoad.bind(this);\n            reader.onerror = this._msrOnError.bind(this);\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'ms-stream';\n            xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);\n            xhr.onerror = this._xhrOnError.bind(this);\n\n            if (dataSource.withCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            if (this._isReconnecting) {\n                this._isReconnecting = false;\n            } else {\n                this._status = _loader.LoaderStatus.kConnecting;\n            }\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._reader) {\n                if (this._reader.readyState === 1) {\n                    // LOADING\n                    this._reader.abort();\n                }\n                this._reader.onprogress = null;\n                this._reader.onload = null;\n                this._reader.onerror = null;\n                this._reader = null;\n            }\n            if (this._xhr) {\n                this._xhr.abort();\n                this._xhr.onreadystatechange = null;\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_xhrOnReadyStateChange',\n        value: function _xhrOnReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    if (xhr.responseURL != undefined) {\n                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                        if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                            this._currentRedirectedURL = redirectedURL;\n                            if (this._onURLRedirect) {\n                                this._onURLRedirect(redirectedURL);\n                            }\n                        }\n                    }\n\n                    var lengthHeader = xhr.getResponseHeader('Content-Length');\n                    if (lengthHeader != null && this._contentLength == null) {\n                        var length = parseInt(lengthHeader);\n                        if (length > 0) {\n                            this._contentLength = length;\n                            if (this._onContentLengthKnown) {\n                                this._onContentLengthKnown(this._contentLength);\n                            }\n                        }\n                    }\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            } else if (xhr.readyState === 3) {\n                // LOADING\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    this._status = _loader.LoaderStatus.kBuffering;\n\n                    var msstream = xhr.response;\n                    this._reader.readAsArrayBuffer(msstream);\n                }\n            }\n        }\n    }, {\n        key: '_xhrOnError',\n        value: function _xhrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = _loader.LoaderErrors.EXCEPTION;\n            var info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: '_msrOnProgress',\n        value: function _msrOnProgress(e) {\n            var reader = e.target;\n            var bigbuffer = reader.result;\n            if (bigbuffer == null) {\n                // result may be null, workaround for buggy M$\n                this._doReconnectIfNeeded();\n                return;\n            }\n\n            var slice = bigbuffer.slice(this._lastTimeBufferSize);\n            this._lastTimeBufferSize = bigbuffer.byteLength;\n            var byteStart = this._totalRange.from + this._receivedLength;\n            this._receivedLength += slice.byteLength;\n\n            if (this._onDataArrival) {\n                this._onDataArrival(slice, byteStart, this._receivedLength);\n            }\n\n            if (bigbuffer.byteLength >= this._bufferLimit) {\n                _logger2.default.v(this.TAG, 'MSStream buffer exceeded max size near ' + (byteStart + slice.byteLength) + ', reconnecting...');\n                this._doReconnectIfNeeded();\n            }\n        }\n    }, {\n        key: '_doReconnectIfNeeded',\n        value: function _doReconnectIfNeeded() {\n            if (this._contentLength == null || this._receivedLength < this._contentLength) {\n                this._isReconnecting = true;\n                this._lastTimeBufferSize = 0;\n                this._internalAbort();\n\n                var range = {\n                    from: this._totalRange.from + this._receivedLength,\n                    to: -1\n                };\n                this._internalOpen(this._dataSource, range, true);\n            }\n        }\n    }, {\n        key: '_msrOnLoad',\n        value: function _msrOnLoad(e) {\n            // actually it is onComplete event\n            this._status = _loader.LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);\n            }\n        }\n    }, {\n        key: '_msrOnError',\n        value: function _msrOnError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'MSStream meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }]);\n\n    return MSStreamLoader;\n}(_loader.BaseLoader);\n\nexports.default = MSStreamLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24}],31:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _speedSampler = _dereq_('./speed-sampler.js');\n\nvar _speedSampler2 = _interopRequireDefault(_speedSampler);\n\nvar _loader = _dereq_('./loader.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (C) 2016 Bilibili. All Rights Reserved.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// Universal IO Loader, implemented by adding Range header in xhr's request header\nvar RangeLoader = function (_BaseLoader) {\n    _inherits(RangeLoader, _BaseLoader);\n\n    _createClass(RangeLoader, null, [{\n        key: 'isSupported',\n        value: function isSupported() {\n            try {\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'https://example.com', true);\n                xhr.responseType = 'arraybuffer';\n                return xhr.responseType === 'arraybuffer';\n            } catch (e) {\n                _logger2.default.w('RangeLoader', e.message);\n                return false;\n            }\n        }\n    }]);\n\n    function RangeLoader(seekHandler, config) {\n        _classCallCheck(this, RangeLoader);\n\n        var _this = _possibleConstructorReturn(this, (RangeLoader.__proto__ || Object.getPrototypeOf(RangeLoader)).call(this, 'xhr-range-loader'));\n\n        _this.TAG = 'RangeLoader';\n\n        _this._seekHandler = seekHandler;\n        _this._config = config;\n        _this._needStash = false;\n\n        _this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192];\n        _this._currentChunkSizeKB = 384;\n        _this._currentSpeedNormalized = 0;\n        _this._zeroSpeedChunkCount = 0;\n\n        _this._xhr = null;\n        _this._speedSampler = new _speedSampler2.default();\n\n        _this._requestAbort = false;\n        _this._waitForTotalLength = false;\n        _this._totalLengthReceived = false;\n\n        _this._currentRequestURL = null;\n        _this._currentRedirectedURL = null;\n        _this._currentRequestRange = null;\n        _this._totalLength = null; // size of the entire file\n        _this._contentLength = null; // Content-Length of entire request range\n        _this._receivedLength = 0; // total received bytes\n        _this._lastTimeLoaded = 0; // received bytes of current request sub-range\n        return _this;\n    }\n\n    _createClass(RangeLoader, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this.isWorking()) {\n                this.abort();\n            }\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr = null;\n            }\n            _get(RangeLoader.prototype.__proto__ || Object.getPrototypeOf(RangeLoader.prototype), 'destroy', this).call(this);\n        }\n    }, {\n        key: 'open',\n        value: function open(dataSource, range) {\n            this._dataSource = dataSource;\n            this._range = range;\n            this._status = _loader.LoaderStatus.kConnecting;\n\n            if (!this._totalLengthReceived) {\n                // We need total filesize\n                this._waitForTotalLength = true;\n                this._internalOpen(this._dataSource, { from: 0, to: -1 });\n            } else {\n                // We have filesize, start loading\n                this._openSubRange();\n            }\n        }\n    }, {\n        key: '_openSubRange',\n        value: function _openSubRange() {\n            var chunkSize = this._currentChunkSizeKB * 1024;\n\n            var from = this._range.from + this._receivedLength;\n            var to = from + chunkSize;\n\n            if (this._contentLength != null) {\n                if (to - this._range.from >= this._contentLength) {\n                    to = this._range.from + this._contentLength - 1;\n                }\n            }\n\n            this._currentRequestRange = { from: from, to: to };\n            this._internalOpen(this._dataSource, this._currentRequestRange);\n        }\n    }, {\n        key: '_internalOpen',\n        value: function _internalOpen(dataSource, range) {\n            this._lastTimeLoaded = 0;\n\n            var sourceURL = dataSource.url;\n            if (this._config.reuseRedirectedURL) {\n                if (this._currentRedirectedURL != undefined) {\n                    sourceURL = this._currentRedirectedURL;\n                } else if (dataSource.redirectedURL != undefined) {\n                    sourceURL = dataSource.redirectedURL;\n                }\n            }\n\n            var seekConfig = this._seekHandler.getConfig(sourceURL, range);\n            this._currentRequestURL = seekConfig.url;\n\n            var xhr = this._xhr = new XMLHttpRequest();\n            xhr.open('GET', seekConfig.url, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onload = this._onLoad.bind(this);\n            xhr.onerror = this._onXhrError.bind(this);\n\n            if (dataSource.withCredentials && xhr['withCredentials']) {\n                xhr.withCredentials = true;\n            }\n\n            if (_typeof(seekConfig.headers) === 'object') {\n                var headers = seekConfig.headers;\n\n                for (var key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        xhr.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            xhr.send();\n        }\n    }, {\n        key: 'abort',\n        value: function abort() {\n            this._requestAbort = true;\n            this._internalAbort();\n            this._status = _loader.LoaderStatus.kComplete;\n        }\n    }, {\n        key: '_internalAbort',\n        value: function _internalAbort() {\n            if (this._xhr) {\n                this._xhr.onreadystatechange = null;\n                this._xhr.onprogress = null;\n                this._xhr.onload = null;\n                this._xhr.onerror = null;\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        }\n    }, {\n        key: '_onReadyStateChange',\n        value: function _onReadyStateChange(e) {\n            var xhr = e.target;\n\n            if (xhr.readyState === 2) {\n                // HEADERS_RECEIVED\n                if (xhr.responseURL != undefined) {\n                    // if the browser support this property\n                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                        this._currentRedirectedURL = redirectedURL;\n                        if (this._onURLRedirect) {\n                            this._onURLRedirect(redirectedURL);\n                        }\n                    }\n                }\n\n                if (xhr.status >= 200 && xhr.status <= 299) {\n                    if (this._waitForTotalLength) {\n                        return;\n                    }\n                    this._status = _loader.LoaderStatus.kBuffering;\n                } else {\n                    this._status = _loader.LoaderStatus.kError;\n                    if (this._onError) {\n                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });\n                    } else {\n                        throw new _exception.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_onProgress',\n        value: function _onProgress(e) {\n            if (this._contentLength === null) {\n                var openNextRange = false;\n\n                if (this._waitForTotalLength) {\n                    this._waitForTotalLength = false;\n                    this._totalLengthReceived = true;\n                    openNextRange = true;\n\n                    var total = e.total;\n                    this._internalAbort();\n                    if (total != null & total !== 0) {\n                        this._totalLength = total;\n                    }\n                }\n\n                // calculate currrent request range's contentLength\n                if (this._range.to === -1) {\n                    this._contentLength = this._totalLength - this._range.from;\n                } else {\n                    // to !== -1\n                    this._contentLength = this._range.to - this._range.from + 1;\n                }\n\n                if (openNextRange) {\n                    this._openSubRange();\n                    return;\n                }\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n\n            var delta = e.loaded - this._lastTimeLoaded;\n            this._lastTimeLoaded = e.loaded;\n            this._speedSampler.addBytes(delta);\n        }\n    }, {\n        key: '_normalizeSpeed',\n        value: function _normalizeSpeed(input) {\n            var list = this._chunkSizeKBList;\n            var last = list.length - 1;\n            var mid = 0;\n            var lbound = 0;\n            var ubound = last;\n\n            if (input < list[0]) {\n                return list[0];\n            }\n\n            while (lbound <= ubound) {\n                mid = lbound + Math.floor((ubound - lbound) / 2);\n                if (mid === last || input >= list[mid] && input < list[mid + 1]) {\n                    return list[mid];\n                } else if (list[mid] < input) {\n                    lbound = mid + 1;\n                } else {\n                    ubound = mid - 1;\n                }\n            }\n        }\n    }, {\n        key: '_onLoad',\n        value: function _onLoad(e) {\n            if (this._waitForTotalLength) {\n                this._waitForTotalLength = false;\n                return;\n            }\n\n            this._lastTimeLoaded = 0;\n            var KBps = this._speedSampler.lastSecondKBps;\n            if (KBps === 0) {\n                this._zeroSpeedChunkCount++;\n                if (this._zeroSpeedChunkCount >= 3) {\n                    // Try get currentKBps after 3 chunks\n                    KBps = this._speedSampler.currentKBps;\n                }\n            }\n\n            if (KBps !== 0) {\n                var normalized = this._normalizeSpeed(KBps);\n                if (this._currentSpeedNormalized !== normalized) {\n                    this._currentSpeedNormalized = normalized;\n                    this._currentChunkSizeKB = normalized;\n                }\n            }\n\n            var chunk = e.target.response;\n            var byteStart = this._range.from + this._receivedLength;\n            this._receivedLength += chunk.byteLength;\n\n            var reportComplete = false;\n\n            if (this._contentLength != null && this._receivedLength < this._contentLength) {\n                // continue load next chunk\n                this._openSubRange();\n            } else {\n                reportComplete = true;\n            }\n\n            // dispatch received chunk\n            if (this._onDataArrival) {\n                this._onDataArrival(chunk, byteStart, this._receivedLength);\n            }\n\n            if (reportComplete) {\n                this._status = _loader.LoaderStatus.kComplete;\n                if (this._onComplete) {\n                    this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n                }\n            }\n        }\n    }, {\n        key: '_onXhrError',\n        value: function _onXhrError(e) {\n            this._status = _loader.LoaderStatus.kError;\n            var type = 0;\n            var info = null;\n\n            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength) {\n                type = _loader.LoaderErrors.EARLY_EOF;\n                info = { code: -1, msg: 'RangeLoader meet Early-Eof' };\n            } else {\n                type = _loader.LoaderErrors.EXCEPTION;\n                info = { code: -1, msg: e.constructor.name + ' ' + e.type };\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new _exception.RuntimeException(info.msg);\n            }\n        }\n    }, {\n        key: 'currentSpeed',\n        get: function get() {\n            return this._speedSampler.lastSecondKBps;\n        }\n    }]);\n\n    return RangeLoader;\n}(_loader.BaseLoader);\n\nexports.default = RangeLoader;\n\n},{\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./loader.js\":24,\"./speed-sampler.js\":27}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _transmuxer = _dereq_('../core/transmuxer.js');\n\nvar _transmuxer2 = _interopRequireDefault(_transmuxer);\n\nvar _transmuxingEvents = _dereq_('../core/transmuxing-events.js');\n\nvar _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);\n\nvar _mseController = _dereq_('../core/mse-controller.js');\n\nvar _mseController2 = _interopRequireDefault(_mseController);\n\nvar _mseEvents = _dereq_('../core/mse-events.js');\n\nvar _mseEvents2 = _interopRequireDefault(_mseEvents);\n\nvar _playerErrors = _dereq_('./player-errors.js');\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlvPlayer = function () {\n    function FlvPlayer(mediaDataSource, config) {\n        _classCallCheck(this, FlvPlayer);\n\n        this.TAG = 'FlvPlayer';\n        this._type = 'FlvPlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() !== 'flv') {\n            throw new _exception.InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');\n        }\n\n        if (mediaDataSource.isLive === true) {\n            this._config.isLive = true;\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n            onvSeeking: this._onvSeeking.bind(this),\n            onvCanPlay: this._onvCanPlay.bind(this),\n            onvStalled: this._onvStalled.bind(this),\n            onvProgress: this._onvProgress.bind(this)\n        };\n\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n\n        this._pendingSeekTime = null; // in seconds\n        this._requestSetTime = false;\n        this._seekpointRecord = null;\n        this._progressChecker = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n        this._msectl = null;\n        this._transmuxer = null;\n\n        this._mseSourceOpened = false;\n        this._hasPendingLoad = false;\n        this._receivedCanPlay = false;\n\n        this._mediaInfo = null;\n        this._statisticsInfo = null;\n\n        var chromeNeedIDRFix = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661);\n        this._alwaysSeekKeyframe = chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie ? true : false;\n\n        if (this._alwaysSeekKeyframe) {\n            this._config.accurateSeek = false;\n        }\n    }\n\n    _createClass(FlvPlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._progressChecker != null) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n            }\n            if (this._transmuxer) {\n                this.unload();\n            }\n            if (this._mediaElement) {\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._statisticsInfo != null) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            var _this2 = this;\n\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            mediaElement.addEventListener('seeking', this.e.onvSeeking);\n            mediaElement.addEventListener('canplay', this.e.onvCanPlay);\n            mediaElement.addEventListener('stalled', this.e.onvStalled);\n            mediaElement.addEventListener('progress', this.e.onvProgress);\n\n            this._msectl = new _mseController2.default();\n\n            this._msectl.on(_mseEvents2.default.UPDATE_END, this._onmseUpdateEnd.bind(this));\n            this._msectl.on(_mseEvents2.default.BUFFER_FULL, this._onmseBufferFull.bind(this));\n            this._msectl.on(_mseEvents2.default.SOURCE_OPEN, function () {\n                _this2._mseSourceOpened = true;\n                if (_this2._hasPendingLoad) {\n                    _this2._hasPendingLoad = false;\n                    _this2.load();\n                }\n            });\n            this._msectl.on(_mseEvents2.default.ERROR, function (info) {\n                _this2._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);\n            });\n\n            this._msectl.attachMediaElement(mediaElement);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // We can defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._msectl.detachMediaElement();\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\n                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n                this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                this._mediaElement = null;\n            }\n            if (this._msectl) {\n                this._msectl.destroy();\n                this._msectl = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            var _this3 = this;\n\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            if (this._transmuxer) {\n                throw new _exception.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');\n            }\n            if (this._hasPendingLoad) {\n                return;\n            }\n\n            if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\n                this._hasPendingLoad = true;\n                return;\n            }\n\n            if (this._mediaElement.readyState > 0) {\n                this._requestSetTime = true;\n                // IE11 may throw InvalidStateError if readyState === 0\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._transmuxer = new _transmuxer2.default(this._mediaDataSource, this._config);\n\n            this._transmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {\n                _this3._msectl.appendInitSegment(is);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {\n                _this3._msectl.appendMediaSegment(ms);\n\n                // lazyLoad check\n                if (_this3._config.lazyLoad && !_this3._config.isLive) {\n                    var currentTime = _this3._mediaElement.currentTime;\n                    if (ms.info.endDts >= (currentTime + _this3._config.lazyLoadMaxDuration) * 1000) {\n                        if (_this3._progressChecker == null) {\n                            _logger2.default.v(_this3.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                            _this3._suspendTransmuxer();\n                        }\n                    }\n                }\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {\n                _this3._msectl.endOfStream();\n                _this3._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {\n                _this3._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {\n                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {\n                _this3._mediaInfo = mediaInfo;\n                _this3._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {\n                _this3._statisticsInfo = _this3._fillStatisticsInfo(statInfo);\n                _this3._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this3._statisticsInfo));\n            });\n            this._transmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {\n                if (_this3._mediaElement && !_this3._config.accurateSeek) {\n                    _this3._requestSetTime = true;\n                    _this3._mediaElement.currentTime = milliseconds / 1000;\n                }\n            });\n\n            this._transmuxer.open();\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.pause();\n            }\n            if (this._msectl) {\n                this._msectl.seek(0);\n            }\n            if (this._transmuxer) {\n                this._transmuxer.close();\n                this._transmuxer.destroy();\n                this._transmuxer = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_fillStatisticsInfo',\n        value: function _fillStatisticsInfo(statInfo) {\n            statInfo.playerType = this._type;\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return statInfo;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                statInfo.decodedFrames = decoded;\n                statInfo.droppedFrames = dropped;\n            }\n\n            return statInfo;\n        }\n    }, {\n        key: '_onmseUpdateEnd',\n        value: function _onmseUpdateEnd() {\n            if (!this._config.lazyLoad || this._config.isLive) {\n                return;\n            }\n\n            var buffered = this._mediaElement.buffered;\n            var currentTime = this._mediaElement.currentTime;\n            var currentRangeStart = 0;\n            var currentRangeEnd = 0;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var start = buffered.start(i);\n                var end = buffered.end(i);\n                if (start <= currentTime && currentTime < end) {\n                    currentRangeStart = start;\n                    currentRangeEnd = end;\n                    break;\n                }\n            }\n\n            if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {\n                _logger2.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_onmseBufferFull',\n        value: function _onmseBufferFull() {\n            _logger2.default.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');\n            if (this._progressChecker == null) {\n                this._suspendTransmuxer();\n            }\n        }\n    }, {\n        key: '_suspendTransmuxer',\n        value: function _suspendTransmuxer() {\n            if (this._transmuxer) {\n                this._transmuxer.pause();\n\n                if (this._progressChecker == null) {\n                    this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);\n                }\n            }\n        }\n    }, {\n        key: '_checkProgressAndResume',\n        value: function _checkProgressAndResume() {\n            var currentTime = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            var needResume = false;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (currentTime >= from && currentTime < to) {\n                    if (currentTime >= to - this._config.lazyLoadRecoverDuration) {\n                        needResume = true;\n                    }\n                    break;\n                }\n            }\n\n            if (needResume) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n                if (needResume) {\n                    _logger2.default.v(this.TAG, 'Continue loading from paused position');\n                    this._transmuxer.resume();\n                }\n            }\n        }\n    }, {\n        key: '_isTimepointBuffered',\n        value: function _isTimepointBuffered(seconds) {\n            var buffered = this._mediaElement.buffered;\n\n            for (var i = 0; i < buffered.length; i++) {\n                var from = buffered.start(i);\n                var to = buffered.end(i);\n                if (seconds >= from && seconds < to) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: '_internalSeek',\n        value: function _internalSeek(seconds) {\n            var directSeek = this._isTimepointBuffered(seconds);\n\n            var directSeekBegin = false;\n            var directSeekBeginTime = 0;\n\n            if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {\n                var videoBeginTime = this._mediaElement.buffered.start(0);\n                if (videoBeginTime < 1.0 && seconds < videoBeginTime || _browser2.default.safari) {\n                    directSeekBegin = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    directSeekBeginTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                }\n            }\n\n            if (directSeekBegin) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = directSeekBeginTime;\n            } else if (directSeek) {\n                // buffered position\n                if (!this._alwaysSeekKeyframe) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                } else {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));\n                    this._requestSetTime = true;\n                    if (idr != null) {\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    } else {\n                        this._mediaElement.currentTime = seconds;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n            } else {\n                if (this._progressChecker != null) {\n                    window.clearInterval(this._progressChecker);\n                    this._progressChecker = null;\n                }\n                this._msectl.seek(seconds);\n                this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds\n                // no need to set mediaElement.currentTime if non-accurateSeek,\n                // just wait for the recommend_seekpoint callback\n                if (this._config.accurateSeek) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = seconds;\n                }\n            }\n        }\n    }, {\n        key: '_checkAndApplyUnbufferedSeekpoint',\n        value: function _checkAndApplyUnbufferedSeekpoint() {\n            if (this._seekpointRecord) {\n                if (this._seekpointRecord.recordTime <= this._now() - 100) {\n                    var target = this._mediaElement.currentTime;\n                    this._seekpointRecord = null;\n                    if (!this._isTimepointBuffered(target)) {\n                        if (this._progressChecker != null) {\n                            window.clearTimeout(this._progressChecker);\n                            this._progressChecker = null;\n                        }\n                        // .currentTime is consists with .buffered timestamp\n                        // Chrome/Edge use DTS, while FireFox/Safari use PTS\n                        this._msectl.seek(target);\n                        this._transmuxer.seek(Math.floor(target * 1000));\n                        // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\n                        if (this._config.accurateSeek) {\n                            this._requestSetTime = true;\n                            this._mediaElement.currentTime = target;\n                        }\n                    }\n                } else {\n                    window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n                }\n            }\n        }\n    }, {\n        key: '_checkAndResumeStuckPlayback',\n        value: function _checkAndResumeStuckPlayback(stalled) {\n            var media = this._mediaElement;\n            if (stalled || !this._receivedCanPlay || media.readyState < 2) {\n                // HAVE_CURRENT_DATA\n                var buffered = media.buffered;\n                if (buffered.length > 0 && media.currentTime < buffered.start(0)) {\n                    _logger2.default.w(this.TAG, 'Playback seems stuck at ' + media.currentTime + ', seek to ' + buffered.start(0));\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = buffered.start(0);\n                    this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n                }\n            } else {\n                // Playback didn't stuck, remove progress event listener\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            }\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n        }\n    }, {\n        key: '_onvSeeking',\n        value: function _onvSeeking(e) {\n            // handle seeking request from browser's progress bar\n            var target = this._mediaElement.currentTime;\n            var buffered = this._mediaElement.buffered;\n\n            if (this._requestSetTime) {\n                this._requestSetTime = false;\n                return;\n            }\n\n            if (target < 1.0 && buffered.length > 0) {\n                // seek to video begin, set currentTime directly if beginPTS buffered\n                var videoBeginTime = buffered.start(0);\n                if (videoBeginTime < 1.0 && target < videoBeginTime || _browser2.default.safari) {\n                    this._requestSetTime = true;\n                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                    this._mediaElement.currentTime = _browser2.default.safari ? 0.1 : videoBeginTime;\n                    return;\n                }\n            }\n\n            if (this._isTimepointBuffered(target)) {\n                if (this._alwaysSeekKeyframe) {\n                    var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\n                    if (idr != null) {\n                        this._requestSetTime = true;\n                        this._mediaElement.currentTime = idr.dts / 1000;\n                    }\n                }\n                if (this._progressChecker != null) {\n                    this._checkProgressAndResume();\n                }\n                return;\n            }\n\n            this._seekpointRecord = {\n                seekPoint: target,\n                recordTime: this._now()\n            };\n            window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n        }\n    }, {\n        key: '_onvCanPlay',\n        value: function _onvCanPlay(e) {\n            this._receivedCanPlay = true;\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n        }\n    }, {\n        key: '_onvStalled',\n        value: function _onvStalled(e) {\n            this._checkAndResumeStuckPlayback(true);\n        }\n    }, {\n        key: '_onvProgress',\n        value: function _onvProgress(e) {\n            this._checkAndResumeStuckPlayback();\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._internalSeek(seconds);\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            return Object.assign({}, this._mediaInfo);\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            if (this._statisticsInfo == null) {\n                this._statisticsInfo = {};\n            }\n            this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\n            return Object.assign({}, this._statisticsInfo);\n        }\n    }]);\n\n    return FlvPlayer;\n}();\n\nexports.default = FlvPlayer;\n\n},{\"../config.js\":5,\"../core/mse-controller.js\":9,\"../core/mse-events.js\":10,\"../core/transmuxer.js\":11,\"../core/transmuxing-events.js\":13,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./player-errors.js\":34,\"./player-events.js\":35,\"events\":2}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _playerEvents = _dereq_('./player-events.js');\n\nvar _playerEvents2 = _interopRequireDefault(_playerEvents);\n\nvar _config = _dereq_('../config.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nvar NativePlayer = function () {\n    function NativePlayer(mediaDataSource, config) {\n        _classCallCheck(this, NativePlayer);\n\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new _events2.default();\n\n        this._config = (0, _config.createDefaultConfig)();\n        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new _exception.InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new _exception.InvalidArgumentException('NativePlayer(' + mediaDataSource.type + ') doesn\\'t support multipart playback!');\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    _createClass(NativePlayer, [{\n        key: 'destroy',\n        value: function destroy() {\n            if (this._mediaElement) {\n                this.unload();\n                this.detachMediaElement();\n            }\n            this.e = null;\n            this._mediaDataSource = null;\n            this._emitter.removeAllListeners();\n            this._emitter = null;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, listener) {\n            var _this = this;\n\n            if (event === _playerEvents2.default.MEDIA_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    // HAVE_NOTHING\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);\n                    });\n                }\n            } else if (event === _playerEvents2.default.STATISTICS_INFO) {\n                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                    Promise.resolve().then(function () {\n                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);\n                    });\n                }\n            }\n            this._emitter.addListener(event, listener);\n        }\n    }, {\n        key: 'off',\n        value: function off(event, listener) {\n            this._emitter.removeListener(event, listener);\n        }\n    }, {\n        key: 'attachMediaElement',\n        value: function attachMediaElement(mediaElement) {\n            this._mediaElement = mediaElement;\n            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n            if (this._pendingSeekTime != null) {\n                try {\n                    mediaElement.currentTime = this._pendingSeekTime;\n                    this._pendingSeekTime = null;\n                } catch (e) {\n                    // IE11 may throw InvalidStateError if readyState === 0\n                    // Defer set currentTime operation after loadedmetadata\n                }\n            }\n        }\n    }, {\n        key: 'detachMediaElement',\n        value: function detachMediaElement() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n                this._mediaElement = null;\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'load',\n        value: function load() {\n            if (!this._mediaElement) {\n                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');\n            }\n            this._mediaElement.src = this._mediaDataSource.url;\n\n            if (this._mediaElement.readyState > 0) {\n                this._mediaElement.currentTime = 0;\n            }\n\n            this._mediaElement.preload = 'auto';\n            this._mediaElement.load();\n            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n        }\n    }, {\n        key: 'unload',\n        value: function unload() {\n            if (this._mediaElement) {\n                this._mediaElement.src = '';\n                this._mediaElement.removeAttribute('src');\n            }\n            if (this._statisticsReporter != null) {\n                window.clearInterval(this._statisticsReporter);\n                this._statisticsReporter = null;\n            }\n        }\n    }, {\n        key: 'play',\n        value: function play() {\n            this._mediaElement.play();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._mediaElement.pause();\n        }\n    }, {\n        key: '_onvLoadedMetadata',\n        value: function _onvLoadedMetadata(e) {\n            if (this._pendingSeekTime != null) {\n                this._mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            }\n            this._emitter.emit(_playerEvents2.default.MEDIA_INFO, this.mediaInfo);\n        }\n    }, {\n        key: '_reportStatisticsInfo',\n        value: function _reportStatisticsInfo() {\n            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this._type;\n        }\n    }, {\n        key: 'buffered',\n        get: function get() {\n            return this._mediaElement.buffered;\n        }\n    }, {\n        key: 'duration',\n        get: function get() {\n            return this._mediaElement.duration;\n        }\n    }, {\n        key: 'volume',\n        get: function get() {\n            return this._mediaElement.volume;\n        },\n        set: function set(value) {\n            this._mediaElement.volume = value;\n        }\n    }, {\n        key: 'muted',\n        get: function get() {\n            return this._mediaElement.muted;\n        },\n        set: function set(muted) {\n            this._mediaElement.muted = muted;\n        }\n    }, {\n        key: 'currentTime',\n        get: function get() {\n            if (this._mediaElement) {\n                return this._mediaElement.currentTime;\n            }\n            return 0;\n        },\n        set: function set(seconds) {\n            if (this._mediaElement) {\n                this._mediaElement.currentTime = seconds;\n            } else {\n                this._pendingSeekTime = seconds;\n            }\n        }\n    }, {\n        key: 'mediaInfo',\n        get: function get() {\n            var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n            var info = {\n                mimeType: mediaPrefix + this._mediaDataSource.type\n            };\n            if (this._mediaElement) {\n                info.duration = Math.floor(this._mediaElement.duration * 1000);\n                if (this._mediaElement instanceof HTMLVideoElement) {\n                    info.width = this._mediaElement.videoWidth;\n                    info.height = this._mediaElement.videoHeight;\n                }\n            }\n            return info;\n        }\n    }, {\n        key: 'statisticsInfo',\n        get: function get() {\n            var info = {\n                playerType: this._type,\n                url: this._mediaDataSource.url\n            };\n\n            if (!(this._mediaElement instanceof HTMLVideoElement)) {\n                return info;\n            }\n\n            var hasQualityInfo = true;\n            var decoded = 0;\n            var dropped = 0;\n\n            if (this._mediaElement.getVideoPlaybackQuality) {\n                var quality = this._mediaElement.getVideoPlaybackQuality();\n                decoded = quality.totalVideoFrames;\n                dropped = quality.droppedVideoFrames;\n            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n                decoded = this._mediaElement.webkitDecodedFrameCount;\n                dropped = this._mediaElement.webkitDroppedFrameCount;\n            } else {\n                hasQualityInfo = false;\n            }\n\n            if (hasQualityInfo) {\n                info.decodedFrames = decoded;\n                info.droppedFrames = dropped;\n            }\n\n            return info;\n        }\n    }]);\n\n    return NativePlayer;\n}();\n\nexports.default = NativePlayer;\n\n},{\"../config.js\":5,\"../utils/exception.js\":40,\"./player-events.js\":35,\"events\":2}],34:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ErrorDetails = exports.ErrorTypes = undefined;\n\nvar _loader = _dereq_('../io/loader.js');\n\nvar _demuxErrors = _dereq_('../demux/demux-errors.js');\n\nvar _demuxErrors2 = _interopRequireDefault(_demuxErrors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar ErrorTypes = exports.ErrorTypes = {\n    NETWORK_ERROR: 'NetworkError',\n    MEDIA_ERROR: 'MediaError',\n    OTHER_ERROR: 'OtherError'\n};\n\nvar ErrorDetails = exports.ErrorDetails = {\n    NETWORK_EXCEPTION: _loader.LoaderErrors.EXCEPTION,\n    NETWORK_STATUS_CODE_INVALID: _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID,\n    NETWORK_TIMEOUT: _loader.LoaderErrors.CONNECTING_TIMEOUT,\n    NETWORK_UNRECOVERABLE_EARLY_EOF: _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF,\n\n    MEDIA_MSE_ERROR: 'MediaMSEError',\n\n    MEDIA_FORMAT_ERROR: _demuxErrors2.default.FORMAT_ERROR,\n    MEDIA_FORMAT_UNSUPPORTED: _demuxErrors2.default.FORMAT_UNSUPPORTED,\n    MEDIA_CODEC_UNSUPPORTED: _demuxErrors2.default.CODEC_UNSUPPORTED\n};\n\n},{\"../demux/demux-errors.js\":16,\"../io/loader.js\":24}],35:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar PlayerEvents = {\n  ERROR: 'error',\n  LOADING_COMPLETE: 'loading_complete',\n  RECOVERED_EARLY_EOF: 'recovered_early_eof',\n  MEDIA_INFO: 'media_info',\n  STATISTICS_INFO: 'statistics_info'\n};\n\nexports.default = PlayerEvents;\n\n},{}],36:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar AAC = function () {\n    function AAC() {\n        _classCallCheck(this, AAC);\n    }\n\n    _createClass(AAC, null, [{\n        key: \"getSilentFrame\",\n        value: function getSilentFrame(channelCount) {\n            if (channelCount === 1) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n            } else if (channelCount === 2) {\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n            } else if (channelCount === 3) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n            } else if (channelCount === 4) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n            } else if (channelCount === 5) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n            } else if (channelCount === 6) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n            }\n            return null;\n        }\n    }]);\n\n    return AAC;\n}();\n\nexports.default = AAC;\n\n},{}],37:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nvar MP4 = function () {\n    function MP4() {\n        _classCallCheck(this, MP4);\n    }\n\n    _createClass(MP4, null, [{\n        key: 'init',\n        value: function init() {\n            MP4.types = {\n                avc1: [], avcC: [], btrt: [], dinf: [],\n                dref: [], esds: [], ftyp: [], hdlr: [],\n                mdat: [], mdhd: [], mdia: [], mfhd: [],\n                minf: [], moof: [], moov: [], mp4a: [],\n                mvex: [], mvhd: [], sdtp: [], stbl: [],\n                stco: [], stsc: [], stsd: [], stsz: [],\n                stts: [], tfdt: [], tfhd: [], traf: [],\n                trak: [], trun: [], trex: [], tkhd: [],\n                vmhd: [], smhd: [], '.mp3': []\n            };\n\n            for (var name in MP4.types) {\n                if (MP4.types.hasOwnProperty(name)) {\n                    MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n                }\n            }\n\n            var constants = MP4.constants = {};\n\n            constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\n            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D, // isom\n            0x61, 0x76, 0x63, 0x31 // avc1\n            ]);\n\n            constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01 // entry_count\n            ]);\n\n            constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // entry_count\n            ]);\n\n            constants.STSC = constants.STCO = constants.STTS;\n\n            constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // sample_size\n            0x00, 0x00, 0x00, 0x00 // sample_count\n            ]);\n\n            constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler\n            ]);\n\n            constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // pre_defined\n            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler\n            ]);\n\n            constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x01, // entry_count\n            0x00, 0x00, 0x00, 0x0C, // entry_size\n            0x75, 0x72, 0x6C, 0x20, // type 'url '\n            0x00, 0x00, 0x00, 0x01 // version(0) + flags\n            ]);\n\n            // Sound media header\n            constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)\n            ]);\n\n            // video media header\n            constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n            0x00, 0x00, // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes\n            0x00, 0x00]);\n        }\n\n        // Generate a box\n\n    }, {\n        key: 'box',\n        value: function box(type) {\n            var size = 8;\n            var result = null;\n            var datas = Array.prototype.slice.call(arguments, 1);\n            var arrayCount = datas.length;\n\n            for (var i = 0; i < arrayCount; i++) {\n                size += datas[i].byteLength;\n            }\n\n            result = new Uint8Array(size);\n            result[0] = size >>> 24 & 0xFF; // size\n            result[1] = size >>> 16 & 0xFF;\n            result[2] = size >>> 8 & 0xFF;\n            result[3] = size & 0xFF;\n\n            result.set(type, 4); // type\n\n            var offset = 8;\n            for (var _i = 0; _i < arrayCount; _i++) {\n                // data body\n                result.set(datas[_i], offset);\n                offset += datas[_i].byteLength;\n            }\n\n            return result;\n        }\n\n        // emit ftyp & moov\n\n    }, {\n        key: 'generateInitSegment',\n        value: function generateInitSegment(meta) {\n            var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n            var moov = MP4.moov(meta);\n\n            var result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n            result.set(ftyp, 0);\n            result.set(moov, ftyp.byteLength);\n            return result;\n        }\n\n        // Movie metadata box\n\n    }, {\n        key: 'moov',\n        value: function moov(meta) {\n            var mvhd = MP4.mvhd(meta.timescale, meta.duration);\n            var trak = MP4.trak(meta);\n            var mvex = MP4.mvex(meta);\n            return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n        }\n\n        // Movie header box\n\n    }, {\n        key: 'mvhd',\n        value: function mvhd(timescale, duration) {\n            return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID\n            ]));\n        }\n\n        // Track box\n\n    }, {\n        key: 'trak',\n        value: function trak(meta) {\n            return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n        }\n\n        // Track header box\n\n    }, {\n        key: 'tkhd',\n        value: function tkhd(meta) {\n            var trackId = meta.id,\n                duration = meta.duration;\n            var width = meta.presentWidth,\n                height = meta.presentHeight;\n\n            return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            trackId >>> 24 & 0xFF, // track_ID: 4 bytes\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n            width >>> 8 & 0xFF, // width and height\n            width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));\n        }\n\n        // Media Box\n\n    }, {\n        key: 'mdia',\n        value: function mdia(meta) {\n            return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n        }\n\n        // Media header box\n\n    }, {\n        key: 'mdhd',\n        value: function mdhd(meta) {\n            var timescale = meta.timescale;\n            var duration = meta.duration;\n            return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            0x00, 0x00, 0x00, 0x00, // creation_time\n            0x00, 0x00, 0x00, 0x00, // modification_time\n            timescale >>> 24 & 0xFF, // timescale: 4 bytes\n            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)\n            0x00, 0x00 // pre_defined = 0\n            ]));\n        }\n\n        // Media handler reference box\n\n    }, {\n        key: 'hdlr',\n        value: function hdlr(meta) {\n            var data = null;\n            if (meta.type === 'audio') {\n                data = MP4.constants.HDLR_AUDIO;\n            } else {\n                data = MP4.constants.HDLR_VIDEO;\n            }\n            return MP4.box(MP4.types.hdlr, data);\n        }\n\n        // Media infomation box\n\n    }, {\n        key: 'minf',\n        value: function minf(meta) {\n            var xmhd = null;\n            if (meta.type === 'audio') {\n                xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n            } else {\n                xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n            }\n            return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n        }\n\n        // Data infomation box\n\n    }, {\n        key: 'dinf',\n        value: function dinf() {\n            var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n            return result;\n        }\n\n        // Sample table box\n\n    }, {\n        key: 'stbl',\n        value: function stbl(meta) {\n            var result = MP4.box(MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n            );\n            return result;\n        }\n\n        // Sample description box\n\n    }, {\n        key: 'stsd',\n        value: function stsd(meta) {\n            if (meta.type === 'audio') {\n                if (meta.codec === 'mp3') {\n                    return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n                }\n                // else: aac -> mp4a\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n            } else {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n            }\n        }\n    }, {\n        key: 'mp3',\n        value: function mp3(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types['.mp3'], data);\n        }\n    }, {\n        key: 'mp4a',\n        value: function mp4a(meta) {\n            var channelCount = meta.channelCount;\n            var sampleRate = meta.audioSampleRate;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n            0x00, 0x10, // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00, // reserved(4)\n            sampleRate >>> 8 & 0xFF, // Audio sample rate\n            sampleRate & 0xFF, 0x00, 0x00]);\n\n            return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n        }\n    }, {\n        key: 'esds',\n        value: function esds(meta) {\n            var config = meta.config || [];\n            var configSize = config.length;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n\n            0x03, // descriptor_type\n            0x17 + configSize, // length3\n            0x00, 0x01, // es_id\n            0x00, // stream_priority\n\n            0x04, // descriptor_type\n            0x0F + configSize, // length\n            0x40, // codec: mpeg4_audio\n            0x15, // stream_type: Audio\n            0x00, 0x00, 0x00, // buffer_size\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n            0x05 // descriptor_type\n            ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n            ]));\n            return MP4.box(MP4.types.esds, data);\n        }\n    }, {\n        key: 'avc1',\n        value: function avc1(meta) {\n            var avcc = meta.avcc;\n            var width = meta.codecWidth,\n                height = meta.codecHeight;\n\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n            width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n            height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n            0x00, 0x01, // frame_count\n            0x0A, // strlen\n            0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth\n            0xFF, 0xFF // pre_defined = -1\n            ]);\n            return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n        }\n\n        // Movie Extends box\n\n    }, {\n        key: 'mvex',\n        value: function mvex(meta) {\n            return MP4.box(MP4.types.mvex, MP4.trex(meta));\n        }\n\n        // Track Extends box\n\n    }, {\n        key: 'trex',\n        value: function trex(meta) {\n            var trackId = meta.id;\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\n            ]);\n            return MP4.box(MP4.types.trex, data);\n        }\n\n        // Movie fragment box\n\n    }, {\n        key: 'moof',\n        value: function moof(track, baseMediaDecodeTime) {\n            return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n        }\n    }, {\n        key: 'mfhd',\n        value: function mfhd(sequenceNumber) {\n            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n            sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n            return MP4.box(MP4.types.mfhd, data);\n        }\n\n        // Track fragment box\n\n    }, {\n        key: 'traf',\n        value: function traf(track, baseMediaDecodeTime) {\n            var trackId = track.id;\n\n            // Track fragment header box\n            var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            trackId >>> 24 & 0xFF, // track_ID\n            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));\n            // Track Fragment Decode Time\n            var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n            baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n            baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n            var sdtp = MP4.sdtp(track);\n            var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n            return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n        }\n\n        // Sample Dependency Type box\n\n    }, {\n        key: 'sdtp',\n        value: function sdtp(track) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var data = new Uint8Array(4 + sampleCount);\n            // 0~4 bytes: version(0) & flags\n            for (var i = 0; i < sampleCount; i++) {\n                var flags = samples[i].flags;\n                data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n                flags.dependsOn << 4 // sample_depends_on\n                | flags.isDependedOn << 2 // sample_is_depended_on\n                | flags.hasRedundancy; // sample_has_redundancy\n            }\n            return MP4.box(MP4.types.sdtp, data);\n        }\n\n        // Track fragment run box\n\n    }, {\n        key: 'trun',\n        value: function trun(track, offset) {\n            var samples = track.samples || [];\n            var sampleCount = samples.length;\n            var dataSize = 12 + 16 * sampleCount;\n            var data = new Uint8Array(dataSize);\n            offset += 8 + dataSize;\n\n            data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n            sampleCount >>> 24 & 0xFF, // sample_count\n            sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n            offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n            for (var i = 0; i < sampleCount; i++) {\n                var duration = samples[i].duration;\n                var size = samples[i].size;\n                var flags = samples[i].flags;\n                var cts = samples[i].cts;\n                data.set([duration >>> 24 & 0xFF, // sample_duration\n                duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n                size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n                cts >>> 24 & 0xFF, // sample_composition_time_offset\n                cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n            }\n            return MP4.box(MP4.types.trun, data);\n        }\n    }, {\n        key: 'mdat',\n        value: function mdat(data) {\n            return MP4.box(MP4.types.mdat, data);\n        }\n    }]);\n\n    return MP4;\n}();\n\nMP4.init();\n\nexports.default = MP4;\n\n},{}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @author zheng qian <xqq@xqq.im>\nnicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _logger = _dereq_('../utils/logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _mp4Generator = _dereq_('./mp4-generator.js');\n\nvar _mp4Generator2 = _interopRequireDefault(_mp4Generator);\n\nvar _aacSilent = _dereq_('./aac-silent.js');\n\nvar _aacSilent2 = _interopRequireDefault(_aacSilent);\n\nvar _browser = _dereq_('../utils/browser.js');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _mediaSegmentInfo = _dereq_('../core/media-segment-info.js');\n\nvar _exception = _dereq_('../utils/exception.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Fragmented mp4 remuxer\nvar MP4Remuxer = function () {\n    function MP4Remuxer(config) {\n        _classCallCheck(this, MP4Remuxer);\n\n        this.TAG = 'MP4Remuxer';\n\n        this._config = config;\n        this._isLive = config.isLive === true ? true : false;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661) ? true : false;\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;\n\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n        this._mp3UseMpegAudio = !_browser2.default.firefox;\n    }\n\n    _createClass(MP4Remuxer, [{\n        key: 'destroy',\n        value: function destroy() {\n            this._dtsBase = -1;\n            this._dtsBaseInited = false;\n            this._audioMeta = null;\n            this._videoMeta = null;\n            this._audioSegmentInfoList.clear();\n            this._audioSegmentInfoList = null;\n            this._videoSegmentInfoList.clear();\n            this._videoSegmentInfoList = null;\n            this._onInitSegment = null;\n            this._onMediaSegment = null;\n        }\n    }, {\n        key: 'bindDataSource',\n        value: function bindDataSource(producer) {\n            producer.onDataAvailable = this.remux.bind(this);\n            producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n            return this;\n        }\n\n        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\n           InitSegment: {\n               type: string,\n               data: ArrayBuffer,\n               codec: string,\n               container: string\n           }\n        */\n\n    }, {\n        key: 'insertDiscontinuity',\n        value: function insertDiscontinuity() {\n            this._audioNextDts = this._videoNextDts = undefined;\n        }\n    }, {\n        key: 'seek',\n        value: function seek(originalDts) {\n            this._videoSegmentInfoList.clear();\n            this._audioSegmentInfoList.clear();\n        }\n    }, {\n        key: 'remux',\n        value: function remux(audioTrack, videoTrack) {\n            if (!this._onMediaSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n            }\n            if (!this._dtsBaseInited) {\n                this._calculateDtsBase(audioTrack, videoTrack);\n            }\n            this._remuxVideo(videoTrack);\n            this._remuxAudio(audioTrack);\n        }\n    }, {\n        key: '_onTrackMetadataReceived',\n        value: function _onTrackMetadataReceived(type, metadata) {\n            var metabox = null;\n\n            var container = 'mp4';\n            var codec = metadata.codec;\n\n            if (type === 'audio') {\n                this._audioMeta = metadata;\n                if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n                    // 'audio/mpeg' for MP3 audio track\n                    container = 'mpeg';\n                    codec = '';\n                    metabox = new Uint8Array();\n                } else {\n                    // 'audio/mp4, codecs=\"codec\"'\n                    metabox = _mp4Generator2.default.generateInitSegment(metadata);\n                }\n            } else if (type === 'video') {\n                this._videoMeta = metadata;\n                metabox = _mp4Generator2.default.generateInitSegment(metadata);\n            } else {\n                return;\n            }\n\n            // dispatch metabox (Initialization Segment)\n            if (!this._onInitSegment) {\n                throw new _exception.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n            }\n            this._onInitSegment(type, {\n                type: type,\n                data: metabox.buffer,\n                codec: codec,\n                container: type + '/' + container,\n                mediaDuration: metadata.duration // in timescale 1000 (milliseconds)\n            });\n        }\n    }, {\n        key: '_calculateDtsBase',\n        value: function _calculateDtsBase(audioTrack, videoTrack) {\n            if (this._dtsBaseInited) {\n                return;\n            }\n\n            if (audioTrack.samples && audioTrack.samples.length) {\n                this._audioDtsBase = audioTrack.samples[0].dts;\n            }\n            if (videoTrack.samples && videoTrack.samples.length) {\n                this._videoDtsBase = videoTrack.samples[0].dts;\n            }\n\n            this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n            this._dtsBaseInited = true;\n        }\n    }, {\n        key: '_remuxAudio',\n        value: function _remuxAudio(audioTrack) {\n            var track = audioTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1,\n                lastPts = -1;\n\n            var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n            var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n            var remuxSilentFrame = false;\n            var silentFrameDuration = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n\n            var bytes = 0;\n            var offset = 0;\n            var mdatbox = null;\n\n            if (mpegRawTrack) {\n                // allocate for raw mpeg buffer\n                bytes = track.length;\n                offset = 0;\n                mdatbox = new Uint8Array(bytes);\n            } else {\n                // allocate for fmp4 mdat box\n                bytes = 8 + track.length;\n                offset = 8; // size + type\n                mdatbox = new Uint8Array(bytes);\n                // size field\n                mdatbox[0] = bytes >>> 24 & 0xFF;\n                mdatbox[1] = bytes >>> 16 & 0xFF;\n                mdatbox[2] = bytes >>> 8 & 0xFF;\n                mdatbox[3] = bytes & 0xFF;\n                // type field (fourCC)\n                mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n            }\n\n            var mp4Samples = [];\n\n            while (samples.length) {\n                var aacSample = samples.shift();\n                var unit = aacSample.unit;\n                var originalDts = aacSample.dts - this._dtsBase;\n\n                if (dtsCorrection == undefined) {\n                    if (this._audioNextDts == undefined) {\n                        if (this._audioSegmentInfoList.isEmpty()) {\n                            dtsCorrection = 0;\n                            if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                                if (this._audioMeta.codec !== 'mp3') {\n                                    remuxSilentFrame = true;\n                                }\n                            }\n                        } else {\n                            var lastSample = this._audioSegmentInfoList.getLastSampleBefore(originalDts);\n                            if (lastSample != null) {\n                                var distance = originalDts - (lastSample.originalDts + lastSample.duration);\n                                if (distance <= 3) {\n                                    distance = 0;\n                                }\n                                var expectedDts = lastSample.dts + lastSample.duration + distance;\n                                dtsCorrection = originalDts - expectedDts;\n                            } else {\n                                // lastSample == null\n                                dtsCorrection = 0;\n                            }\n                        }\n                    } else {\n                        dtsCorrection = originalDts - this._audioNextDts;\n                    }\n                }\n\n                var dts = originalDts - dtsCorrection;\n                if (remuxSilentFrame) {\n                    // align audio segment beginDts to match with current video segment's beginDts\n                    var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(originalDts);\n                    if (videoSegment != null && videoSegment.beginDts < dts) {\n                        silentFrameDuration = dts - videoSegment.beginDts;\n                        dts = videoSegment.beginDts;\n                    } else {\n                        remuxSilentFrame = false;\n                    }\n                }\n                if (firstDts === -1) {\n                    firstDts = dts;\n                }\n\n                if (remuxSilentFrame) {\n                    remuxSilentFrame = false;\n                    samples.unshift(aacSample);\n\n                    var frame = this._generateSilentAudio(dts, silentFrameDuration);\n                    if (frame == null) {\n                        continue;\n                    }\n                    var _mp4Sample = frame.mp4Sample;\n                    var _unit = frame.unit;\n\n                    mp4Samples.push(_mp4Sample);\n\n                    // re-allocate mdatbox buffer with new size, to fit with this silent frame\n                    bytes += _unit.byteLength;\n                    mdatbox = new Uint8Array(bytes);\n                    mdatbox[0] = bytes >>> 24 & 0xFF;\n                    mdatbox[1] = bytes >>> 16 & 0xFF;\n                    mdatbox[2] = bytes >>> 8 & 0xFF;\n                    mdatbox[3] = bytes & 0xFF;\n                    mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n\n                    // fill data now\n                    mdatbox.set(_unit, offset);\n                    offset += _unit.byteLength;\n                    continue;\n                }\n\n                var sampleDuration = 0;\n\n                if (samples.length >= 1) {\n                    var nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    if (mp4Samples.length >= 1) {\n                        // use second last sample duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference sample duration\n                        sampleDuration = this._audioMeta.refSampleDuration;\n                    }\n                }\n\n                var mp4Sample = {\n                    dts: dts,\n                    pts: dts,\n                    cts: 0,\n                    size: unit.byteLength,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: 1,\n                        isDependedOn: 0,\n                        hasRedundancy: 0\n                    }\n                };\n                mp4Samples.push(mp4Sample);\n                mdatbox.set(unit, offset);\n                offset += unit.byteLength;\n            }\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            this._audioNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstDts;\n            info.endPts = lastDts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);\n            if (!this._isLive) {\n                this._audioSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            var moofbox = null;\n\n            if (mpegRawTrack) {\n                // Generate empty buffer, because useless for raw mpeg\n                moofbox = new Uint8Array();\n            } else {\n                // Generate moof for fmp4 segment\n                moofbox = _mp4Generator2.default.moof(track, firstDts);\n            }\n\n            track.samples = [];\n            track.length = 0;\n\n            var segment = {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            };\n\n            if (mpegRawTrack && firstSegmentAfterSeek) {\n                // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n                // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                segment.timestampOffset = firstDts;\n            }\n\n            this._onMediaSegment('audio', segment);\n        }\n    }, {\n        key: '_generateSilentAudio',\n        value: function _generateSilentAudio(dts, frameDuration) {\n            _logger2.default.v(this.TAG, 'GenerateSilentAudio: dts = ' + dts + ', duration = ' + frameDuration);\n\n            var unit = _aacSilent2.default.getSilentFrame(this._audioMeta.channelCount);\n            if (unit == null) {\n                _logger2.default.w(this.TAG, 'Cannot generate silent aac frame for channelCount = ' + this._audioMeta.channelCount);\n                return null;\n            }\n\n            var mp4Sample = {\n                dts: dts,\n                pts: dts,\n                cts: 0,\n                size: unit.byteLength,\n                duration: frameDuration,\n                originalDts: dts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            };\n\n            return {\n                unit: unit,\n                mp4Sample: mp4Sample\n            };\n        }\n    }, {\n        key: '_remuxVideo',\n        value: function _remuxVideo(videoTrack) {\n            var track = videoTrack;\n            var samples = track.samples;\n            var dtsCorrection = undefined;\n            var firstDts = -1,\n                lastDts = -1;\n            var firstPts = -1,\n                lastPts = -1;\n\n            if (!samples || samples.length === 0) {\n                return;\n            }\n\n            var bytes = 8 + videoTrack.length;\n            var mdatbox = new Uint8Array(bytes);\n            mdatbox[0] = bytes >>> 24 & 0xFF;\n            mdatbox[1] = bytes >>> 16 & 0xFF;\n            mdatbox[2] = bytes >>> 8 & 0xFF;\n            mdatbox[3] = bytes & 0xFF;\n            mdatbox.set(_mp4Generator2.default.types.mdat, 4);\n\n            var offset = 8;\n            var mp4Samples = [];\n            var info = new _mediaSegmentInfo.MediaSegmentInfo();\n\n            while (samples.length) {\n                var avcSample = samples.shift();\n                var keyframe = avcSample.isKeyframe;\n                var originalDts = avcSample.dts - this._dtsBase;\n\n                if (dtsCorrection == undefined) {\n                    if (this._videoNextDts == undefined) {\n                        if (this._videoSegmentInfoList.isEmpty()) {\n                            dtsCorrection = 0;\n                        } else {\n                            var lastSample = this._videoSegmentInfoList.getLastSampleBefore(originalDts);\n                            if (lastSample != null) {\n                                var distance = originalDts - (lastSample.originalDts + lastSample.duration);\n                                if (distance <= 3) {\n                                    distance = 0;\n                                }\n                                var expectedDts = lastSample.dts + lastSample.duration + distance;\n                                dtsCorrection = originalDts - expectedDts;\n                            } else {\n                                // lastSample == null\n                                dtsCorrection = 0;\n                            }\n                        }\n                    } else {\n                        dtsCorrection = originalDts - this._videoNextDts;\n                    }\n                }\n\n                var dts = originalDts - dtsCorrection;\n                var cts = avcSample.cts;\n                var pts = dts + cts;\n\n                if (firstDts === -1) {\n                    firstDts = dts;\n                    firstPts = pts;\n                }\n\n                // fill mdat box\n                var sampleSize = 0;\n                while (avcSample.units.length) {\n                    var unit = avcSample.units.shift();\n                    var data = unit.data;\n                    mdatbox.set(data, offset);\n                    offset += data.byteLength;\n                    sampleSize += data.byteLength;\n                }\n\n                var sampleDuration = 0;\n\n                if (samples.length >= 1) {\n                    var nextDts = samples[0].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else {\n                    if (mp4Samples.length >= 1) {\n                        // lastest sample, use second last duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else {\n                        // the only one sample, use reference duration\n                        sampleDuration = this._videoMeta.refSampleDuration;\n                    }\n                }\n\n                if (keyframe) {\n                    var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, avcSample.dts, true);\n                    syncPoint.fileposition = avcSample.fileposition;\n                    info.appendSyncPoint(syncPoint);\n                }\n\n                var mp4Sample = {\n                    dts: dts,\n                    pts: pts,\n                    cts: cts,\n                    size: sampleSize,\n                    isKeyframe: keyframe,\n                    duration: sampleDuration,\n                    originalDts: originalDts,\n                    flags: {\n                        isLeading: 0,\n                        dependsOn: keyframe ? 2 : 1,\n                        isDependedOn: keyframe ? 1 : 0,\n                        hasRedundancy: 0,\n                        isNonSync: keyframe ? 0 : 1\n                    }\n                };\n\n                mp4Samples.push(mp4Sample);\n            }\n            var latest = mp4Samples[mp4Samples.length - 1];\n            lastDts = latest.dts + latest.duration;\n            lastPts = latest.pts + latest.duration;\n            this._videoNextDts = lastDts;\n\n            // fill media segment info & add to info list\n            info.beginDts = firstDts;\n            info.endDts = lastDts;\n            info.beginPts = firstPts;\n            info.endPts = lastPts;\n            info.originalBeginDts = mp4Samples[0].originalDts;\n            info.originalEndDts = latest.originalDts + latest.duration;\n            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);\n            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);\n            if (!this._isLive) {\n                this._videoSegmentInfoList.append(info);\n            }\n\n            track.samples = mp4Samples;\n            track.sequenceNumber++;\n\n            // workaround for chrome < 50: force first sample as a random access point\n            // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n            if (this._forceFirstIDR) {\n                var flags = mp4Samples[0].flags;\n                flags.dependsOn = 2;\n                flags.isNonSync = 0;\n            }\n\n            var moofbox = _mp4Generator2.default.moof(track, firstDts);\n            track.samples = [];\n            track.length = 0;\n\n            this._onMediaSegment('video', {\n                type: 'video',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info: info\n            });\n        }\n    }, {\n        key: '_mergeBoxes',\n        value: function _mergeBoxes(moof, mdat) {\n            var result = new Uint8Array(moof.byteLength + mdat.byteLength);\n            result.set(moof, 0);\n            result.set(mdat, moof.byteLength);\n            return result;\n        }\n    }, {\n        key: 'onInitSegment',\n        get: function get() {\n            return this._onInitSegment;\n        },\n        set: function set(callback) {\n            this._onInitSegment = callback;\n        }\n\n        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\n           MediaSegment: {\n               type: string,\n               data: ArrayBuffer,\n               sampleCount: int32\n               info: MediaSegmentInfo\n           }\n        */\n\n    }, {\n        key: 'onMediaSegment',\n        get: function get() {\n            return this._onMediaSegment;\n        },\n        set: function set(callback) {\n            this._onMediaSegment = callback;\n        }\n    }]);\n\n    return MP4Remuxer;\n}();\n\nexports.default = MP4Remuxer;\n\n},{\"../core/media-segment-info.js\":8,\"../utils/browser.js\":39,\"../utils/exception.js\":40,\"../utils/logger.js\":41,\"./aac-silent.js\":36,\"./mp4-generator.js\":37}],39:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    var ua = self.navigator.userAgent.toLowerCase();\n\n    var match = /(edge)\\/([\\w.]+)/.exec(ua) || /(opr)[\\/]([\\w.]+)/.exec(ua) || /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(iemobile)[\\/]([\\w.]+)/.exec(ua) || /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) || [];\n\n    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];\n\n    var matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    var browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        var versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        var msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        var msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        var opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        var android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (var key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexports.default = Browser;\n\n},{}],40:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar RuntimeException = exports.RuntimeException = function () {\n    function RuntimeException(message) {\n        _classCallCheck(this, RuntimeException);\n\n        this._message = message;\n    }\n\n    _createClass(RuntimeException, [{\n        key: 'toString',\n        value: function toString() {\n            return this.name + ': ' + this.message;\n        }\n    }, {\n        key: 'name',\n        get: function get() {\n            return 'RuntimeException';\n        }\n    }, {\n        key: 'message',\n        get: function get() {\n            return this._message;\n        }\n    }]);\n\n    return RuntimeException;\n}();\n\nvar IllegalStateException = exports.IllegalStateException = function (_RuntimeException) {\n    _inherits(IllegalStateException, _RuntimeException);\n\n    function IllegalStateException(message) {\n        _classCallCheck(this, IllegalStateException);\n\n        return _possibleConstructorReturn(this, (IllegalStateException.__proto__ || Object.getPrototypeOf(IllegalStateException)).call(this, message));\n    }\n\n    _createClass(IllegalStateException, [{\n        key: 'name',\n        get: function get() {\n            return 'IllegalStateException';\n        }\n    }]);\n\n    return IllegalStateException;\n}(RuntimeException);\n\nvar InvalidArgumentException = exports.InvalidArgumentException = function (_RuntimeException2) {\n    _inherits(InvalidArgumentException, _RuntimeException2);\n\n    function InvalidArgumentException(message) {\n        _classCallCheck(this, InvalidArgumentException);\n\n        return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, message));\n    }\n\n    _createClass(InvalidArgumentException, [{\n        key: 'name',\n        get: function get() {\n            return 'InvalidArgumentException';\n        }\n    }]);\n\n    return InvalidArgumentException;\n}(RuntimeException);\n\nvar NotImplementedException = exports.NotImplementedException = function (_RuntimeException3) {\n    _inherits(NotImplementedException, _RuntimeException3);\n\n    function NotImplementedException(message) {\n        _classCallCheck(this, NotImplementedException);\n\n        return _possibleConstructorReturn(this, (NotImplementedException.__proto__ || Object.getPrototypeOf(NotImplementedException)).call(this, message));\n    }\n\n    _createClass(NotImplementedException, [{\n        key: 'name',\n        get: function get() {\n            return 'NotImplementedException';\n        }\n    }]);\n\n    return NotImplementedException;\n}(RuntimeException);\n\n},{}],41:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Log = function () {\n    function Log() {\n        _classCallCheck(this, Log);\n    }\n\n    _createClass(Log, null, [{\n        key: 'e',\n        value: function e(tag, msg) {\n            if (!Log.ENABLE_ERROR) {\n                return;\n            }\n\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (console.error) {\n                console.error(str);\n            } else if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'i',\n        value: function i(tag, msg) {\n            if (!Log.ENABLE_INFO) {\n                return;\n            }\n\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (console.info) {\n                console.info(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'w',\n        value: function w(tag, msg) {\n            if (!Log.ENABLE_WARN) {\n                return;\n            }\n\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (console.warn) {\n                console.warn(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'd',\n        value: function d(tag, msg) {\n            if (!Log.ENABLE_DEBUG) {\n                return;\n            }\n\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            var str = '[' + tag + '] > ' + msg;\n\n            if (console.debug) {\n                console.debug(str);\n            } else {\n                console.log(str);\n            }\n        }\n    }, {\n        key: 'v',\n        value: function v(tag, msg) {\n            if (!Log.ENABLE_VERBOSE) {\n                return;\n            }\n\n            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;\n\n            console.log('[' + tag + '] > ' + msg);\n        }\n    }]);\n\n    return Log;\n}();\n\nLog.GLOBAL_TAG = 'flv.js';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nexports.default = Log;\n\n},{}],42:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\nopyright (C) 2016 Bilibili. All Rights Reserved.\nnauthor zheng qian <xqq@xqq.im>\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\nvar _events = _dereq_('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _logger = _dereq_('./logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LoggingControl = function () {\n    function LoggingControl() {\n        _classCallCheck(this, LoggingControl);\n    }\n\n    _createClass(LoggingControl, null, [{\n        key: 'getConfig',\n        value: function getConfig() {\n            return {\n                globalTag: _logger2.default.GLOBAL_TAG,\n                forceGlobalTag: _logger2.default.FORCE_GLOBAL_TAG,\n                enableVerbose: _logger2.default.ENABLE_VERBOSE,\n                enableDebug: _logger2.default.ENABLE_DEBUG,\n                enableInfo: _logger2.default.ENABLE_INFO,\n                enableWarn: _logger2.default.ENABLE_WARN,\n                enableError: _logger2.default.ENABLE_ERROR\n            };\n        }\n    }, {\n        key: 'applyConfig',\n        value: function applyConfig(config) {\n            _logger2.default.GLOBAL_TAG = config.globalTag;\n            _logger2.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n            _logger2.default.ENABLE_VERBOSE = config.enableVerbose;\n            _logger2.default.ENABLE_DEBUG = config.enableDebug;\n            _logger2.default.ENABLE_INFO = config.enableInfo;\n            _logger2.default.ENABLE_WARN = config.enableWarn;\n            _logger2.default.ENABLE_ERROR = config.enableError;\n        }\n    }, {\n        key: '_notifyChange',\n        value: function _notifyChange() {\n            var emitter = LoggingControl.emitter;\n\n            if (emitter.listenerCount('change') > 0) {\n                var config = LoggingControl.getConfig();\n                emitter.emit('change', config);\n            }\n        }\n    }, {\n        key: 'registerListener',\n        value: function registerListener(listener) {\n            LoggingControl.emitter.addListener('change', listener);\n        }\n    }, {\n        key: 'removeListener',\n        value: function removeListener(listener) {\n            LoggingControl.emitter.removeListener('change', listener);\n        }\n    }, {\n        key: 'forceGlobalTag',\n        get: function get() {\n            return _logger2.default.FORCE_GLOBAL_TAG;\n        },\n        set: function set(enable) {\n            _logger2.default.FORCE_GLOBAL_TAG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'globalTag',\n        get: function get() {\n            return _logger2.default.GLOBAL_TAG;\n        },\n        set: function set(tag) {\n            _logger2.default.GLOBAL_TAG = tag;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableAll',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE && _logger2.default.ENABLE_DEBUG && _logger2.default.ENABLE_INFO && _logger2.default.ENABLE_WARN && _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            _logger2.default.ENABLE_DEBUG = enable;\n            _logger2.default.ENABLE_INFO = enable;\n            _logger2.default.ENABLE_WARN = enable;\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableDebug',\n        get: function get() {\n            return _logger2.default.ENABLE_DEBUG;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_DEBUG = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableVerbose',\n        get: function get() {\n            return _logger2.default.ENABLE_VERBOSE;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_VERBOSE = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableInfo',\n        get: function get() {\n            return _logger2.default.ENABLE_INFO;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_INFO = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableWarn',\n        get: function get() {\n            return _logger2.default.ENABLE_WARN;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_WARN = enable;\n            LoggingControl._notifyChange();\n        }\n    }, {\n        key: 'enableError',\n        get: function get() {\n            return _logger2.default.ENABLE_ERROR;\n        },\n        set: function set(enable) {\n            _logger2.default.ENABLE_ERROR = enable;\n            LoggingControl._notifyChange();\n        }\n    }]);\n\n    return LoggingControl;\n}();\n\nLoggingControl.emitter = new _events2.default();\n\nexports.default = LoggingControl;\n\n},{\"./logger.js\":41,\"events\":2}],43:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Polyfill = function () {\n    function Polyfill() {\n        _classCallCheck(this, Polyfill);\n    }\n\n    _createClass(Polyfill, null, [{\n        key: 'install',\n        value: function install() {\n            // ES6 Object.setPrototypeOf\n            Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {\n                obj.__proto__ = proto;\n                return obj;\n            };\n\n            // ES6 Object.assign\n            Object.assign = Object.assign || function (target) {\n                if (target === undefined || target === null) {\n                    throw new TypeError('Cannot convert undefined or null to object');\n                }\n\n                var output = Object(target);\n                for (var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n                    if (source !== undefined && source !== null) {\n                        for (var key in source) {\n                            if (source.hasOwnProperty(key)) {\n                                output[key] = source[key];\n                            }\n                        }\n                    }\n                }\n                return output;\n            };\n\n            // ES6 Promise (missing support in IE11)\n            if (typeof self.Promise !== 'function') {\n                _dereq_('es6-promise').polyfill();\n            }\n        }\n    }]);\n\n    return Polyfill;\n}();\n\nPolyfill.install();\n\nexports.default = Polyfill;\n\n},{\"es6-promise\":1}],44:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    var array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80) return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction decodeUTF8(uint8array) {\n    var out = [];\n    var input = uint8array;\n    var i = 0;\n    var length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(_ucs & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;\n                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {\n                    _ucs2 -= 0x10000;\n                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));\n                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexports.default = decodeUTF8;\n\n},{}]},{},[21])(21)\n});\n\n//# sourceMappingURL=flv.js.map\n","export const defaultConfig = {\n    clickToPlay: true,\n    enabled: true,\n    debug: true,\n    autoplay: false,\n    loop: false,\n    seekTime: 10,\n    volume: 10,\n    volumeMin: 0,\n    volumeMax: 10,\n    volumeStep: 1,\n    duration: null,\n    displayDuration: true,\n    loadSprite: true,\n    hideControls: true,\n    blankUrl: 'https://cdn.selz.com/plyr/blank.mp4',\n    controls: ['play-large', 'play', 'progress', 'time', 'mute', 'volume', 'captions', 'fullscreen'],\n    selectors: {\n        html5: 'video, audio',\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.vplyr',\n        controls: {\n            container: null,\n            wrapper: '.vplyr-controls'\n        },\n        buttons: {\n            seek: '[data-video=\"seek\"]',\n            play: '[data-video=\"play\"]',\n            pause: '[data-video=\"pause\"]',\n            mute: '[data-video=\"mute\"]',\n            fullscreen: '[data-video=\"fullscreen\"]'\n        },\n        volume: {\n            input: '[data-video=\"volume\"]',\n            display: '.vplyr-volume-display'\n        },\n        progress: {\n            container: '.vplyr-progress-bar-container',\n            buffer: '.vplyr-progress-buffer',\n            played: '.vplyr-progress-played'\n        },\n        volume: {\n            input: '[data-video=\"volume\"]',\n            display: '.vplyr-volume-display'\n        },\n        currentTime: '.control-currenttime',\n        duration: '.control-duration'\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null\n    },\n    storage: {\n        enabled: true,\n        key: 'vplyr'\n    },\n    types: {\n        html5: ['video']\n    },\n    classes: {\n        setup: 'vplyr-setup',\n        ready: 'vplyr-ready',\n        muted: 'vplyr-muted',\n        type: 'vplyr-{0}',\n        videoWrapper: 'vplyr-video-container',\n        playing: 'vplyr-plying',\n        loading: 'vplyr-loading',\n        hover: 'vplyr-hover',\n        stopped: 'vplyr-stopped',\n        inIos: 'vplyr--is-ios',\n        inTouch: 'vplyr--is-touch',\n        inWechat: 'vplyr--is-wechat',\n        inChrome: 'vplyr--is-chrome',\n        tabFocus: 'tab-focus',\n        hideControls: 'vplyr-hide-controls',\n        fullscreen: {\n            enabled: 'vplyr-fullscreen-enabled',\n            active: 'vplyr-fullscreen-active'\n        },\n    },\n    events: ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n    // Logging\n    logPrefix: '[VPlyr]'\n\n}\nexport function createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}","module.exports = require('./vPlayer.js').default;\n","import utils from '../utils/util';\n\nexport const buildControls = (config) => {\n  const { controls } = config;\n  const html = ['<div class=\"vplyr-video-loader-container\">',\n    '<div class=\"vplyr-video-loader\">',\n    '<div class=\"loader-inner one\"></div>',\n    '<div class=\"loader-inner two\"></div>',\n    '<div class=\"loader-inner three\"></div>',\n    '</div>',\n    '</div><div class=\"vplyr-gradient-bottom\"></div>'];\n  html.push('<svg style=\"position: absolute; width: 0; height: 0; overflow: hidden;\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">',\n    '<defs>',\n    '<symbol id=\"vplyr-muted\" viewBox=\"0 0 32 32\">',\n    '<title>volume-off</title>',\n    '<path d=\"M25.87 15.63l3.432 3.431c0.277 0.278 0.277 0.726 0 1.003s-0.726 0.277-1.003 0l-3.432-3.431-3.418 3.418c-0.278 0.278-0.728 0.278-1.006 0s-0.277-0.727 0-1.006l3.418-3.418-3.396-3.396c-0.277-0.277-0.277-0.726 0-1.003s0.726-0.277 1.003 0l3.396 3.396 3.431-3.431c0.278-0.278 0.727-0.278 1.006 0s0.278 0.727 0 1.005l-3.431 3.431zM14.161 27.297l-5.884-5.611h-3.653c-1.407 0-2.133-0.792-2.133-2.133v-7.111c0-1.363 0.703-2.133 2.133-2.133h3.653l5.884-5.611c1.546-1.449 3.263-0.853 3.263 1.629v19.341c0 2.458-1.686 3.109-3.263 1.63zM16.001 6.774c0-1.682-0.718-1.254-1.444-0.543-1.407 1.377-3.803 3.703-5.654 5.498h-3.568c-1.060 0-1.422 0.385-1.422 1.422v5.689c0 1.060 0.341 1.422 1.422 1.422h3.786c1.82 1.935 4.086 4.32 5.43 5.646 0.734 0.725 1.451 0.991 1.451-0.624 0-3.403 0-15.036 0-18.51z\"></path>',\n    '</symbol>',\n    '<symbol id=\"vplyr-volume\" viewBox=\"0 0 32 32\">',\n    '<title>volume-on</title>',\n    '<path d=\"M15.913 5.241l-6.951 5.761c-0.522 0.433-1.349 0.731-2.028 0.731h-1.599c-0.001 0-0.001 0-0.002 0-0.736 0-1.333 0.596-1.333 1.332v5.857c0 0.733 0.599 1.332 1.335 1.332h1.598c0.681 0 1.505 0.298 2.028 0.731l6.951 5.76v-21.504zM8.111 22.013c-0.283-0.235-0.805-0.425-1.177-0.425h-1.598c-1.473-0-2.667-1.193-2.669-2.666v-5.857c0.001-1.472 1.194-2.665 2.667-2.665 0.001 0 0.001 0 0.002 0h1.598c0.368 0 0.895-0.19 1.177-0.425l8.112-6.722c0.565-0.469 1.023-0.255 1.023 0.481v24.52c0 0.734-0.459 0.949-1.023 0.481l-8.111-6.723zM21.739 21.863c-0.111 0.086-0.253 0.138-0.407 0.138-0.368 0-0.667-0.299-0.667-0.667 0-0.215 0.101-0.406 0.259-0.528 1.471-1.135 2.409-2.897 2.409-4.878 0-0.002 0-0.004 0-0.007 0-1.794-0.915-3.51-2.421-4.738-0.15-0.123-0.245-0.309-0.245-0.517 0-0.368 0.298-0.667 0.667-0.667 0.16 0 0.308 0.057 0.422 0.151 1.8 1.468 2.911 3.552 2.911 5.771 0 2.355-1.095 4.531-2.927 5.94zM23.739 27.196c-0.111 0.086-0.253 0.138-0.407 0.138-0.368 0-0.667-0.299-0.667-0.667 0-0.215 0.101-0.406 0.259-0.528 3.1-2.392 5.076-6.107 5.076-10.282 0-0.004 0-0.009 0-0.013 0-3.801-1.928-7.417-5.088-9.994-0.15-0.123-0.245-0.309-0.245-0.517 0-0.368 0.298-0.667 0.667-0.667 0.16 0 0.308 0.057 0.422 0.151 3.453 2.817 5.578 6.8 5.578 11.027 0 0.004 0 0.009 0 0.013 0 4.604-2.178 8.7-5.56 11.313z\"></path>',\n    '</symbol > ',\n    '<symbol id=\"vplyr-exit-fullscreen\" viewBox=\"0 0 32 32\">',\n    '< title > fullscreen - off</title >',\n    '<path d=\"M31.23 0c-0.199 0-0.398 0-0.398 0.199l-11.13 11.13 0.596-5.963c0-0.397-0.199-0.596-0.596-0.795 0 0 0 0 0 0-0.398 0-0.596 0.199-0.596 0.596l-0.994 7.95c0 0.199 0 0.398 0.199 0.596s0.398 0.199 0.596 0.199l7.752-0.994c0.398 0 0.596-0.398 0.596-0.795s-0.398-0.596-0.795-0.596l-5.764 0.596 11.13-11.13c0.199-0.199 0.199-0.596 0-0.994-0.398 0.199-0.596 0-0.596 0v0zM0.621 0.199c0.199 0 0.398 0 0.398 0.199l11.13 11.13-0.795-5.963c0-0.397 0.199-0.596 0.596-0.795 0 0 0 0 0 0 0.398 0 0.596 0.199 0.596 0.596l1.391 7.752c0 0.199 0 0.398-0.199 0.596s-0.398 0.199-0.596 0.199l-7.752-0.994c-0.397 0-0.596-0.398-0.596-0.795s0.397-0.596 0.795-0.596l5.963 0.596-11.329-10.932c-0.199-0.199-0.199-0.596 0-0.994 0.199 0 0.199 0 0.397 0v0zM0.621 31.801c0.199 0 0.398 0 0.398-0.199l11.13-11.13-0.795 5.764c0 0.398 0.199 0.596 0.596 0.795 0 0 0 0 0 0 0.398 0 0.596-0.199 0.596-0.596l1.391-7.752c0-0.199 0-0.398-0.199-0.596-0.199 0-0.398-0.199-0.596 0l-7.752 0.795c-0.397 0-0.596 0.398-0.596 0.795s0.397 0.596 0.795 0.596l5.963-0.596-11.13 11.13c-0.199 0.199-0.199 0.596 0 0.994 0-0.199 0.199 0 0.199 0v0zM31.23 31.801c-0.199 0-0.398 0-0.398-0.199l-11.13-11.13 0.596 5.764c0 0.398-0.199 0.596-0.596 0.795 0 0 0 0 0 0-0.398 0-0.596-0.199-0.596-0.596l-0.994-7.752c0-0.199 0-0.398 0.199-0.596 0.199 0 0.398-0.199 0.596 0l7.752 0.994c0.398 0 0.596 0.398 0.596 0.795s-0.398 0.596-0.795 0.596l-5.764-0.596 11.13 11.13c0.199 0.199 0.199 0.596 0 0.994-0.398-0.398-0.398-0.199-0.596-0.199v0z\"></path>',\n    '</symbol >',\n    '<symbol id=\"vplyr-enter-fullscreen\" viewBox=\"0 0 32 32\">',\n    '<title>fullscreen-on</title>',\n    '<path d=\"M12.862 18.276l-10.024 10.024 0.625-5.298c0.039-0.33-0.197-0.627-0.526-0.666-0.328-0.042-0.627 0.197-0.666 0.526l-0.827 7.015c-0.022 0.182 0.042 0.365 0.171 0.494 0.114 0.114 0.266 0.176 0.424 0.176 0.023 0 0.047-0.001 0.070-0.004l7.015-0.827c0.329-0.038 0.565-0.337 0.526-0.666s-0.336-0.568-0.666-0.526l-5.298 0.625 10.024-10.024c0.234-0.234 0.234-0.614 0-0.849s-0.613-0.234-0.847 0.001z\"></path>',\n    '<path d=\"M3.686 3.146l5.298 0.625c0.331 0.044 0.627-0.197 0.666-0.526s-0.197-0.627-0.526-0.666l-7.016-0.827c-0.183-0.024-0.365 0.041-0.494 0.171s-0.194 0.312-0.171 0.494l0.827 7.015c0.036 0.305 0.295 0.53 0.595 0.53 0.023 0 0.047-0.001 0.071-0.004 0.329-0.038 0.565-0.337 0.526-0.666l-0.626-5.298 10.024 10.024c0.117 0.117 0.27 0.176 0.424 0.176s0.307-0.058 0.424-0.176c0.234-0.234 0.234-0.614 0-0.849l-10.023-10.023z\"></path>',\n    '<path d=\"M28.702 22.335c-0.329 0.038-0.565 0.337-0.526 0.666l0.625 5.298-10.024-10.024c-0.234-0.234-0.614-0.234-0.849 0s-0.234 0.614 0 0.849l10.024 10.024-5.298-0.625c-0.332-0.042-0.627 0.197-0.666 0.526s0.197 0.627 0.526 0.666l7.015 0.827c0.023 0.003 0.047 0.004 0.070 0.004 0.158 0 0.311-0.062 0.424-0.176 0.13-0.13 0.193-0.312 0.171-0.494l-0.827-7.015c-0.037-0.33-0.339-0.569-0.665-0.526z\"></path>',\n    '<path d=\"M18.353 14.194c0.154 0 0.307-0.058 0.424-0.176l10.024-10.024-0.625 5.298c-0.039 0.33 0.197 0.627 0.526 0.666 0.024 0.003 0.048 0.004 0.071 0.004 0.3 0 0.559-0.225 0.595-0.53l0.827-7.015c0.022-0.182-0.042-0.365-0.171-0.494s-0.314-0.195-0.494-0.171l-7.015 0.827c-0.329 0.038-0.565 0.337-0.526 0.666s0.334 0.568 0.666 0.526l5.298-0.625-10.024 10.024c-0.234 0.234-0.234 0.614 0 0.849 0.116 0.116 0.27 0.174 0.423 0.174z\"></path>',\n    '</symbol>',\n    '</defs >',\n    '</svg > ')\n  if (utils.inArray(controls, 'play-large')) {\n    html.push('<div class=\"vplyr-large-button\" data-video=\"play\">',\n      '<div class=\"btn-controls\">',\n      '<div class=\"btn-wrap\">',\n      '<div class=\"play\"></div>',\n      '<div class=\"pause\"></div>',\n      '</div>',\n      '</div>',\n      '</div>')\n  }\n\n\n  html.push('<div class=\"vplyr-bottom-container\">')\n  if (utils.inArray(controls, 'progress')) {\n    html.push(\n      '<div class=\"vplyr-progress-bar-container\">',\n      '<input id=\"seek{id}\" type=\"range\" min=\"0\" max=\"100\" value=\"0\" step=\"0.1\" class=\"vplyr-progress-bar\" data-video=\"seek\"/>',\n      '<progress class=\"vplyr-progress-played\" max=\"100\" role=\"presentation\"></progress>',\n      '<progress class=\"vplyr-progress-buffer\" max=\"100\" value=\"100\">',\n      '<span>100.00</span>% buffered',\n      '</progress>',\n      '</div>'\n    );\n  }\n  html.push('<div class=\"vplyr-controls\">')\n  html.push('<div class=\"left-controls\">')\n  if (utils.inArray(controls, 'play')) {\n    html.push(\n      '<div class=\"btn-controls\">',\n      '<div class=\"btn-wrap\">',\n      '<div class=\"play\" data-video=\"play\"></div>',\n      '<div class=\"pause\" data-video=\"pause\"></div>',\n      '</div>',\n      '</div>'\n    );\n  }\n  if (utils.inArray(controls, 'time')) {\n    html.push(\n      '<div class=\"time-mod-controls\">',\n      '<div class=\"control-currenttime\">00:00</div>',\n      '<div class=\"control-separator\">/</div>',\n      '<div class=\"control-duration\">00:00</div>',\n      '</div>'\n    );\n  }\n  html.push('</div>')//close vplyr left controls\n  html.push('<div class=\"right-controls\">')\n  if (utils.inArray(controls, 'fullscreen')) {\n    html.push(\n      '<div class=\"fullscreen-controls\" data-video=\"fullscreen\">',\n      '<svg class=\"icon-exit-fullscreen\">',\n      '<use xlink:href=\"#vplyr-exit-fullscreen\"></use>',\n      '</svg>',\n      '<svg class=\"icon-enter-fullscreen\">',\n      ' <use xlink:href=\"#vplyr-enter-fullscreen\"></use>',\n      '</svg>',\n      '</div>'\n    );\n  }\n  html.push('<div class=\"volume-controls\">')\n  if (utils.inArray(controls, 'mute')) {\n    html.push(\n      '<div class=\"vplyr-volume\" data-video=\"mute\">',\n      '<svg class=\"icon-muted\">',\n      '<use xlink:href=\"#vplyr-muted\"></use>',\n      '</svg>',\n      '<svg class=\"icon-volume\">',\n      '<use xlink:href=\"#vplyr-volume\"></use>',\n      '</svg>',\n      '</div>'\n    );\n  }\n  if (utils.inArray(controls, 'volume')) {\n    html.push(\n      '<div class=\"vplyr-volume-progress\">',\n      '<input type=\"range\" id=\"volume{id}\"  class=\"vplyr-volume-input\"  min=\"0\"  max=\"10\" data-video=\"volume\" value=\"8\">',\n      '<progress class=\"vplyr-volume-display\" max=\"10\" role=\"presentation\"></progress>',\n      '</div>'\n    );\n  }\n  html.push('</div>')//close vplyr volume controls\n\n  html.push('</div>')//close vplyr right controls\n\n  html.push('</div>')//close vplyr controls\n  html.push('</div>')//close\n  return html.join('');\n}","import utils, { is } from '../utils/util';\nimport Player from './player';\nimport Event from '../utils/events';\nimport { defaultConfig as defaults } from '../config';\nimport Log from '../utils/logger';;\nimport flvjs from 'flv.js';\n\nconst pattern = /\\.flv\\b/;\nclass VPlayer {\n  constructor(target, options) {\n    this.TAG = 'VideoPlayer';\n    this._intaface = null;\n    this.media = target;\n    if (pattern.test(target.src)) {\n      this.__player = this.__createFlvjs(target);\n    }\n    this.options = options;\n    this.__setup();\n  }\n  pause() {\n    const intaface = this._intaface;\n    intaface.pause();\n  }\n  play() {\n    const intaface = this._intaface;\n    intaface.play();\n  }\n  stop() {\n    const intaface = this._intaface;\n    if (this.__player) {\n      this.__player.unload()\n      this.__player.detachMediaElement()\n      this.__player = null\n    }\n    intaface.stop();\n  }\n  togglePlay() {\n    const intaface = this._intaface;\n    intaface.togglePlay();\n  }\n  toggleControls() {\n    const intaface = this._intaface;\n    intaface.toggleControls();\n  }\n  get loadingState() {\n    const intaface = this._intaface;\n    return intaface.isLoading();\n  }\n  get readyState() {\n    const intaface = this._intaface;\n    return intaface.isReady();\n  }\n  get container() {\n    const intaface = this._intaface;\n    return intaface.getContainer();\n  }\n  get type() {\n    const intaface = this._intaface;\n    return intaface.getType;\n  }\n  get poster() {\n    const intaface = this._intaface;\n    return intaface.getPoster();\n  }\n  get volume() {\n    const intaface = this._intaface;\n    return intaface.getVolume();\n  }\n  get duration() {\n    const intaface = this._intaface;\n    return intaface.getDuration();\n  }\n  get currentTime() {\n    const intaface = this._intaface;\n    return intaface.getCurrentTime();\n  }\n  get fullscreen() {\n    const intaface = this._intaface;\n    return intaface.isFullscreen() || false;\n  }\n  get muted() {\n    const intaface = this._intaface;\n    return intaface.isMuted();\n  }\n  get src() {\n    const intaface = this._intaface;\n    return intaface.getSource();\n  }\n  get paused() {\n    const intaface = this._intaface;\n    return intaface.isPaused;\n  }\n  set src(source) {\n    if (this.__player) {\n      this.__player.unload()\n      this.__player.detachMediaElement()\n      this.__player = null\n    }\n    const intaface = this._intaface;\n    intaface.updateSource(source);\n    if (pattern.test(source)) {\n      this.__player = this.__createFlvjs(source);\n    }\n  }\n  set fullscreen(fullscreen) {\n    if (!is.boolean(fullscreen)) {\n      return;\n    }\n\n    const intaface = this._intaface;\n    if ((!intaface.isFullscreen() && fullscreen) || (intaface.isFullscreen() && !fullscreen)) {\n      intaface.toggleFullscreen();\n    }\n  }\n  set volume(value) {\n    const intaface = this._intaface;\n    return intaface.setVolume(value);\n  }\n  set currentTime(value) {\n    const intaface = this._intaface;\n    intaface.seek(value);\n  }\n  set poster(source) {\n    if (!is.string(source)) {\n      return;\n    }\n    const intaface = this._intaface;\n    intaface.updatePoster(source);\n  }\n  set muted(muted) {\n    if (!is.boolean(muted)) {\n      return;\n    }\n    const intaface = this._intaface;\n    if ((!intaface.isMuted() && muted) || (intaface.isMuted() && !muted)) {\n      intaface.toggleMute(muted);\n    }\n\n  }\n  __setup() {\n    if (this._intaface) {\n      return;\n    }\n    const element = this.media;\n    const options = this.options;\n    let data = {};\n\n    try { data = JSON.parse(element.getAttribute('data-vplyr')); }\n    catch (e) { }\n    const config = utils.extend({}, defaults, options, data);\n    if (!config.enabled) {\n      return null;\n    }\n    const player = new Player(element, config);\n    const instance = player.setup();\n    if (config.debug) {\n      const events = config.events.concat(['input','setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);\n      Event.onEvent(instance.getContainer(), events.join(' '), function (event) {\n        Log.i(this.TAG,[config.logPrefix, 'event:', event.type].join(' '));\n      });\n    }\n    this._intaface = instance;\n  }\n  __createFlvjs(src) {\n    const sourceConfig = {\n      isLive: false,\n      type: 'flv',\n      url: src\n    }\n    const playerConfig = {\n      enableWorker: false,\n      deferLoadAfterSourceOpen: true,\n      stashInitialSize: 512 * 1024,\n      enableStashBuffer: true\n    }\n    const player = flvjs.createPlayer(sourceConfig, playerConfig)\n    player.on(flvjs.Events.ERROR, function (e, t) {\n      Log.e(this.TAG, '播放器发生错误：' + e + ' - ' + t)\n      player.unload()\n    })\n    player.on(flvjs.Events.STATISTICS_INFO, e => Log.i(this.TAG, parseInt(e.speed * 10) / 10 + 'KB/s'))\n\n    player.attachMediaElement(this.media)\n    player.load()\n    return player\n  }\n}\nexport default VPlayer;","import $ from '../utils/dom';\nimport utils, { is } from '../utils/util';\nimport Event from '../utils/events';\nimport Log from '../utils/logger';;\nimport { setupStorage, updateStorage } from './storage';\nimport { buildControls } from './controls';\nimport { defaultConfig as defaults } from '../config';\n\nclass Player {\n  constructor(media, config) {\n    const browser = utils.browerSniff();\n    this.TAG = 'Player';\n    this._player = {\n      media, browser\n    };\n    this._config = config;\n    this._timers = {};\n    this._storage = {};\n    this._media = media;\n    this._fullscreen = $.fullscreen();\n    this.__init__ = false;\n    this.__original = media.cloneNode(true);\n  }\n  setup() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    let api = {};\n    if (this.__init__) {\n      return null;\n    }\n    if (!is.htmlElement(media)) {\n      Log.w(this.TAG, 'media must be a video');\n      return;\n    }\n    setupStorage(config, storage);\n    const tagName = media.tagName.toLowerCase();\n    player.type = tagName;\n    config.crossorigin = (media.getAttribute('crossorigin') !== null);\n    config.autoplay = (config.autoplay || (media.getAttribute('autoplay') !== null));\n    config.loop = (config.loop || (media.getAttribute('loop') !== null));\n    player.supported = utils.supported(player.type);\n    if (!player.supported.basic) {\n      return;\n    }\n    player.container = $.wrap(media, document.createElement('div'));\n    player.container.setAttribute('tabindex', 0);\n    this._toggleStyleHook();\n\n    Log.i(this.TAG, '' + player.browser.name + ' ' + player.browser.version);\n    this._setupMedia();\n    if (utils.inArray(config.types.html5, player.type)) {\n      this._setupInterface();\n\n      this._ready();\n    }\n    this.__init__ = true;\n    api = {\n      __init__: this.__init__,\n      getType: player.type,\n      getDuration: this._getDuration.bind(this),\n      play: this._play.bind(this),\n      pause: this._pause.bind(this),\n      stop: this._stop.bind(this),\n      seek: this._seek.bind(this),\n      setVolume: this._setVolume.bind(this),\n      togglePlay: this._togglePlay.bind(this),\n      toggleMute: this._toggleMute.bind(this),\n      toggleFullscreen: this._toggleFullscreen.bind(this),\n      toggleControls: this._toggleControls.bind(this),\n      updatePoster: this._updatePoster.bind(this),\n      updateSource: this._updateSource.bind(this),\n      getSource: function () { return player.media.src },\n      getPoster: function () { return player.media.getAttribute('poster') },\n      isFullscreen: function () { return player.isFullscreen || false; },\n      getContainer: function () { return player.container },\n      getMedia: function () { return player.media; },\n      getCurrentTime: function () { return player.media.currentTime; },\n      getVolume: function () { return player.media.volume; },\n      isMuted: function () { return player.media.muted; },\n      isReady: function () { return $.hasClass(player.container, config.classes.ready); },\n      isLoading: function () { return $.hasClass(player.container, config.classes.loading); },\n      isPaused: function () { return player.media.paused; },\n      on: function (event, callback) { Event.onEvent(player.container, event, callback); return this; },\n      destroy: this._destroy.bind(this)\n    }\n    return api;\n  }\n  _stop() {\n    this._pause();\n    this._seek();\n  }\n  _ready() {\n    const config = this._config;\n    const player = this._player;\n    const { media, container } = player;\n\n    // Ready event at end of execution stack\n    window.setTimeout(() => {\n      this._triggerEvent(media, 'ready');\n    }, 0);\n\n    // Set class hook on media element\n    $.toggleClass(media, defaults.classes.setup, true);\n\n    // Set container class for ready\n    $.toggleClass(container, config.classes.ready, true);\n\n    // Autoplay\n    if (config.autoplay) {\n      this._play();\n    }\n  }\n  _setupMedia() {\n    const config = this._config;\n    const player = this._player;\n    const original = this._original;\n    const { media } = player;\n\n    if (!media) {\n      Log.w(this.TAG, 'No media element found!');\n      return;\n    }\n    const { autoplay, classes } = config;\n    const { container, type, browser, supported } = player;\n    const { stopped, inIos, inChrome, inTouch, inWechat, videoWrapper } = classes;\n    const { isIos, isChrome, isTouch, isWechat } = browser;\n    if (supported.full) {\n      $.toggleClass(container, classes.type.replace('{0}', type), true);\n      $.toggleClass(container, stopped, autoplay);\n      // Add iOS class\n      $.toggleClass(container, inIos, isIos);\n      // Add chrome class\n      $.toggleClass(container, inChrome, isChrome);\n      // Add touch class\n      $.toggleClass(container, inTouch, isTouch);\n\n      // Add wechat class\n      $.toggleClass(container, inWechat, isWechat);\n      if (player.type === 'video') {\n        const wrapper = document.createElement('div');\n        wrapper.setAttribute('class', videoWrapper);\n        $.wrap(player.media, wrapper);\n        // Cache the container\n        player.videoContainer = wrapper;\n      }\n    }\n  }\n  _setupInterface() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n    const { media } = player;\n    const _getElements = (selector) => {\n      return player.container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    if (!player.supported.full) {\n      Log.w(this.TAG, 'Basic support only', player.type);\n\n      // Remove controls\n      $.removeElement(_getElement(config.selectors.controls.wrapper));\n      // reset native controls\n      this._toggleNativeControls(true);\n      // Bail\n      return;\n    }\n    const controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n    if (controlsMissing) {\n      // Inject custom controls\n      this._injectControls();\n    }\n    if (!this._findElements()) {\n      return;\n    }\n    if (controlsMissing) {\n      this._controlListeners();\n    }\n    this._mediaListeners();\n    this._toggleNativeControls(false);\n    this._timeUpdate();\n    // Set volume\n    this._setVolume();\n\n    this._updateVolume();\n\n    this._checkPlaying();\n  }\n  _mediaListeners() {\n    const player = this._player;\n    const config = this._config;\n\n    const { media, browser, container } = player;\n    const _getElements = (selector) => {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    // Time change on media\n    Event.onEvent(media, 'timeupdate seeking', this._timeUpdate.bind(this));\n\n    Event.onEvent(media, 'durationchange loadedmetadata', this._displayDuration.bind(this));\n\n    Event.onEvent(media, 'play pause ended', this._checkPlaying.bind(this));\n\n    Event.onEvent(media, 'progress playing', this._updateProgress.bind(this));\n\n    Event.onEvent(media, 'waiting canplay seeked', this._checkLoading.bind(this));\n\n    Event.onEvent(media, 'volumechange', this._updateVolume.bind(this));\n    if (config.clickToPlay) {\n      const videoWrapper = _getElement('.' + config.classes.videoWrapper);\n      if (!videoWrapper) {\n        return;\n      }\n      videoWrapper.style.cursor = \"pointer\";\n      Event.onEvent(videoWrapper, 'click', () => {\n        // Touch devices will just show controls (if we're hiding controls)\n        if (config.hideControls && browser.isTouch && !media.paused) {\n          return;\n        }\n\n        if (media.paused) {\n          this._play();\n        } else if (media.ended) {\n          this._seek();\n          this._play();\n        } else {\n          this._pause();\n        }\n      });\n    }\n    if (config.disableContextMenu) {\n      Event.onEvent(media, 'contextmenu', function (event) { event.preventDefault(); });\n    }\n    Event.onEvent(media, config.events.concat(['keyup', 'keydown','input']).join(' '),  (event)=> {\n      this._triggerEvent(container, event.type, true);\n    });\n\n  }\n  _destroy(callback, restore) {\n    const player = this._player;\n    const original = this._original;\n\n    if (!this.__init__) {\n      return null;\n    }\n    this._toggleNativeControls(true);\n    clearTimeout(this._timers.cleanUp);\n\n    if (!is.boolean(restore)) {\n      restore = true;\n    }\n\n    // Callback\n    if (is.function(callback)) {\n      callback.call(original);\n    }\n\n    // Bail if we don't need to restore the original element\n    if (!restore) {\n      return;\n    }\n\n    // Remove init flag\n    this.__init__ = false;\n    player.container.parentNode.replaceChild(original, player.container);\n    document.body.style.overflow = '';\n\n    this._triggerEvent(original, 'destroyed', true);\n\n  }\n  _updateSource(source) {\n    const player = this._player;\n    const config = this._config;\n    const { media } = player;\n    if (!source || !is.string(source)) {\n      return;\n    }\n    this._stop();\n    this._updateSeekDisplay();\n    // Reset buffer progress\n    this._setProgress();\n    media.src = source;\n  }\n  _updatePoster(source) {\n    const player = this._player;\n    const { media, type } = player;\n    if (type === 'video') {\n      media.setAttribute('poster', source);\n    }\n  }\n  _updateVolume() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n    const { media, container, buttons, supported, volume } = player;\n    const { muted } = media;\n    const { classes } = config;\n    // Get the current volume\n    var __volume = muted ? 0 : (media.volume * config.volumeMax);\n\n    // Update the <input type=\"range\"> if present\n    if (supported.full) {\n      if (volume.input) {\n        volume.input.value = __volume;\n      }\n      if (volume.display) {\n        volume.display.value = __volume;\n      }\n    }\n\n    // Update the volume in storage\n    updateStorage({ volume: __volume }, config, storage);\n\n    // Toggle class if muted\n    $.toggleClass(container, classes.muted, (__volume === 0));\n\n    // Update checkbox for mute state\n    if (supported.full && buttons.mute) {\n      this._toggleState(buttons.mute, (volume === 0));\n    }\n  }\n  _checkLoading(event) {\n    const config = this._config;\n    const player = this._player;\n    const timers = this._timers;\n\n    const loading = (event.type === 'waiting');\n    const { container } = player;\n    const { classes } = config;\n    // Clear timer\n    clearTimeout(timers.loading);\n\n    // Timer to prevent flicker when seeking\n    timers.loading = setTimeout(() => {\n      // Toggle container class hook\n      $.toggleClass(container, classes.loading, loading);\n\n      // Show controls if loading, hide if done\n      this._toggleControls(loading);\n    }, (loading ? 250 : 0));\n  }\n  _checkPlaying() {\n    const config = this._config;\n    const player = this._player;\n\n    const { media, container } = player;\n    const { classes } = config;\n    const { paused } = media;\n    $.toggleClass(container, classes.playing, !paused);\n\n    $.toggleClass(container, classes.stopped, paused);\n\n    this._toggleControls(paused);\n  }\n  _play() {\n    const player = this._player;\n    const { media } = player;\n    if ('play' in media) {\n      media.play();\n    }\n  }\n  _pause() {\n    const player = this._player;\n    const { media } = player;\n    if ('pause' in media) {\n      media.pause();\n    }\n  }\n  _togglePlay(toggle) {\n    const player = this._player;\n    const { media } = player;\n    // True toggle\n    if (!is.boolean(toggle)) {\n      toggle = media.paused;\n    }\n\n    if (toggle) {\n      this._play();\n    } else {\n      this._pause();\n    }\n    return toggle;\n  }\n  _getDuration() {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n\n    // It should be a number, but parse it just incase\n    var duration = parseInt(config.duration),\n\n      // True duration\n      mediaDuration = 0;\n\n    // Only if duration available\n    if (media.duration !== null && !isNaN(media.duration)) {\n      mediaDuration = media.duration;\n    }\n\n    // If custom duration is funky, use regular duration\n    return (isNaN(duration) ? mediaDuration : duration);\n  }\n  _seek(input) {\n    const player = this._player;\n    const { media } = player;\n    let targetTime = 0,\n      paused = media.paused,\n      duration = this._getDuration();\n\n    if (is.number(input)) {\n      targetTime = input;\n    } else if (is.object(input) && utils.inArray(['input', 'change'], input.type)) {\n      // It's the seek slider\n      // Seek to the selected time\n      targetTime = ((input.target.value / input.target.max) * duration);\n    }\n    if (targetTime < 0) {\n      targetTime = 0;\n    } else if (targetTime > duration) {\n      targetTime = duration;\n    }\n    this._updateSeekDisplay(targetTime);\n    try {\n      media.currentTime = targetTime.toFixed(4);\n    }\n    catch (e) { }\n  }\n  _setVolume(volume) {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    const max = config.volumeMax,\n      min = config.volumeMin;\n\n    // Load volume from storage if no value specified\n    if (is.undefined(volume)) {\n      volume = storage.volume;\n    }\n\n    // Use config if all else fails\n    if (volume === null || isNaN(volume)) {\n      volume = config.volume;\n    }\n\n    // Maximum is volumeMax\n    if (volume > max) {\n      volume = max;\n    }\n    // Minimum is volumeMin\n    if (volume < min) {\n      volume = min;\n    }\n    // Set the player volume\n    media.volume = parseFloat(volume / max);\n\n    // Set the display\n    if (player.volume.display) {\n      player.volume.display.value = volume;\n    }\n    // Toggle muted state\n    if (volume === 0) {\n      media.muted = true;\n    } else if (media.muted && volume > 0) {\n      this._toggleMute();\n    }\n  }\n  _toggleMute(muted) {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media } = player;\n    if (!is.boolean(muted)) {\n      muted = !media.muted;\n    }\n\n    // Set button state\n    this._toggleState(player.buttons.mute, muted);\n\n    // Set mute on the player\n    media.muted = muted;\n\n    // If volume is 0 after unmuting, set to default\n    if (media.volume === 0) {\n      this._setVolume(config.volume);\n    }\n\n  }\n  _toggleState(target, state) {\n    // Bail if no target\n    if (!target) {\n      return;\n    }\n    // Get state\n    state = (is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\n    // Set the attribute on target\n    target.setAttribute('aria-pressed', state);\n    return state;\n  }\n  _timeUpdate(event) {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n    // Duration\n    this._updateTimeDisplay(media.currentTime, player.currentTime);\n\n    // Ignore updates while seeking\n    if (event && event.type === 'timeupdate' && media.seeking) {\n      return;\n    }\n    // Playing progress\n    this._updateProgress(event);\n  }\n  _updateProgress(event) {\n    const player = this._player;\n    const { media, controls, progress, buttons, supported } = player;\n    if (!supported.full) {\n      return;\n    }\n\n    var __progress = progress.played,\n      __value = 0,\n      duration = this._getDuration();\n    if (event) {\n      switch (event.type) {\n        case 'timeupdate':\n        case 'seeking':\n          if (controls.pressed) {\n            return;\n          }\n\n          __value = this._getPercentage(media.currentTime, duration);\n\n          // Set seek range value only if it's a 'natural' time event\n          if (event.type === 'timeupdate' && buttons.seek) {\n            buttons.seek.value = __value;\n          }\n\n          break;\n        // Check buffer status\n        case 'playing':\n        case 'progress':\n          __progress = progress.buffer;\n          __value = (() => {\n            var buffered = media.buffered;\n\n            if (buffered && buffered.length) {\n              // HTML5\n              return this._getPercentage(buffered.end(0), duration);\n            }\n            return 0;\n          })();\n          break;\n      }\n    }\n    this._setProgress(__progress, __value);\n  }\n  _setProgress(progress, value) {\n    const player = this._player;\n    const { supported } = player;\n    if (!supported.full) {\n      return;\n    }\n\n    // Default to 0\n    if (is.undefined(value)) {\n      value = 0;\n    }\n    // Default to buffer or bail\n    if (is.undefined(progress)) {\n      if (player.progress && player.progress.buffer) {\n        progress = player.progress.buffer;\n      } else {\n        return;\n      }\n    }\n\n    // One progress element passed\n    if (is.htmlElement(progress)) {\n      progress.value = value;\n    } else if (progress) {\n      // Object of progress + text element\n      if (progress.bar) {\n        progress.bar.value = value;\n      }\n      if (progress.text) {\n        progress.text.innerHTML = value;\n      }\n    }\n  }\n  _updateTimeDisplay(time, element) {\n    const player = this._player;\n\n    // Bail if there's no duration display\n    if (!element) {\n      return;\n    }\n\n    // Fallback to 0\n    if (isNaN(time)) {\n      time = 0;\n    }\n\n    player.secs = parseInt(time % 60);\n    player.mins = parseInt((time / 60) % 60);\n    player.hours = parseInt(((time / 60) / 60) % 60);\n\n    // Do we need to display hours?\n    var displayHours = (parseInt(((this._getDuration() / 60) / 60) % 60) > 0);\n\n    // Ensure it's two digits. For example, 03 rather than 3.\n    player.secs = ('0' + player.secs).slice(-2);\n    player.mins = ('0' + player.mins).slice(-2);\n\n    // Render\n    element.innerHTML = (displayHours ? player.hours + ':' : '') + player.mins + ':' + player.secs;\n  }\n  _updateSeekDisplay(time) {\n    // Default to 0\n    if (!is.number(time)) {\n      time = 0;\n    }\n    const player = this._player;\n\n    const { progress, buttons } = player;\n    var duration = this._getDuration(),\n      value = this._getPercentage(time, duration);\n\n    // Update progress\n    if (progress && progress.played) {\n      progress.played.value = value;\n    }\n\n    // Update seek range input\n    if (buttons && buttons.seek) {\n      buttons.seek.value = value;\n    }\n  }\n  _displayDuration() {\n    const config = this._config;\n    const player = this._player;\n    const storage = this._storage;\n\n    const { media, supported, duration, currentTime } = player;\n    const { displayDuration } = config;\n    if (!supported.full) {\n      return;\n    }\n\n    // Determine duration\n    var __duration = this._getDuration() || 0;\n\n    // If there's only one time display, display duration there\n    if (!duration && displayDuration && media.paused) {\n      this._updateTimeDisplay(__duration, currentTime);\n    }\n\n    // If there's a duration element, update content\n    if (duration) {\n      this._updateTimeDisplay(__duration, duration);\n    }\n\n  }\n  _controlListeners() {\n    const config = this._config;\n    const player = this._player;\n    const fullscreen = this._fullscreen;\n\n    const { browser, buttons, volume, container, controls } = player;\n    const { classes, listeners, hideControls } = config;\n    const inputEvent = (browser.isIE ? 'change' : 'input');\n    const togglePlay = () => {\n      const play = this._togglePlay();\n      let trigger = buttons[play ? 'play' : 'pause'],\n        target = buttons[play ? 'pause' : 'play'];\n\n      // Get the last play button to account for the large play button\n      if (target && target.length > 1) {\n        target = target[target.length - 1];\n      } else {\n        target = target[0];\n      }\n      if (target) {\n        const hadTabFocus = $.hasClass(trigger, classes.tabFocus);\n\n        setTimeout(function () {\n          target.focus();\n          if (hadTabFocus) {\n            $.toggleClass(trigger, classes.tabFocus, false);\n            $.toggleClass(target, classes.tabFocus, true);\n          }\n        }, 100);\n      }\n    }\n    Event.proxyListener(buttons.play, 'click', listeners.play, togglePlay);\n    // Pause\n    Event.proxyListener(buttons.pause, 'click', listeners.pause, togglePlay);\n    // Seek\n    Event.proxyListener(buttons.seek, inputEvent, listeners.seek, this._seek.bind(this));\n\n    Event.proxyListener(volume.input, inputEvent, listeners.volume, () => {\n      this._setVolume(volume.input.value);\n    });\n    Event.proxyListener(buttons.mute, 'click', listeners.mute, this._toggleMute.bind(this));\n\n    Event.proxyListener(buttons.fullscreen, 'click', listeners.fullscreen, this._toggleFullscreen.bind(this));\n\n    // Handle user exiting fullscreen by escaping etc\n    if (fullscreen.supportsFullScreen) {\n      Event.onEvent(document, fullscreen.fullScreenEventName, this._toggleFullscreen.bind(this));\n    }\n    if (hideControls) {\n      // Toggle controls on mouse events and entering fullscreen\n      Event.onEvent(container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', this._toggleControls.bind(this));\n\n      // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mouseenter mouseleave', (event) => {\n        player.controls.hover = event.type === 'mouseenter';\n      });\n\n      // Watch for cursor over controls so they don't hide when trying to interact\n      Event.onEvent(controls, 'mousedown mouseup touchstart touchend touchcancel', (event) => {\n        player.controls.pressed = utils.inArray(['mousedown', 'touchstart'], event.type);\n      });\n      // Focus in/out on controls\n      Event.onEvent(controls, 'focus blur', this._toggleControls.bind(this), true);\n    }\n  }\n  _injectControls() {\n    const config = this._config;\n    const player = this._player;\n\n    let { html, selectors } = config;\n\n    const { container } = player;\n    if (!html) {\n      html = buildControls(config);\n    }\n    const random = Math.floor(Math.random() * (1000000));\n    container.setAttribute('id', `vplyr${random}`);\n    html = utils.replaceAll(html, '{id}', random);\n    let target;\n    if (is.string(selectors.controls.container)) {\n      target = document.querySelector(selectors.controls.container);\n    }\n    // Inject into the container by default\n    if (!is.htmlElement(target)) {\n      target = container\n    }\n    target.insertAdjacentHTML('beforeend', html);\n  }\n  _findElements() {\n    const config = this._config;\n    const player = this._player;\n\n    const { container } = player;\n    const { selectors } = config;\n    const { controls, buttons, progress, volume, duration, currentTime, seekTime } = selectors;\n    const _getElements = (selector) => {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    try {\n      player.controls = _getElement(controls.wrapper);\n\n      // Buttons\n      player.buttons = {};\n      player.buttons.seek = _getElement(buttons.seek);\n      player.buttons.play = _getElements(buttons.play);\n      player.buttons.pause = _getElement(buttons.pause);\n      player.buttons.fullscreen = _getElement(buttons.fullscreen);\n\n      // Inputs\n      player.buttons.mute = _getElement(buttons.mute);\n\n      // Progress\n      player.progress = {};\n      player.progress.container = _getElement(progress.container);\n\n      // Progress - Buffering\n      player.progress.buffer = {};\n      player.progress.buffer.bar = _getElement(progress.buffer);\n      player.progress.buffer.text = player.progress.buffer.bar && player.progress.buffer.bar.getElementsByTagName('span')[0];\n\n      // Progress - Played\n      player.progress.played = _getElement(progress.played);\n\n      // Volume\n      player.volume = {};\n      player.volume.input = _getElement(volume.input);\n      player.volume.display = _getElement(volume.display);\n\n      // Timing\n      player.duration = _getElement(duration);\n      player.currentTime = _getElement(currentTime);\n      player.seekTime = _getElements(seekTime);\n\n      return true;\n    }\n    catch (e) {\n      this._warn('It looks like there is a problem with your controls HTML');\n      // Restore native video controls\n      this._toggleNativeControls(true);\n\n      return false;\n    }\n  }\n  _toggleNativeControls(toggle) {\n    const config = this._config;\n    const player = this._player;\n    const { media } = player;\n    if (toggle && utils.inArray(config.types.html5, player.type)) {\n      media.setAttribute('controls', '');\n    } else {\n      media.removeAttribute('controls');\n    }\n  }\n  _toggleFullscreen(event) {\n    // Check for native support\n    const config = this._config;\n    const player = this._player;\n    const fullscreen = this._fullscreen;\n\n    const { container, buttons } = player;\n    var nativeSupport = fullscreen.supportsFullScreen;\n\n    if (nativeSupport) {\n      // If it's a fullscreen change event, update the UI\n      if (event && event.type === fullscreen.fullScreenEventName) {\n        player.isFullscreen = fullscreen.isFullScreen(container);\n      } else {\n        // Else it's a user request to enter or exit\n        if (!fullscreen.isFullScreen(container)) {\n          // Save scroll position\n          this._saveScrollPosition();\n\n          // Request full screen\n          fullscreen.requestFullScreen(container);\n        } else {\n          // Bail from fullscreen\n          fullscreen.cancelFullScreen();\n        }\n\n        // Check if we're actually full screen (it could fail)\n        player.isFullscreen = fullscreen.isFullScreen(container);\n\n        return;\n      }\n    } else {\n      // Otherwise, it's a simple toggle\n      player.isFullscreen = !player.isFullscreen;\n\n      // Bind/unbind escape key\n      document.body.style.overflow = player.isFullscreen ? 'hidden' : '';\n    }\n\n    // Set class hook\n    $.toggleClass(container, config.classes.fullscreen.active, player.isFullscreen);\n\n    // Trap focus\n    this._focusTrap(player.isFullscreen);\n\n    // Set button state\n    if (buttons && buttons.fullscreen) {\n      this._toggleState(buttons.fullscreen, player.isFullscreen);\n    }\n\n    // Trigger an event\n    this._triggerEvent(container, player.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Restore scroll position\n    if (!player.isFullscreen && nativeSupport) {\n      this._restoreScrollPosition();\n    }\n  }\n  _focusTrap() {\n    const config = this._config;\n    const player = this._player;\n    const { container } = player;\n    const _getElements = (selector) => {\n      return container.querySelectorAll(selector);\n    }\n    const _getElement = (selector) => {\n      return _getElements(selector)[0];\n    }\n    var tabbables = _getElements('input:not([disabled]), button:not([disabled])'),\n      first = tabbables[0],\n      last = tabbables[tabbables.length - 1];\n\n    function _checkFocus(event) {\n      // If it is TAB\n      if (event.which === 9 && isFullscreen) {\n        if (event.target === last && !event.shiftKey) {\n          // Move focus to first element that can be tabbed if Shift isn't used\n          event.preventDefault();\n          first.focus();\n        } else if (event.target === first && event.shiftKey) {\n          // Move focus to last element that can be tabbed if Shift is used\n          event.preventDefault();\n          last.focus();\n        }\n      }\n    }\n\n    // Bind the handler\n    Event.onEvent(container, 'keydown', _checkFocus);\n  }\n  _saveScrollPosition() {\n    scroll = {\n      x: window.pageXOffset || 0,\n      y: window.pageYOffset || 0\n    };\n  }\n  _restoreScrollPosition() {\n    window.scrollTo(scroll.x, scroll.y);\n  }\n  _toggleControls(toggle) {\n    const config = this._config;\n    const player = this._player;\n    const timers = this._timers;\n\n    const { hideControls, classes } = config;\n    const { type, container, browser, controls, media } = player;\n    const { paused } = media;\n    // Don't hide if config says not to, it's audio, or not ready or loading\n    if (!hideControls || type === 'audio') {\n      return;\n    }\n\n    var delay = 0,\n      isEnterFullscreen = false,\n      show = toggle,\n      loading = $.hasClass(container, classes.loading);\n\n    // Default to false if no boolean\n    if (!is.boolean(toggle)) {\n      if (toggle && toggle.type) {\n        // Is the enter fullscreen event\n        isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\n        // Whether to show controls\n        show = utils.inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\n        // Delay hiding on move events\n        if (utils.inArray(['mousemove', 'touchmove'], toggle.type)) {\n          delay = 2000;\n        }\n\n        // Delay a little more for keyboard users\n        if (toggle.type === 'focus') {\n          delay = 3000;\n        }\n      } else {\n        show = $.hasClass(container, classes.hideControls);\n      }\n    }\n\n    // Clear timer every movement\n    window.clearTimeout(timers.hover);\n\n    // If the mouse is not over the controls, set a timeout to hide them\n    if (show || paused || loading) {\n      $.toggleClass(container, classes.hideControls, false);\n\n      // Always show controls when paused or if touch\n      if (paused || loading) {\n        return;\n      }\n\n      // Delay for hiding on touch\n      if (browser.isTouch) {\n        delay = 3000;\n      }\n    }\n\n    // If toggle is false or if we're playing (regardless of toggle),\n    // then set the timer to hide the controls\n    if (!show || !paused) {\n      timers.hover = window.setTimeout(() => {\n        // If the mouse is over the controls (and not entering fullscreen), bail\n        if ((controls.pressed || controls.hover) && !isEnterFullscreen) {\n          return;\n        }\n\n        $.toggleClass(container, classes.hideControls, true);\n      }, delay);\n    }\n  }\n  _triggerEvent(element, type, bubbles, properties) {\n    Event.customEvent(element, type, bubbles, utils.extend({}, properties, {\n      vplyr: this\n    }));\n  }\n  _getPercentage(current, max) {\n    if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n      return 0;\n    }\n    return ((current / max) * 100).toFixed(2);\n  }\n  _toggleStyleHook() {\n    const config = this._config;\n    const player = this._player;\n    $.toggleClass(player.container, config.selectors.container.replace('.', ''), player.supported.full);\n  }\n}\nexport default Player;","import utils,{ storageSupport } from '../utils/util';\nexport const updateStorage = (value, config, storage) => {\n  if (!storageSupport || !config.storage.enabled) {\n    return;\n  }\n  utils.extend(storage, value);\n  window.localStorage.setItem(config.storage.key, JSON.stringify(storage));\n}\nexport const setupStorage = (config, storage) => {\n  var value = null;\n  if (!storageSupport || !config.storage.enabled) {\n    return;\n  }\n\n  window.localStorage.removeItem('vplyr-volume');\n\n  // load value from the current key\n  value = window.localStorage.getItem(config.storage.key);\n\n  if (!value) {\n    return;\n  } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n    updateStorage({ volume: parseFloat(value) }, config, storage);\n  } else {\n    // Assume it's JSON from this or a later version of plyr\n    storage = JSON.parse(value);\n  }\n}\n","import utils,{is} from './util';\n\nclass Dom {\n  static wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    if (!elements.length) {\n      elements = [elements];\n    }\n\n    // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n    for (var i = elements.length - 1; i >= 0; i--) {\n      var child = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n      var element = elements[i];\n\n      // Cache the current parent and sibling.\n      var parent = element.parentNode;\n      var sibling = element.nextSibling;\n\n      // Wrap the element (is automatically removed from its current\n      // parent).\n      child.appendChild(element);\n\n      // If the element had a sibling, insert the wrapper before\n      // the sibling to maintain the HTML structure; otherwise, just\n      // append it to the parent.\n      if (sibling) {\n        parent.insertBefore(child, sibling);\n      } else {\n        parent.appendChild(child);\n      }\n      return child;\n    }\n  }\n  static getClassname(selector) {\n    return selector.replace('.', '');\n  }\n  static insertElement(type, parent, attributes) {\n    // Create a new <element>\n    var element = document.createElement(type);\n\n    // Set all passed attributes\n    Dom.setAttributes(element, attributes);\n\n    // Inject the new element\n    Dom.prependChild(parent, element);\n  }\n  static setAttributes(element, attributes) {\n    for (var key in attributes) {\n      element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n    }\n  }\n  static prependChild(parent, element) {\n    parent.insertBefore(element, parent.firstChild);\n  }\n  static injectScript(source) {\n    if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n        return;\n    }\n\n    var tag = document.createElement('script');\n    tag.src = source;\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  }\n  static hasClass(element, className) {\n    if (element) {\n      if (element.classList) {\n          return element.classList.contains(className);\n      } else {\n          return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n      }\n    }\n    return false;\n  }\n  static removeElement(element){\n    if (!element) {\n        return;\n    }\n    element.parentNode.removeChild(element);\n  }\n  // Toggle class on an element\n  static toggleClass(element, className, state){\n    if (element) {\n      if (element.classList) {\n        element.classList[state ? 'add' : 'remove'](className);\n      } else {\n        let name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n        element.className = name + (state ? ' ' + className : '');\n      }\n    }\n  }\n  static fullscreen() {\n    var fullscreen = {\n            supportsFullScreen: false,\n            isFullScreen: function() { return false; },\n            requestFullScreen: function() {},\n            cancelFullScreen: function() {},\n            fullScreenEventName: '',\n            element: null,\n            prefix: ''\n        },\n        browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\n    // Check for native support\n    if (!is.undefined(document.cancelFullScreen)) {\n        fullscreen.supportsFullScreen = true;\n    } else {\n      // Check for fullscreen support by vendor prefix\n      for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n        fullscreen.prefix = browserPrefixes[i];\n\n        if (!is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n          fullscreen.supportsFullScreen = true;\n          break;\n        } else if (!is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n          // Special case for MS (when isn't it?)\n          fullscreen.prefix = 'ms';\n          fullscreen.supportsFullScreen = true;\n          break;\n        }\n      }\n    }\n\n    // Update methods to do something useful\n    if (fullscreen.supportsFullScreen) {\n      // Yet again Microsoft awesomeness,\n      // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n      fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\n      fullscreen.isFullScreen = function(element) {\n        if (is.undefined(element)) {\n            element = document.body;\n        }\n        switch (this.prefix) {\n          case '':\n            return document.fullscreenElement === element;\n          case 'moz':\n            return document.mozFullScreenElement === element;\n          default:\n            return document[this.prefix + 'FullscreenElement'] === element;\n        }\n      };\n      fullscreen.requestFullScreen = function(element) {\n        if (is.undefined(element)) {\n          element = document.body;\n        }\n        return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n      };\n      fullscreen.cancelFullScreen = function() {\n        return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n      };\n      fullscreen.element = function() {\n        return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n      };\n    }\n\n    return fullscreen;\n  }\n}\nexport default Dom;\n","import utils, { is } from './util';\n\nclass Event {\n  static customEvent(element, type, bubbles, properties) {\n    // Bail if no element\n    if (!element || !type) {\n      return;\n    }\n\n    // Default bubbles to false\n    if (!is.boolean(bubbles)) {\n      bubbles = false;\n    }\n\n    // Create and dispatch the event\n    var event = new CustomEvent(type, {\n      bubbles: bubbles,\n      detail: properties\n    });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n  }\n  static onEvent(element, events, callback, useCapture) {\n    if (element) {\n      Event.toggleListener(element, events, callback, true, useCapture);\n    }\n  }\n\n  static toggleListener(element, events, callback, toggle, useCapture) {\n    var eventList = events.split(' ');\n    // Whether the listener is a capturing listener or not\n    // Default to false\n    if (!is.boolean(useCapture)) {\n      useCapture = false;\n    }\n    // If a nodelist is passed, call itself on each node\n    if (element instanceof NodeList) {\n      for (var x = 0; x < element.length; x++) {\n        if (element[x] instanceof Node) {\n          Event.toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n        }\n      }\n      return;\n    }\n\n    // If a single node is passed, bind the event listener\n    for (var i = 0; i < eventList.length; i++) {\n      element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n    }\n  }\n  static proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n    Event.onEvent(element, eventName, function (event) {\n      if (userListener) {\n        userListener.apply(element, [event]);\n      }\n      defaultListener.apply(element, [event]);\n    }, useCapture);\n  }\n}\nexport default Event;","\nclass Log {\n\n  static e(tag, msg) {\n    if (!Log.ENABLE_ERROR) {\n      return;\n    }\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n    let str = `[${tag}] > ${msg}`;\n    if (console.error) {\n      console.error(str);\n    } else if (console.warn) {\n      console.warn(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static i(tag, msg) {\n    if (!Log.ENABLE_INFO) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.info) {\n      console.info(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static w(tag, msg) {\n    if (!Log.ENABLE_WARN) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.warn) {\n      console.warn(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static d(tag, msg) {\n    if (!Log.ENABLE_DEBUG) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n\n    let str = `[${tag}] > ${msg}`;\n\n    if (console.debug) {\n      console.debug(str);\n    } else {\n      console.log(str);\n    }\n  }\n\n  static v(tag, msg) {\n    if (!Log.ENABLE_VERBOSE) {\n      return;\n    }\n\n    if (!tag || Log.FORCE_GLOBAL_TAG)\n      tag = Log.GLOBAL_TAG;\n    console.log(`[${tag}] > ${msg}`);\n  }\n\n}\n\nLog.GLOBAL_TAG = 'VPlyr';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nexport default Log;","class Utils {\n  \n  static storageSupport(){\n    if (!('localStorage' in window)) {\n      return false;\n    }\n\n    // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n    // see: https://github.com/Selz/plyr/issues/131\n    try {\n      // Add test item\n      window.localStorage.setItem('___test', 'OK');\n\n      // Get the test item\n      let result = window.localStorage.getItem('___test');\n\n      // Clean up\n      window.localStorage.removeItem('___test');\n\n      // Check if value matches\n      return (result === 'OK');\n    }\n    catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n  static replaceAll(string, find, replace) {\n    return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n  }\n  static extend() {\n    // Get arguments\n    let objects = arguments;\n\n    // Bail if nothing to merge\n    if (!objects.length) {\n      return;\n    }\n\n    // Return first if specified but nothing to merge\n    if (objects.length === 1) {\n      return objects[0];\n    }\n\n    // First object is the destination\n    let destination = Array.prototype.shift.call(objects),\n      length = objects.length;\n\n    // Loop through all objects to merge\n    for (let i = 0; i < length; i++) {\n      let source = objects[i];\n\n      for (let property in source) {\n        if (source[property] &&\n          source[property].constructor &&\n          source[property].constructor === Object\n        ) {\n          destination[property] = destination[property] || {};\n          Utils.extend(destination[property], source[property]);\n        } else {\n          destination[property] = source[property];\n        }\n      }\n    }\n\n    return destination;\n  }\n  static is(){\n    return {\n      object: function(input) {\n        return input !== null && typeof(input) === 'object';\n      },\n      array: function(input) {\n        return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n      },\n      number: function(input) {\n        return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n      },\n      string: function(input) {\n        return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n      },\n      boolean: function(input) {\n        return input !== null && typeof input === 'boolean';\n      },\n      nodeList: function(input) {\n        return input !== null && input instanceof NodeList;\n      },\n      htmlElement: function(input) {\n        return input !== null && input instanceof HTMLElement;\n      },\n      function: function(input) {\n        return input !== null && typeof input === 'function';\n      },\n      undefined: function(input) {\n        return input !== null && typeof input === 'undefined';\n      }\n    }\n  }\n  static browerSniff(){\n    let ua = navigator.userAgent,\n      name = navigator.appName,\n      fullVersion = '' + parseFloat(navigator.appVersion),\n      majorVersion = parseInt(navigator.appVersion, 10),\n      nameOffset,\n      verOffset,\n      ix,\n      isIE = false,\n      isFirefox = false,\n      isChrome = false,\n      isWechat = false,\n      isSafari = false;\n\n    if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n      // MSIE 11\n      isIE = true;\n      name = 'IE';\n      fullVersion = '11';\n    } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n      // MSIE\n      isIE = true;\n      name = 'IE';\n      fullVersion = ua.substring(verOffset + 5);\n    }else if ((verOffset = ua.indexOf('micromessenger')) !== -1) {\n      // WeChat\n      isWechat = true;\n      name = 'WeChat';\n      fullVersion = ua.substring(verOffset + 15);\n    }else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n      // Chrome\n      isChrome = true;\n      name = 'Chrome';\n      fullVersion = ua.substring(verOffset + 7);\n    } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n      // Safari\n      isSafari = true;\n      name = 'Safari';\n      fullVersion = ua.substring(verOffset + 7);\n      if ((verOffset = ua.indexOf('Version')) !== -1) {\n          fullVersion = ua.substring(verOffset + 8);\n      }\n    } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n      // Firefox\n      isFirefox = true;\n      name = 'Firefox';\n      fullVersion = ua.substring(verOffset + 8);\n    } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n      // In most other browsers, 'name/version' is at the end of userAgent\n      name = ua.substring(nameOffset,verOffset);\n      fullVersion = ua.substring(verOffset + 1);\n\n      if (name.toLowerCase() === name.toUpperCase()) {\n          name = navigator.appName;\n      }\n    }\n\n    // Trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n      fullVersion = fullVersion.substring(0, ix);\n    }\n\n    // Get major version\n    majorVersion = parseInt('' + fullVersion, 10);\n    if (isNaN(majorVersion)) {\n      fullVersion = '' + parseFloat(navigator.appVersion);\n      majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    // Return data\n    return {\n      name:       name,\n      version:    majorVersion,\n      isIE:       isIE,\n      isFirefox:  isFirefox,\n      isChrome:   isChrome,\n      isSafari:   isSafari,\n      isWechat:   isWechat,\n      isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n      isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n      isTouch:    'ontouchstart' in document.documentElement\n    };\n  }\n  static inArray(haystack, needle) {\n    return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n  }\n  static support(type){\n    const browser     = Utils.browserSniff(),\n        isOldIE     = (browser.isIE && browser.version <= 9),\n        isIos       = browser.isIos,\n        isIphone    = browser.isIphone,\n        audioSupport = !!document.createElement('audio').canPlayType,\n        videoSupport = !!document.createElement('video').canPlayType;\n    let basic       = false,\n        full        = false;\n\n    switch (type) {\n        case 'video':\n            basic = videoSupport;\n            full  = (basic && (!isOldIE));\n            break;\n\n        case 'audio':\n            basic = audioSupport;\n            full  = (basic && !isOldIE);\n            break;\n\n        default:\n            basic = (audioSupport && videoSupport);\n            full  = (basic && !isOldIE);\n    }\n\n    return {\n        basic:  basic,\n        full:   full\n    };\n  }\n  static supported(type){\n    const browser     = Utils.browerSniff(),\n        isOldIE     = (browser.isIE && browser.version <= 9),\n        isIos       = browser.isIos,\n        isIphone    = browser.isIphone,\n        audioSupport = !!document.createElement('audio').canPlayType,\n        videoSupport = !!document.createElement('video').canPlayType;\n    let basic       = false,\n        full        = false;\n\n    switch (type) {\n        case 'video':\n            basic = videoSupport;\n            full  = (basic && (!isOldIE));\n            break;\n\n        case 'audio':\n            basic = audioSupport;\n            full  = (basic && !isOldIE);\n            break;\n\n        default:\n            basic = (audioSupport && videoSupport);\n            full  = (basic && !isOldIE);\n    }\n\n    return {\n        basic:  basic,\n        full:   full\n    };\n  }\n}\nexport default Utils;\nexport const is = Utils.is();\nexport const storageSupport = Utils.storageSupport();\n","import Player from './player/index';\nfunction install() {\n  if (typeof window.CustomEvent === 'function') {\n    return;\n  }\n\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent;\n\n}\ninstall();\nlet vPlayer = Player;\n\nObject.defineProperty(vPlayer, 'version', {\n  enumerable: true,\n  get: function () {\n    // replaced by browserify-versionify transform\n    return '__VERSION__';\n  }\n});\nexport default vPlayer;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}